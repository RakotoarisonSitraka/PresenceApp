/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/bootstrap.bundle.min.js":
/*!**********************************************!*\
  !*** ./resources/js/bootstrap.bundle.min.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n  * Bootstrap v5.0.0-alpha1 (https://getbootstrap.com/)\n  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function t(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function e(e, n, i) {\n    return n && t(e.prototype, n), i && t(e, i), e;\n  }\n\n  function n(t, e, n) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = n, t;\n  }\n\n  function i(t, e) {\n    var n = Object.keys(t);\n\n    if (Object.getOwnPropertySymbols) {\n      var i = Object.getOwnPropertySymbols(t);\n      e && (i = i.filter(function (e) {\n        return Object.getOwnPropertyDescriptor(t, e).enumerable;\n      })), n.push.apply(n, i);\n    }\n\n    return n;\n  }\n\n  function o(t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var o = null != arguments[e] ? arguments[e] : {};\n      e % 2 ? i(Object(o), !0).forEach(function (e) {\n        n(t, e, o[e]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(o)) : i(Object(o)).forEach(function (e) {\n        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(o, e));\n      });\n    }\n\n    return t;\n  }\n\n  var r,\n      s,\n      a,\n      l,\n      c = function c(t) {\n    do {\n      t += Math.floor(1e6 * Math.random());\n    } while (document.getElementById(t));\n\n    return t;\n  },\n      u = function u(t) {\n    var e = t.getAttribute(\"data-target\");\n\n    if (!e || \"#\" === e) {\n      var n = t.getAttribute(\"href\");\n      e = n && \"#\" !== n ? n.trim() : null;\n    }\n\n    return e;\n  },\n      f = function f(t) {\n    var e = u(t);\n    return e && document.querySelector(e) ? e : null;\n  },\n      h = function h(t) {\n    var e = u(t);\n    return e ? document.querySelector(e) : null;\n  },\n      d = function d(t) {\n    if (!t) return 0;\n    var e = window.getComputedStyle(t),\n        n = e.transitionDuration,\n        i = e.transitionDelay,\n        o = parseFloat(n),\n        r = parseFloat(i);\n    return o || r ? (n = n.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (parseFloat(n) + parseFloat(i))) : 0;\n  },\n      p = function p(t) {\n    t.dispatchEvent(new Event(\"transitionend\"));\n  },\n      m = function m(t) {\n    return (t[0] || t).nodeType;\n  },\n      g = function g(t, e) {\n    var n = !1,\n        i = e + 5;\n    t.addEventListener(\"transitionend\", function e() {\n      n = !0, t.removeEventListener(\"transitionend\", e);\n    }), setTimeout(function () {\n      n || p(t);\n    }, i);\n  },\n      v = function v(t, e, n) {\n    Object.keys(n).forEach(function (i) {\n      var o,\n          r = n[i],\n          s = e[i],\n          a = s && m(s) ? \"element\" : null == (o = s) ? \"\" + o : {}.toString.call(o).match(/\\s([a-z]+)/i)[1].toLowerCase();\n      if (!new RegExp(r).test(a)) throw new Error(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + a + '\" but expected type \"' + r + '\".');\n    });\n  },\n      _ = function _(t) {\n    if (!t) return !1;\n\n    if (t.style && t.parentNode && t.parentNode.style) {\n      var e = getComputedStyle(t),\n          n = getComputedStyle(t.parentNode);\n      return \"none\" !== e.display && \"none\" !== n.display && \"hidden\" !== e.visibility;\n    }\n\n    return !1;\n  },\n      b = function b() {\n    return function () {};\n  },\n      y = function y(t) {\n    return t.offsetHeight;\n  },\n      w = function w() {\n    var t = window.jQuery;\n    return t && !document.body.hasAttribute(\"data-no-jquery\") ? t : null;\n  },\n      E = (r = {}, s = 1, {\n    set: function set(t, e, n) {\n      void 0 === t.key && (t.key = {\n        key: e,\n        id: s\n      }, s++), r[t.key.id] = n;\n    },\n    get: function get(t, e) {\n      if (!t || void 0 === t.key) return null;\n      var n = t.key;\n      return n.key === e ? r[n.id] : null;\n    },\n    \"delete\": function _delete(t, e) {\n      if (void 0 !== t.key) {\n        var n = t.key;\n        n.key === e && (delete r[n.id], delete t.key);\n      }\n    }\n  }),\n      T = function T(t, e, n) {\n    E.set(t, e, n);\n  },\n      L = function L(t, e) {\n    return E.get(t, e);\n  },\n      k = function k(t, e) {\n    E[\"delete\"](t, e);\n  },\n      O = Element.prototype.querySelectorAll,\n      C = Element.prototype.querySelector,\n      A = (a = new CustomEvent(\"Bootstrap\", {\n    cancelable: !0\n  }), (l = document.createElement(\"div\")).addEventListener(\"Bootstrap\", function () {\n    return null;\n  }), a.preventDefault(), l.dispatchEvent(a), a.defaultPrevented),\n      D = /:scope\\b/;\n\n  (function () {\n    var t = document.createElement(\"div\");\n\n    try {\n      t.querySelectorAll(\":scope *\");\n    } catch (t) {\n      return !1;\n    }\n\n    return !0;\n  })() || (O = function O(t) {\n    if (!D.test(t)) return this.querySelectorAll(t);\n    var e = Boolean(this.id);\n    e || (this.id = c(\"scope\"));\n    var n = null;\n\n    try {\n      t = t.replace(D, \"#\" + this.id), n = this.querySelectorAll(t);\n    } finally {\n      e || this.removeAttribute(\"id\");\n    }\n\n    return n;\n  }, C = function C(t) {\n    if (!D.test(t)) return this.querySelector(t);\n    var e = O.call(this, t);\n    return void 0 !== e[0] ? e[0] : null;\n  });\n  var S = w(),\n      x = /[^.]*(?=\\..*)\\.|.*/,\n      N = /\\..*/,\n      I = /::\\d+$/,\n      j = {},\n      P = 1,\n      M = {\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  },\n      H = [\"click\", \"dblclick\", \"mouseup\", \"mousedown\", \"contextmenu\", \"mousewheel\", \"DOMMouseScroll\", \"mouseover\", \"mouseout\", \"mousemove\", \"selectstart\", \"selectend\", \"keydown\", \"keypress\", \"keyup\", \"orientationchange\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"pointerdown\", \"pointermove\", \"pointerup\", \"pointerleave\", \"pointercancel\", \"gesturestart\", \"gesturechange\", \"gestureend\", \"focus\", \"blur\", \"change\", \"reset\", \"select\", \"submit\", \"focusin\", \"focusout\", \"load\", \"unload\", \"beforeunload\", \"resize\", \"move\", \"DOMContentLoaded\", \"readystatechange\", \"error\", \"abort\", \"scroll\"];\n\n  function B(t, e) {\n    return e && e + \"::\" + P++ || t.uidEvent || P++;\n  }\n\n  function R(t) {\n    var e = B(t);\n    return t.uidEvent = e, j[e] = j[e] || {}, j[e];\n  }\n\n  function F(t, e, n) {\n    void 0 === n && (n = null);\n\n    for (var i = Object.keys(t), o = 0, r = i.length; o < r; o++) {\n      var s = t[i[o]];\n      if (s.originalHandler === e && s.delegationSelector === n) return s;\n    }\n\n    return null;\n  }\n\n  function W(t, e, n) {\n    var i = \"string\" == typeof e,\n        o = i ? n : e,\n        r = t.replace(N, \"\"),\n        s = M[r];\n    return s && (r = s), H.indexOf(r) > -1 || (r = t), [i, o, r];\n  }\n\n  function U(t, e, n, i, o) {\n    if (\"string\" == typeof e && t) {\n      n || (n = i, i = null);\n      var r = W(e, n, i),\n          s = r[0],\n          a = r[1],\n          l = r[2],\n          c = R(t),\n          u = c[l] || (c[l] = {}),\n          f = F(u, a, s ? n : null);\n      if (f) f.oneOff = f.oneOff && o;else {\n        var h = B(a, e.replace(x, \"\")),\n            d = s ? function (t, e, n) {\n          return function i(o) {\n            for (var r = t.querySelectorAll(e), s = o.target; s && s !== this; s = s.parentNode) {\n              for (var a = r.length; a--;) {\n                if (r[a] === s) return i.oneOff && V.off(t, o.type, n), n.apply(s, [o]);\n              }\n            }\n\n            return null;\n          };\n        }(t, n, i) : function (t, e) {\n          return function n(i) {\n            return n.oneOff && V.off(t, i.type, e), e.apply(t, [i]);\n          };\n        }(t, n);\n        d.delegationSelector = s ? n : null, d.originalHandler = a, d.oneOff = o, d.uidEvent = h, u[h] = d, t.addEventListener(l, d, s);\n      }\n    }\n  }\n\n  function Q(t, e, n, i, o) {\n    var r = F(e[n], i, o);\n    r && (t.removeEventListener(n, r, Boolean(o)), delete e[n][r.uidEvent]);\n  }\n\n  var V = {\n    on: function on(t, e, n, i) {\n      U(t, e, n, i, !1);\n    },\n    one: function one(t, e, n, i) {\n      U(t, e, n, i, !0);\n    },\n    off: function off(t, e, n, i) {\n      if (\"string\" == typeof e && t) {\n        var o = W(e, n, i),\n            r = o[0],\n            s = o[1],\n            a = o[2],\n            l = a !== e,\n            c = R(t),\n            u = \".\" === e.charAt(0);\n\n        if (void 0 === s) {\n          u && Object.keys(c).forEach(function (n) {\n            !function (t, e, n, i) {\n              var o = e[n] || {};\n              Object.keys(o).forEach(function (r) {\n                if (r.indexOf(i) > -1) {\n                  var s = o[r];\n                  Q(t, e, n, s.originalHandler, s.delegationSelector);\n                }\n              });\n            }(t, c, n, e.slice(1));\n          });\n          var f = c[a] || {};\n          Object.keys(f).forEach(function (n) {\n            var i = n.replace(I, \"\");\n\n            if (!l || e.indexOf(i) > -1) {\n              var o = f[n];\n              Q(t, c, a, o.originalHandler, o.delegationSelector);\n            }\n          });\n        } else {\n          if (!c || !c[a]) return;\n          Q(t, c, a, s, r ? n : null);\n        }\n      }\n    },\n    trigger: function trigger(t, e, n) {\n      if (\"string\" != typeof e || !t) return null;\n      var i,\n          o = e.replace(N, \"\"),\n          r = e !== o,\n          s = H.indexOf(o) > -1,\n          a = !0,\n          l = !0,\n          c = !1,\n          u = null;\n      return r && S && (i = S.Event(e, n), S(t).trigger(i), a = !i.isPropagationStopped(), l = !i.isImmediatePropagationStopped(), c = i.isDefaultPrevented()), s ? (u = document.createEvent(\"HTMLEvents\")).initEvent(o, a, !0) : u = new CustomEvent(e, {\n        bubbles: a,\n        cancelable: !0\n      }), void 0 !== n && Object.keys(n).forEach(function (t) {\n        Object.defineProperty(u, t, {\n          get: function get() {\n            return n[t];\n          }\n        });\n      }), c && (u.preventDefault(), A || Object.defineProperty(u, \"defaultPrevented\", {\n        get: function get() {\n          return !0;\n        }\n      })), l && t.dispatchEvent(u), u.defaultPrevented && void 0 !== i && i.preventDefault(), u;\n    }\n  },\n      q = \"alert\",\n      Y = function () {\n    function t(t) {\n      this._element = t, this._element && T(t, \"bs.alert\", this);\n    }\n\n    var n = t.prototype;\n    return n.close = function (t) {\n      var e = this._element;\n      t && (e = this._getRootElement(t));\n\n      var n = this._triggerCloseEvent(e);\n\n      null === n || n.defaultPrevented || this._removeElement(e);\n    }, n.dispose = function () {\n      k(this._element, \"bs.alert\"), this._element = null;\n    }, n._getRootElement = function (t) {\n      return h(t) || t.closest(\".alert\");\n    }, n._triggerCloseEvent = function (t) {\n      return V.trigger(t, \"close.bs.alert\");\n    }, n._removeElement = function (t) {\n      var e = this;\n\n      if (t.classList.remove(\"show\"), t.classList.contains(\"fade\")) {\n        var n = d(t);\n        V.one(t, \"transitionend\", function () {\n          return e._destroyElement(t);\n        }), g(t, n);\n      } else this._destroyElement(t);\n    }, n._destroyElement = function (t) {\n      t.parentNode && t.parentNode.removeChild(t), V.trigger(t, \"closed.bs.alert\");\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.alert\");\n        n || (n = new t(this)), \"close\" === e && n[e](this);\n      });\n    }, t.handleDismiss = function (t) {\n      return function (e) {\n        e && e.preventDefault(), t.close(this);\n      };\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.alert\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.alert.data-api\", '[data-dismiss=\"alert\"]', Y.handleDismiss(new Y()));\n  var z = w();\n\n  if (z) {\n    var K = z.fn[q];\n    z.fn[q] = Y.jQueryInterface, z.fn[q].Constructor = Y, z.fn[q].noConflict = function () {\n      return z.fn[q] = K, Y.jQueryInterface;\n    };\n  }\n\n  var X = function () {\n    function t(t) {\n      this._element = t, T(t, \"bs.button\", this);\n    }\n\n    var n = t.prototype;\n    return n.toggle = function () {\n      this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\"));\n    }, n.dispose = function () {\n      k(this._element, \"bs.button\"), this._element = null;\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.button\");\n        n || (n = new t(this)), \"toggle\" === e && n[e]();\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.button\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.button.data-api\", '[data-toggle=\"button\"]', function (t) {\n    t.preventDefault();\n    var e = t.target.closest('[data-toggle=\"button\"]'),\n        n = L(e, \"bs.button\");\n    n || (n = new X(e)), n.toggle();\n  });\n  var G = w();\n\n  if (G) {\n    var $ = G.fn.button;\n    G.fn.button = X.jQueryInterface, G.fn.button.Constructor = X, G.fn.button.noConflict = function () {\n      return G.fn.button = $, X.jQueryInterface;\n    };\n  }\n\n  function Z(t) {\n    return \"true\" === t || \"false\" !== t && (t === Number(t).toString() ? Number(t) : \"\" === t || \"null\" === t ? null : t);\n  }\n\n  function J(t) {\n    return t.replace(/[A-Z]/g, function (t) {\n      return \"-\" + t.toLowerCase();\n    });\n  }\n\n  var tt = {\n    setDataAttribute: function setDataAttribute(t, e, n) {\n      t.setAttribute(\"data-\" + J(e), n);\n    },\n    removeDataAttribute: function removeDataAttribute(t, e) {\n      t.removeAttribute(\"data-\" + J(e));\n    },\n    getDataAttributes: function getDataAttributes(t) {\n      if (!t) return {};\n      var e = o({}, t.dataset);\n      return Object.keys(e).forEach(function (t) {\n        e[t] = Z(e[t]);\n      }), e;\n    },\n    getDataAttribute: function getDataAttribute(t, e) {\n      return Z(t.getAttribute(\"data-\" + J(e)));\n    },\n    offset: function offset(t) {\n      var e = t.getBoundingClientRect();\n      return {\n        top: e.top + document.body.scrollTop,\n        left: e.left + document.body.scrollLeft\n      };\n    },\n    position: function position(t) {\n      return {\n        top: t.offsetTop,\n        left: t.offsetLeft\n      };\n    },\n    toggleClass: function toggleClass(t, e) {\n      t && (t.classList.contains(e) ? t.classList.remove(e) : t.classList.add(e));\n    }\n  },\n      et = {\n    matches: function matches(t, e) {\n      return t.matches(e);\n    },\n    find: function find(t, e) {\n      var n;\n      return void 0 === e && (e = document.documentElement), (n = []).concat.apply(n, O.call(e, t));\n    },\n    findOne: function findOne(t, e) {\n      return void 0 === e && (e = document.documentElement), C.call(e, t);\n    },\n    children: function children(t, e) {\n      var n,\n          i = (n = []).concat.apply(n, t.children);\n      return i.filter(function (t) {\n        return t.matches(e);\n      });\n    },\n    parents: function parents(t, e) {\n      for (var n = [], i = t.parentNode; i && i.nodeType === Node.ELEMENT_NODE && 3 !== i.nodeType;) {\n        this.matches(i, e) && n.push(i), i = i.parentNode;\n      }\n\n      return n;\n    },\n    prev: function prev(t, e) {\n      for (var n = t.previousElementSibling; n;) {\n        if (n.matches(e)) return [n];\n        n = n.previousElementSibling;\n      }\n\n      return [];\n    },\n    next: function next(t, e) {\n      for (var n = t.nextElementSibling; n;) {\n        if (this.matches(n, e)) return [n];\n        n = n.nextElementSibling;\n      }\n\n      return [];\n    }\n  },\n      nt = \"carousel\",\n      it = \".bs.carousel\",\n      ot = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n  },\n      rt = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    slide: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n  },\n      st = {\n    TOUCH: \"touch\",\n    PEN: \"pen\"\n  },\n      at = function () {\n    function t(t, e) {\n      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = et.findOne(\".carousel-indicators\", this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners(), T(t, \"bs.carousel\", this);\n    }\n\n    var n = t.prototype;\n    return n.next = function () {\n      this._isSliding || this._slide(\"next\");\n    }, n.nextWhenVisible = function () {\n      !document.hidden && _(this._element) && this.next();\n    }, n.prev = function () {\n      this._isSliding || this._slide(\"prev\");\n    }, n.pause = function (t) {\n      t || (this._isPaused = !0), et.findOne(\".carousel-item-next, .carousel-item-prev\", this._element) && (p(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }, n.cycle = function (t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }, n.to = function (t) {\n      var e = this;\n      this._activeElement = et.findOne(\".active.carousel-item\", this._element);\n\n      var n = this._getItemIndex(this._activeElement);\n\n      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) V.one(this._element, \"slid.bs.carousel\", function () {\n        return e.to(t);\n      });else {\n        if (n === t) return this.pause(), void this.cycle();\n        var i = t > n ? \"next\" : \"prev\";\n\n        this._slide(i, this._items[t]);\n      }\n    }, n.dispose = function () {\n      V.off(this._element, it), k(this._element, \"bs.carousel\"), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n    }, n._getConfig = function (t) {\n      return t = o(o({}, ot), t), v(nt, t, rt), t;\n    }, n._handleSwipe = function () {\n      var t = Math.abs(this.touchDeltaX);\n\n      if (!(t <= 40)) {\n        var e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e > 0 && this.prev(), e < 0 && this.next();\n      }\n    }, n._addEventListeners = function () {\n      var t = this;\n      this._config.keyboard && V.on(this._element, \"keydown.bs.carousel\", function (e) {\n        return t._keydown(e);\n      }), \"hover\" === this._config.pause && (V.on(this._element, \"mouseenter.bs.carousel\", function (e) {\n        return t.pause(e);\n      }), V.on(this._element, \"mouseleave.bs.carousel\", function (e) {\n        return t.cycle(e);\n      })), this._config.touch && this._touchSupported && this._addTouchEventListeners();\n    }, n._addTouchEventListeners = function () {\n      var t = this,\n          e = function e(_e2) {\n        t._pointerEvent && st[_e2.pointerType.toUpperCase()] ? t.touchStartX = _e2.clientX : t._pointerEvent || (t.touchStartX = _e2.touches[0].clientX);\n      },\n          n = function n(e) {\n        t._pointerEvent && st[e.pointerType.toUpperCase()] && (t.touchDeltaX = e.clientX - t.touchStartX), t._handleSwipe(), \"hover\" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {\n          return t.cycle(e);\n        }, 500 + t._config.interval));\n      };\n\n      et.find(\".carousel-item img\", this._element).forEach(function (t) {\n        V.on(t, \"dragstart.bs.carousel\", function (t) {\n          return t.preventDefault();\n        });\n      }), this._pointerEvent ? (V.on(this._element, \"pointerdown.bs.carousel\", function (t) {\n        return e(t);\n      }), V.on(this._element, \"pointerup.bs.carousel\", function (t) {\n        return n(t);\n      }), this._element.classList.add(\"pointer-event\")) : (V.on(this._element, \"touchstart.bs.carousel\", function (t) {\n        return e(t);\n      }), V.on(this._element, \"touchmove.bs.carousel\", function (e) {\n        return function (e) {\n          e.touches && e.touches.length > 1 ? t.touchDeltaX = 0 : t.touchDeltaX = e.touches[0].clientX - t.touchStartX;\n        }(e);\n      }), V.on(this._element, \"touchend.bs.carousel\", function (t) {\n        return n(t);\n      }));\n    }, n._keydown = function (t) {\n      if (!/input|textarea/i.test(t.target.tagName)) switch (t.key) {\n        case \"ArrowLeft\":\n          t.preventDefault(), this.prev();\n          break;\n\n        case \"ArrowRight\":\n          t.preventDefault(), this.next();\n      }\n    }, n._getItemIndex = function (t) {\n      return this._items = t && t.parentNode ? et.find(\".carousel-item\", t.parentNode) : [], this._items.indexOf(t);\n    }, n._getItemByDirection = function (t, e) {\n      var n = \"next\" === t,\n          i = \"prev\" === t,\n          o = this._getItemIndex(e),\n          r = this._items.length - 1;\n\n      if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;\n      var s = (o + (\"prev\" === t ? -1 : 1)) % this._items.length;\n      return -1 === s ? this._items[this._items.length - 1] : this._items[s];\n    }, n._triggerSlideEvent = function (t, e) {\n      var n = this._getItemIndex(t),\n          i = this._getItemIndex(et.findOne(\".active.carousel-item\", this._element));\n\n      return V.trigger(this._element, \"slide.bs.carousel\", {\n        relatedTarget: t,\n        direction: e,\n        from: i,\n        to: n\n      });\n    }, n._setActiveIndicatorElement = function (t) {\n      if (this._indicatorsElement) {\n        for (var e = et.find(\".active\", this._indicatorsElement), n = 0; n < e.length; n++) {\n          e[n].classList.remove(\"active\");\n        }\n\n        var i = this._indicatorsElement.children[this._getItemIndex(t)];\n\n        i && i.classList.add(\"active\");\n      }\n    }, n._slide = function (t, e) {\n      var n,\n          i,\n          o,\n          r = this,\n          s = et.findOne(\".active.carousel-item\", this._element),\n          a = this._getItemIndex(s),\n          l = e || s && this._getItemByDirection(t, s),\n          c = this._getItemIndex(l),\n          u = Boolean(this._interval);\n\n      if (\"next\" === t ? (n = \"carousel-item-left\", i = \"carousel-item-next\", o = \"left\") : (n = \"carousel-item-right\", i = \"carousel-item-prev\", o = \"right\"), l && l.classList.contains(\"active\")) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).defaultPrevented && s && l) {\n        if (this._isSliding = !0, u && this.pause(), this._setActiveIndicatorElement(l), this._element.classList.contains(\"slide\")) {\n          l.classList.add(i), y(l), s.classList.add(n), l.classList.add(n);\n          var f = parseInt(l.getAttribute(\"data-interval\"), 10);\n          f ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = f) : this._config.interval = this._config.defaultInterval || this._config.interval;\n          var h = d(s);\n          V.one(s, \"transitionend\", function () {\n            l.classList.remove(n, i), l.classList.add(\"active\"), s.classList.remove(\"active\", i, n), r._isSliding = !1, setTimeout(function () {\n              V.trigger(r._element, \"slid.bs.carousel\", {\n                relatedTarget: l,\n                direction: o,\n                from: a,\n                to: c\n              });\n            }, 0);\n          }), g(s, h);\n        } else s.classList.remove(\"active\"), l.classList.add(\"active\"), this._isSliding = !1, V.trigger(this._element, \"slid.bs.carousel\", {\n          relatedTarget: l,\n          direction: o,\n          from: a,\n          to: c\n        });\n\n        u && this.cycle();\n      }\n    }, t.carouselInterface = function (e, n) {\n      var i = L(e, \"bs.carousel\"),\n          r = o(o({}, ot), tt.getDataAttributes(e));\n      \"object\" == _typeof(n) && (r = o(o({}, r), n));\n      var s = \"string\" == typeof n ? n : r.slide;\n      if (i || (i = new t(e, r)), \"number\" == typeof n) i.to(n);else if (\"string\" == typeof s) {\n        if (void 0 === i[s]) throw new TypeError('No method named \"' + s + '\"');\n        i[s]();\n      } else r.interval && r.ride && (i.pause(), i.cycle());\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        t.carouselInterface(this, e);\n      });\n    }, t.dataApiClickHandler = function (e) {\n      var n = h(this);\n\n      if (n && n.classList.contains(\"carousel\")) {\n        var i = o(o({}, tt.getDataAttributes(n)), tt.getDataAttributes(this)),\n            r = this.getAttribute(\"data-slide-to\");\n        r && (i.interval = !1), t.carouselInterface(n, i), r && L(n, \"bs.carousel\").to(r), e.preventDefault();\n      }\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.carousel\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ot;\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.carousel.data-api\", \"[data-slide], [data-slide-to]\", at.dataApiClickHandler), V.on(window, \"load.bs.carousel.data-api\", function () {\n    for (var t = et.find('[data-ride=\"carousel\"]'), e = 0, n = t.length; e < n; e++) {\n      at.carouselInterface(t[e], L(t[e], \"bs.carousel\"));\n    }\n  });\n  var lt = w();\n\n  if (lt) {\n    var ct = lt.fn[nt];\n    lt.fn[nt] = at.jQueryInterface, lt.fn[nt].Constructor = at, lt.fn[nt].noConflict = function () {\n      return lt.fn[nt] = ct, at.jQueryInterface;\n    };\n  }\n\n  var ut = \"collapse\",\n      ft = {\n    toggle: !0,\n    parent: \"\"\n  },\n      ht = {\n    toggle: \"boolean\",\n    parent: \"(string|element)\"\n  },\n      dt = function () {\n    function t(t, e) {\n      this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = et.find('[data-toggle=\"collapse\"][href=\"#' + t.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + t.id + '\"]');\n\n      for (var n = et.find('[data-toggle=\"collapse\"]'), i = 0, o = n.length; i < o; i++) {\n        var r = n[i],\n            s = f(r),\n            a = et.find(s).filter(function (e) {\n          return e === t;\n        });\n        null !== s && a.length && (this._selector = s, this._triggerArray.push(r));\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle(), T(t, \"bs.collapse\", this);\n    }\n\n    var n = t.prototype;\n    return n.toggle = function () {\n      this._element.classList.contains(\"show\") ? this.hide() : this.show();\n    }, n.show = function () {\n      var e = this;\n\n      if (!this._isTransitioning && !this._element.classList.contains(\"show\")) {\n        var n, i;\n        this._parent && 0 === (n = et.find(\".show, .collapsing\", this._parent).filter(function (t) {\n          return \"string\" == typeof e._config.parent ? t.getAttribute(\"data-parent\") === e._config.parent : t.classList.contains(\"collapse\");\n        })).length && (n = null);\n        var o = et.findOne(this._selector);\n\n        if (n) {\n          var r = n.filter(function (t) {\n            return o !== t;\n          });\n          if ((i = r[0] ? L(r[0], \"bs.collapse\") : null) && i._isTransitioning) return;\n        }\n\n        if (!V.trigger(this._element, \"show.bs.collapse\").defaultPrevented) {\n          n && n.forEach(function (e) {\n            o !== e && t.collapseInterface(e, \"hide\"), i || T(e, \"bs.collapse\", null);\n          });\n\n          var s = this._getDimension();\n\n          this._element.classList.remove(\"collapse\"), this._element.classList.add(\"collapsing\"), this._element.style[s] = 0, this._triggerArray.length && this._triggerArray.forEach(function (t) {\n            t.classList.remove(\"collapsed\"), t.setAttribute(\"aria-expanded\", !0);\n          }), this.setTransitioning(!0);\n          var a = \"scroll\" + (s[0].toUpperCase() + s.slice(1)),\n              l = d(this._element);\n          V.one(this._element, \"transitionend\", function () {\n            e._element.classList.remove(\"collapsing\"), e._element.classList.add(\"collapse\", \"show\"), e._element.style[s] = \"\", e.setTransitioning(!1), V.trigger(e._element, \"shown.bs.collapse\");\n          }), g(this._element, l), this._element.style[s] = this._element[a] + \"px\";\n        }\n      }\n    }, n.hide = function () {\n      var t = this;\n\n      if (!this._isTransitioning && this._element.classList.contains(\"show\") && !V.trigger(this._element, \"hide.bs.collapse\").defaultPrevented) {\n        var e = this._getDimension();\n\n        this._element.style[e] = this._element.getBoundingClientRect()[e] + \"px\", y(this._element), this._element.classList.add(\"collapsing\"), this._element.classList.remove(\"collapse\", \"show\");\n        var n = this._triggerArray.length;\n        if (n > 0) for (var i = 0; i < n; i++) {\n          var o = this._triggerArray[i],\n              r = h(o);\n          r && !r.classList.contains(\"show\") && (o.classList.add(\"collapsed\"), o.setAttribute(\"aria-expanded\", !1));\n        }\n        this.setTransitioning(!0);\n        this._element.style[e] = \"\";\n        var s = d(this._element);\n        V.one(this._element, \"transitionend\", function () {\n          t.setTransitioning(!1), t._element.classList.remove(\"collapsing\"), t._element.classList.add(\"collapse\"), V.trigger(t._element, \"hidden.bs.collapse\");\n        }), g(this._element, s);\n      }\n    }, n.setTransitioning = function (t) {\n      this._isTransitioning = t;\n    }, n.dispose = function () {\n      k(this._element, \"bs.collapse\"), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;\n    }, n._getConfig = function (t) {\n      return (t = o(o({}, ft), t)).toggle = Boolean(t.toggle), v(ut, t, ht), t;\n    }, n._getDimension = function () {\n      return this._element.classList.contains(\"width\") ? \"width\" : \"height\";\n    }, n._getParent = function () {\n      var t = this,\n          e = this._config.parent;\n      m(e) ? void 0 === e.jquery && void 0 === e[0] || (e = e[0]) : e = et.findOne(e);\n      var n = '[data-toggle=\"collapse\"][data-parent=\"' + e + '\"]';\n      return et.find(n, e).forEach(function (e) {\n        var n = h(e);\n\n        t._addAriaAndCollapsedClass(n, [e]);\n      }), e;\n    }, n._addAriaAndCollapsedClass = function (t, e) {\n      if (t) {\n        var n = t.classList.contains(\"show\");\n        e.length && e.forEach(function (t) {\n          n ? t.classList.remove(\"collapsed\") : t.classList.add(\"collapsed\"), t.setAttribute(\"aria-expanded\", n);\n        });\n      }\n    }, t.collapseInterface = function (e, n) {\n      var i = L(e, \"bs.collapse\"),\n          r = o(o(o({}, ft), tt.getDataAttributes(e)), \"object\" == _typeof(n) && n ? n : {});\n\n      if (!i && r.toggle && \"string\" == typeof n && /show|hide/.test(n) && (r.toggle = !1), i || (i = new t(e, r)), \"string\" == typeof n) {\n        if (void 0 === i[n]) throw new TypeError('No method named \"' + n + '\"');\n        i[n]();\n      }\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        t.collapseInterface(this, e);\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.collapse\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ft;\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.collapse.data-api\", '[data-toggle=\"collapse\"]', function (t) {\n    \"A\" === t.target.tagName && t.preventDefault();\n    var e = tt.getDataAttributes(this),\n        n = f(this);\n    et.find(n).forEach(function (t) {\n      var n,\n          i = L(t, \"bs.collapse\");\n      i ? (null === i._parent && \"string\" == typeof e.parent && (i._config.parent = e.parent, i._parent = i._getParent()), n = \"toggle\") : n = e, dt.collapseInterface(t, n);\n    });\n  });\n  var pt = w();\n\n  if (pt) {\n    var mt = pt.fn[ut];\n    pt.fn[ut] = dt.jQueryInterface, pt.fn[ut].Constructor = dt, pt.fn[ut].noConflict = function () {\n      return pt.fn[ut] = mt, dt.jQueryInterface;\n    };\n  }\n\n  var gt = \"undefined\" != typeof window && \"undefined\" != typeof document && \"undefined\" != typeof navigator,\n      vt = function () {\n    for (var t = [\"Edge\", \"Trident\", \"Firefox\"], e = 0; e < t.length; e += 1) {\n      if (gt && navigator.userAgent.indexOf(t[e]) >= 0) return 1;\n    }\n\n    return 0;\n  }();\n\n  var _t = gt && window.Promise ? function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, window.Promise.resolve().then(function () {\n        e = !1, t();\n      }));\n    };\n  } : function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, setTimeout(function () {\n        e = !1, t();\n      }, vt));\n    };\n  };\n\n  function bt(t) {\n    return t && \"[object Function]\" === {}.toString.call(t);\n  }\n\n  function yt(t, e) {\n    if (1 !== t.nodeType) return [];\n    var n = t.ownerDocument.defaultView.getComputedStyle(t, null);\n    return e ? n[e] : n;\n  }\n\n  function wt(t) {\n    return \"HTML\" === t.nodeName ? t : t.parentNode || t.host;\n  }\n\n  function Et(t) {\n    if (!t) return document.body;\n\n    switch (t.nodeName) {\n      case \"HTML\":\n      case \"BODY\":\n        return t.ownerDocument.body;\n\n      case \"#document\":\n        return t.body;\n    }\n\n    var e = yt(t),\n        n = e.overflow,\n        i = e.overflowX,\n        o = e.overflowY;\n    return /(auto|scroll|overlay)/.test(n + o + i) ? t : Et(wt(t));\n  }\n\n  function Tt(t) {\n    return t && t.referenceNode ? t.referenceNode : t;\n  }\n\n  var Lt = gt && !(!window.MSInputMethodContext || !document.documentMode),\n      kt = gt && /MSIE 10/.test(navigator.userAgent);\n\n  function Ot(t) {\n    return 11 === t ? Lt : 10 === t ? kt : Lt || kt;\n  }\n\n  function Ct(t) {\n    if (!t) return document.documentElement;\n\n    for (var e = Ot(10) ? document.body : null, n = t.offsetParent || null; n === e && t.nextElementSibling;) {\n      n = (t = t.nextElementSibling).offsetParent;\n    }\n\n    var i = n && n.nodeName;\n    return i && \"BODY\" !== i && \"HTML\" !== i ? -1 !== [\"TH\", \"TD\", \"TABLE\"].indexOf(n.nodeName) && \"static\" === yt(n, \"position\") ? Ct(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function At(t) {\n    return null !== t.parentNode ? At(t.parentNode) : t;\n  }\n\n  function Dt(t, e) {\n    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;\n    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = n ? t : e,\n        o = n ? e : t,\n        r = document.createRange();\n    r.setStart(i, 0), r.setEnd(o, 0);\n    var s = r.commonAncestorContainer;\n    if (t !== s && e !== s || i.contains(o)) return function (t) {\n      var e = t.nodeName;\n      return \"BODY\" !== e && (\"HTML\" === e || Ct(t.firstElementChild) === t);\n    }(s) ? s : Ct(s);\n    var a = At(t);\n    return a.host ? Dt(a.host, e) : Dt(t, At(e).host);\n  }\n\n  function St(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"top\",\n        n = \"top\" === e ? \"scrollTop\" : \"scrollLeft\",\n        i = t.nodeName;\n\n    if (\"BODY\" === i || \"HTML\" === i) {\n      var o = t.ownerDocument.documentElement,\n          r = t.ownerDocument.scrollingElement || o;\n      return r[n];\n    }\n\n    return t[n];\n  }\n\n  function xt(t, e) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n        i = St(e, \"top\"),\n        o = St(e, \"left\"),\n        r = n ? -1 : 1;\n    return t.top += i * r, t.bottom += i * r, t.left += o * r, t.right += o * r, t;\n  }\n\n  function Nt(t, e) {\n    var n = \"x\" === e ? \"Left\" : \"Top\",\n        i = \"Left\" === n ? \"Right\" : \"Bottom\";\n    return parseFloat(t[\"border\" + n + \"Width\"], 10) + parseFloat(t[\"border\" + i + \"Width\"], 10);\n  }\n\n  function It(t, e, n, i) {\n    return Math.max(e[\"offset\" + t], e[\"scroll\" + t], n[\"client\" + t], n[\"offset\" + t], n[\"scroll\" + t], Ot(10) ? parseInt(n[\"offset\" + t]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Top\" : \"Left\")]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Bottom\" : \"Right\")]) : 0);\n  }\n\n  function jt(t) {\n    var e = t.body,\n        n = t.documentElement,\n        i = Ot(10) && getComputedStyle(n);\n    return {\n      height: It(\"Height\", e, n, i),\n      width: It(\"Width\", e, n, i)\n    };\n  }\n\n  var Pt = function Pt(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      Mt = function () {\n    function t(t, e) {\n      for (var n = 0; n < e.length; n++) {\n        var i = e[n];\n        i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n      }\n    }\n\n    return function (e, n, i) {\n      return n && t(e.prototype, n), i && t(e, i), e;\n    };\n  }(),\n      Ht = function Ht(t, e, n) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = n, t;\n  },\n      Bt = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var i in n) {\n        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n      }\n    }\n\n    return t;\n  };\n\n  function Rt(t) {\n    return Bt({}, t, {\n      right: t.left + t.width,\n      bottom: t.top + t.height\n    });\n  }\n\n  function Ft(t) {\n    var e = {};\n\n    try {\n      if (Ot(10)) {\n        e = t.getBoundingClientRect();\n        var n = St(t, \"top\"),\n            i = St(t, \"left\");\n        e.top += n, e.left += i, e.bottom += n, e.right += i;\n      } else e = t.getBoundingClientRect();\n    } catch (t) {}\n\n    var o = {\n      left: e.left,\n      top: e.top,\n      width: e.right - e.left,\n      height: e.bottom - e.top\n    },\n        r = \"HTML\" === t.nodeName ? jt(t.ownerDocument) : {},\n        s = r.width || t.clientWidth || o.width,\n        a = r.height || t.clientHeight || o.height,\n        l = t.offsetWidth - s,\n        c = t.offsetHeight - a;\n\n    if (l || c) {\n      var u = yt(t);\n      l -= Nt(u, \"x\"), c -= Nt(u, \"y\"), o.width -= l, o.height -= c;\n    }\n\n    return Rt(o);\n  }\n\n  function Wt(t, e) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n        i = Ot(10),\n        o = \"HTML\" === e.nodeName,\n        r = Ft(t),\n        s = Ft(e),\n        a = Et(t),\n        l = yt(e),\n        c = parseFloat(l.borderTopWidth, 10),\n        u = parseFloat(l.borderLeftWidth, 10);\n    n && o && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));\n    var f = Rt({\n      top: r.top - s.top - c,\n      left: r.left - s.left - u,\n      width: r.width,\n      height: r.height\n    });\n\n    if (f.marginTop = 0, f.marginLeft = 0, !i && o) {\n      var h = parseFloat(l.marginTop, 10),\n          d = parseFloat(l.marginLeft, 10);\n      f.top -= c - h, f.bottom -= c - h, f.left -= u - d, f.right -= u - d, f.marginTop = h, f.marginLeft = d;\n    }\n\n    return (i && !n ? e.contains(a) : e === a && \"BODY\" !== a.nodeName) && (f = xt(f, e)), f;\n  }\n\n  function Ut(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        n = t.ownerDocument.documentElement,\n        i = Wt(t, n),\n        o = Math.max(n.clientWidth, window.innerWidth || 0),\n        r = Math.max(n.clientHeight, window.innerHeight || 0),\n        s = e ? 0 : St(n),\n        a = e ? 0 : St(n, \"left\"),\n        l = {\n      top: s - i.top + i.marginTop,\n      left: a - i.left + i.marginLeft,\n      width: o,\n      height: r\n    };\n    return Rt(l);\n  }\n\n  function Qt(t) {\n    var e = t.nodeName;\n    if (\"BODY\" === e || \"HTML\" === e) return !1;\n    if (\"fixed\" === yt(t, \"position\")) return !0;\n    var n = wt(t);\n    return !!n && Qt(n);\n  }\n\n  function Vt(t) {\n    if (!t || !t.parentElement || Ot()) return document.documentElement;\n\n    for (var e = t.parentElement; e && \"none\" === yt(e, \"transform\");) {\n      e = e.parentElement;\n    }\n\n    return e || document.documentElement;\n  }\n\n  function qt(t, e, n, i) {\n    var o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],\n        r = {\n      top: 0,\n      left: 0\n    },\n        s = o ? Vt(t) : Dt(t, Tt(e));\n    if (\"viewport\" === i) r = Ut(s, o);else {\n      var a = void 0;\n      \"scrollParent\" === i ? \"BODY\" === (a = Et(wt(e))).nodeName && (a = t.ownerDocument.documentElement) : a = \"window\" === i ? t.ownerDocument.documentElement : i;\n      var l = Wt(a, s, o);\n      if (\"HTML\" !== a.nodeName || Qt(s)) r = l;else {\n        var c = jt(t.ownerDocument),\n            u = c.height,\n            f = c.width;\n        r.top += l.top - l.marginTop, r.bottom = u + l.top, r.left += l.left - l.marginLeft, r.right = f + l.left;\n      }\n    }\n    var h = \"number\" == typeof (n = n || 0);\n    return r.left += h ? n : n.left || 0, r.top += h ? n : n.top || 0, r.right -= h ? n : n.right || 0, r.bottom -= h ? n : n.bottom || 0, r;\n  }\n\n  function Yt(t) {\n    return t.width * t.height;\n  }\n\n  function zt(t, e, n, i, o) {\n    var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === t.indexOf(\"auto\")) return t;\n    var s = qt(n, i, r, o),\n        a = {\n      top: {\n        width: s.width,\n        height: e.top - s.top\n      },\n      right: {\n        width: s.right - e.right,\n        height: s.height\n      },\n      bottom: {\n        width: s.width,\n        height: s.bottom - e.bottom\n      },\n      left: {\n        width: e.left - s.left,\n        height: s.height\n      }\n    },\n        l = Object.keys(a).map(function (t) {\n      return Bt({\n        key: t\n      }, a[t], {\n        area: Yt(a[t])\n      });\n    }).sort(function (t, e) {\n      return e.area - t.area;\n    }),\n        c = l.filter(function (t) {\n      var e = t.width,\n          i = t.height;\n      return e >= n.clientWidth && i >= n.clientHeight;\n    }),\n        u = c.length > 0 ? c[0].key : l[0].key,\n        f = t.split(\"-\")[1];\n    return u + (f ? \"-\" + f : \"\");\n  }\n\n  function Kt(t, e, n) {\n    var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n        o = i ? Vt(e) : Dt(e, Tt(n));\n    return Wt(n, o, i);\n  }\n\n  function Xt(t) {\n    var e = t.ownerDocument.defaultView.getComputedStyle(t),\n        n = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),\n        i = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);\n    return {\n      width: t.offsetWidth + i,\n      height: t.offsetHeight + n\n    };\n  }\n\n  function Gt(t) {\n    var e = {\n      left: \"right\",\n      right: \"left\",\n      bottom: \"top\",\n      top: \"bottom\"\n    };\n    return t.replace(/left|right|bottom|top/g, function (t) {\n      return e[t];\n    });\n  }\n\n  function $t(t, e, n) {\n    n = n.split(\"-\")[0];\n    var i = Xt(t),\n        o = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== [\"right\", \"left\"].indexOf(n),\n        s = r ? \"top\" : \"left\",\n        a = r ? \"left\" : \"top\",\n        l = r ? \"height\" : \"width\",\n        c = r ? \"width\" : \"height\";\n    return o[s] = e[s] + e[l] / 2 - i[l] / 2, o[a] = n === a ? e[a] - i[c] : e[Gt(a)], o;\n  }\n\n  function Zt(t, e) {\n    return Array.prototype.find ? t.find(e) : t.filter(e)[0];\n  }\n\n  function Jt(t, e, n) {\n    return (void 0 === n ? t : t.slice(0, function (t, e, n) {\n      if (Array.prototype.findIndex) return t.findIndex(function (t) {\n        return t[e] === n;\n      });\n      var i = Zt(t, function (t) {\n        return t[e] === n;\n      });\n      return t.indexOf(i);\n    }(t, \"name\", n))).forEach(function (t) {\n      t[\"function\"] && console.warn(\"`modifier.function` is deprecated, use `modifier.fn`!\");\n      var n = t[\"function\"] || t.fn;\n      t.enabled && bt(n) && (e.offsets.popper = Rt(e.offsets.popper), e.offsets.reference = Rt(e.offsets.reference), e = n(e, t));\n    }), e;\n  }\n\n  function te() {\n    if (!this.state.isDestroyed) {\n      var t = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      t.offsets.reference = Kt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = zt(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = $t(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? \"fixed\" : \"absolute\", t = Jt(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));\n    }\n  }\n\n  function ee(t, e) {\n    return t.some(function (t) {\n      var n = t.name;\n      return t.enabled && n === e;\n    });\n  }\n\n  function ne(t) {\n    for (var e = [!1, \"ms\", \"Webkit\", \"Moz\", \"O\"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {\n      var o = e[i],\n          r = o ? \"\" + o + n : t;\n      if (void 0 !== document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function ie() {\n    return this.state.isDestroyed = !0, ee(this.modifiers, \"applyStyle\") && (this.popper.removeAttribute(\"x-placement\"), this.popper.style.position = \"\", this.popper.style.top = \"\", this.popper.style.left = \"\", this.popper.style.right = \"\", this.popper.style.bottom = \"\", this.popper.style.willChange = \"\", this.popper.style[ne(\"transform\")] = \"\"), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function oe(t) {\n    var e = t.ownerDocument;\n    return e ? e.defaultView : window;\n  }\n\n  function re(t, e, n, i) {\n    n.updateBound = i, oe(t).addEventListener(\"resize\", n.updateBound, {\n      passive: !0\n    });\n    var o = Et(t);\n    return function t(e, n, i, o) {\n      var r = \"BODY\" === e.nodeName,\n          s = r ? e.ownerDocument.defaultView : e;\n      s.addEventListener(n, i, {\n        passive: !0\n      }), r || t(Et(s.parentNode), n, i, o), o.push(s);\n    }(o, \"scroll\", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;\n  }\n\n  function se() {\n    this.state.eventsEnabled || (this.state = re(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function ae() {\n    var t, e;\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, oe(t).removeEventListener(\"resize\", e.updateBound), e.scrollParents.forEach(function (t) {\n      t.removeEventListener(\"scroll\", e.updateBound);\n    }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));\n  }\n\n  function le(t) {\n    return \"\" !== t && !isNaN(parseFloat(t)) && isFinite(t);\n  }\n\n  function ce(t, e) {\n    Object.keys(e).forEach(function (n) {\n      var i = \"\";\n      -1 !== [\"width\", \"height\", \"top\", \"right\", \"bottom\", \"left\"].indexOf(n) && le(e[n]) && (i = \"px\"), t.style[n] = e[n] + i;\n    });\n  }\n\n  var ue = gt && /Firefox/i.test(navigator.userAgent);\n\n  function fe(t, e, n) {\n    var i = Zt(t, function (t) {\n      return t.name === e;\n    }),\n        o = !!i && t.some(function (t) {\n      return t.name === n && t.enabled && t.order < i.order;\n    });\n\n    if (!o) {\n      var r = \"`\" + e + \"`\",\n          s = \"`\" + n + \"`\";\n      console.warn(s + \" modifier is required by \" + r + \" modifier in order to work, be sure to include it before \" + r + \"!\");\n    }\n\n    return o;\n  }\n\n  var he = [\"auto-start\", \"auto\", \"auto-end\", \"top-start\", \"top\", \"top-end\", \"right-start\", \"right\", \"right-end\", \"bottom-end\", \"bottom\", \"bottom-start\", \"left-end\", \"left\", \"left-start\"],\n      de = he.slice(3);\n\n  function pe(t) {\n    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        n = de.indexOf(t),\n        i = de.slice(n + 1).concat(de.slice(0, n));\n    return e ? i.reverse() : i;\n  }\n\n  var me = \"flip\",\n      ge = \"clockwise\",\n      ve = \"counterclockwise\";\n\n  function _e(t, e, n, i) {\n    var o = [0, 0],\n        r = -1 !== [\"right\", \"left\"].indexOf(i),\n        s = t.split(/(\\+|\\-)/).map(function (t) {\n      return t.trim();\n    }),\n        a = s.indexOf(Zt(s, function (t) {\n      return -1 !== t.search(/,|\\s/);\n    }));\n    s[a] && -1 === s[a].indexOf(\",\") && console.warn(\"Offsets separated by white space(s) are deprecated, use a comma (,) instead.\");\n    var l = /\\s*,\\s*|\\s+/,\n        c = -1 !== a ? [s.slice(0, a).concat([s[a].split(l)[0]]), [s[a].split(l)[1]].concat(s.slice(a + 1))] : [s];\n    return (c = c.map(function (t, i) {\n      var o = (1 === i ? !r : r) ? \"height\" : \"width\",\n          s = !1;\n      return t.reduce(function (t, e) {\n        return \"\" === t[t.length - 1] && -1 !== [\"+\", \"-\"].indexOf(e) ? (t[t.length - 1] = e, s = !0, t) : s ? (t[t.length - 1] += e, s = !1, t) : t.concat(e);\n      }, []).map(function (t) {\n        return function (t, e, n, i) {\n          var o = t.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n              r = +o[1],\n              s = o[2];\n          if (!r) return t;\n\n          if (0 === s.indexOf(\"%\")) {\n            var a = void 0;\n\n            switch (s) {\n              case \"%p\":\n                a = n;\n                break;\n\n              case \"%\":\n              case \"%r\":\n              default:\n                a = i;\n            }\n\n            return Rt(a)[e] / 100 * r;\n          }\n\n          if (\"vh\" === s || \"vw\" === s) {\n            return (\"vh\" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * r;\n          }\n\n          return r;\n        }(t, o, e, n);\n      });\n    })).forEach(function (t, e) {\n      t.forEach(function (n, i) {\n        le(n) && (o[e] += n * (\"-\" === t[i - 1] ? -1 : 1));\n      });\n    }), o;\n  }\n\n  var be = {\n    placement: \"bottom\",\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = e.split(\"-\")[1];\n\n          if (i) {\n            var o = t.offsets,\n                r = o.reference,\n                s = o.popper,\n                a = -1 !== [\"bottom\", \"top\"].indexOf(n),\n                l = a ? \"left\" : \"top\",\n                c = a ? \"width\" : \"height\",\n                u = {\n              start: Ht({}, l, r[l]),\n              end: Ht({}, l, r[l] + r[c] - s[c])\n            };\n            t.offsets.popper = Bt({}, s, u[i]);\n          }\n\n          return t;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.offset,\n              i = t.placement,\n              o = t.offsets,\n              r = o.popper,\n              s = o.reference,\n              a = i.split(\"-\")[0],\n              l = void 0;\n          return l = le(+n) ? [+n, 0] : _e(n, r, s, a), \"left\" === a ? (r.top += l[0], r.left -= l[1]) : \"right\" === a ? (r.top += l[0], r.left += l[1]) : \"top\" === a ? (r.left += l[0], r.top -= l[1]) : \"bottom\" === a && (r.left += l[0], r.top += l[1]), t.popper = r, t;\n        },\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.boundariesElement || Ct(t.instance.popper);\n          t.instance.reference === n && (n = Ct(n));\n          var i = ne(\"transform\"),\n              o = t.instance.popper.style,\n              r = o.top,\n              s = o.left,\n              a = o[i];\n          o.top = \"\", o.left = \"\", o[i] = \"\";\n          var l = qt(t.instance.popper, t.instance.reference, e.padding, n, t.positionFixed);\n          o.top = r, o.left = s, o[i] = a, e.boundaries = l;\n          var c = e.priority,\n              u = t.offsets.popper,\n              f = {\n            primary: function primary(t) {\n              var n = u[t];\n              return u[t] < l[t] && !e.escapeWithReference && (n = Math.max(u[t], l[t])), Ht({}, t, n);\n            },\n            secondary: function secondary(t) {\n              var n = \"right\" === t ? \"left\" : \"top\",\n                  i = u[n];\n              return u[t] > l[t] && !e.escapeWithReference && (i = Math.min(u[n], l[t] - (\"right\" === t ? u.width : u.height))), Ht({}, n, i);\n            }\n          };\n          return c.forEach(function (t) {\n            var e = -1 !== [\"left\", \"top\"].indexOf(t) ? \"primary\" : \"secondary\";\n            u = Bt({}, u, f[e](t));\n          }), t.offsets.popper = u, t;\n        },\n        priority: [\"left\", \"right\", \"top\", \"bottom\"],\n        padding: 5,\n        boundariesElement: \"scrollParent\"\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.offsets,\n              n = e.popper,\n              i = e.reference,\n              o = t.placement.split(\"-\")[0],\n              r = Math.floor,\n              s = -1 !== [\"top\", \"bottom\"].indexOf(o),\n              a = s ? \"right\" : \"bottom\",\n              l = s ? \"left\" : \"top\",\n              c = s ? \"width\" : \"height\";\n          return n[a] < r(i[l]) && (t.offsets.popper[l] = r(i[l]) - n[c]), n[l] > r(i[a]) && (t.offsets.popper[l] = r(i[a])), t;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n;\n          if (!fe(t.instance.modifiers, \"arrow\", \"keepTogether\")) return t;\n          var i = e.element;\n\n          if (\"string\" == typeof i) {\n            if (!(i = t.instance.popper.querySelector(i))) return t;\n          } else if (!t.instance.popper.contains(i)) return console.warn(\"WARNING: `arrow.element` must be child of its popper element!\"), t;\n\n          var o = t.placement.split(\"-\")[0],\n              r = t.offsets,\n              s = r.popper,\n              a = r.reference,\n              l = -1 !== [\"left\", \"right\"].indexOf(o),\n              c = l ? \"height\" : \"width\",\n              u = l ? \"Top\" : \"Left\",\n              f = u.toLowerCase(),\n              h = l ? \"left\" : \"top\",\n              d = l ? \"bottom\" : \"right\",\n              p = Xt(i)[c];\n          a[d] - p < s[f] && (t.offsets.popper[f] -= s[f] - (a[d] - p)), a[f] + p > s[d] && (t.offsets.popper[f] += a[f] + p - s[d]), t.offsets.popper = Rt(t.offsets.popper);\n\n          var m = a[f] + a[c] / 2 - p / 2,\n              g = yt(t.instance.popper),\n              v = parseFloat(g[\"margin\" + u], 10),\n              _ = parseFloat(g[\"border\" + u + \"Width\"], 10),\n              b = m - t.offsets.popper[f] - v - _;\n\n          return b = Math.max(Math.min(s[c] - p, b), 0), t.arrowElement = i, t.offsets.arrow = (Ht(n = {}, f, Math.round(b)), Ht(n, h, \"\"), n), t;\n        },\n        element: \"[x-arrow]\"\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(t, e) {\n          if (ee(t.instance.modifiers, \"inner\")) return t;\n          if (t.flipped && t.placement === t.originalPlacement) return t;\n          var n = qt(t.instance.popper, t.instance.reference, e.padding, e.boundariesElement, t.positionFixed),\n              i = t.placement.split(\"-\")[0],\n              o = Gt(i),\n              r = t.placement.split(\"-\")[1] || \"\",\n              s = [];\n\n          switch (e.behavior) {\n            case me:\n              s = [i, o];\n              break;\n\n            case ge:\n              s = pe(i);\n              break;\n\n            case ve:\n              s = pe(i, !0);\n              break;\n\n            default:\n              s = e.behavior;\n          }\n\n          return s.forEach(function (a, l) {\n            if (i !== a || s.length === l + 1) return t;\n            i = t.placement.split(\"-\")[0], o = Gt(i);\n\n            var c = t.offsets.popper,\n                u = t.offsets.reference,\n                f = Math.floor,\n                h = \"left\" === i && f(c.right) > f(u.left) || \"right\" === i && f(c.left) < f(u.right) || \"top\" === i && f(c.bottom) > f(u.top) || \"bottom\" === i && f(c.top) < f(u.bottom),\n                d = f(c.left) < f(n.left),\n                p = f(c.right) > f(n.right),\n                m = f(c.top) < f(n.top),\n                g = f(c.bottom) > f(n.bottom),\n                v = \"left\" === i && d || \"right\" === i && p || \"top\" === i && m || \"bottom\" === i && g,\n                _ = -1 !== [\"top\", \"bottom\"].indexOf(i),\n                b = !!e.flipVariations && (_ && \"start\" === r && d || _ && \"end\" === r && p || !_ && \"start\" === r && m || !_ && \"end\" === r && g),\n                y = !!e.flipVariationsByContent && (_ && \"start\" === r && p || _ && \"end\" === r && d || !_ && \"start\" === r && g || !_ && \"end\" === r && m),\n                w = b || y;\n\n            (h || v || w) && (t.flipped = !0, (h || v) && (i = s[l + 1]), w && (r = function (t) {\n              return \"end\" === t ? \"start\" : \"start\" === t ? \"end\" : t;\n            }(r)), t.placement = i + (r ? \"-\" + r : \"\"), t.offsets.popper = Bt({}, t.offsets.popper, $t(t.instance.popper, t.offsets.reference, t.placement)), t = Jt(t.instance.modifiers, t, \"flip\"));\n          }), t;\n        },\n        behavior: \"flip\",\n        padding: 5,\n        boundariesElement: \"viewport\",\n        flipVariations: !1,\n        flipVariationsByContent: !1\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = t.offsets,\n              o = i.popper,\n              r = i.reference,\n              s = -1 !== [\"left\", \"right\"].indexOf(n),\n              a = -1 === [\"top\", \"left\"].indexOf(n);\n          return o[s ? \"left\" : \"top\"] = r[n] - (a ? o[s ? \"width\" : \"height\"] : 0), t.placement = Gt(e), t.offsets.popper = Rt(o), t;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(t) {\n          if (!fe(t.instance.modifiers, \"hide\", \"preventOverflow\")) return t;\n          var e = t.offsets.reference,\n              n = Zt(t.instance.modifiers, function (t) {\n            return \"preventOverflow\" === t.name;\n          }).boundaries;\n\n          if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {\n            if (!0 === t.hide) return t;\n            t.hide = !0, t.attributes[\"x-out-of-boundaries\"] = \"\";\n          } else {\n            if (!1 === t.hide) return t;\n            t.hide = !1, t.attributes[\"x-out-of-boundaries\"] = !1;\n          }\n\n          return t;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.x,\n              i = e.y,\n              o = t.offsets.popper,\n              r = Zt(t.instance.modifiers, function (t) {\n            return \"applyStyle\" === t.name;\n          }).gpuAcceleration;\n          void 0 !== r && console.warn(\"WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\");\n\n          var s = void 0 !== r ? r : e.gpuAcceleration,\n              a = Ct(t.instance.popper),\n              l = Ft(a),\n              c = {\n            position: o.position\n          },\n              u = function (t, e) {\n            var n = t.offsets,\n                i = n.popper,\n                o = n.reference,\n                r = Math.round,\n                s = Math.floor,\n                a = function a(t) {\n              return t;\n            },\n                l = r(o.width),\n                c = r(i.width),\n                u = -1 !== [\"left\", \"right\"].indexOf(t.placement),\n                f = -1 !== t.placement.indexOf(\"-\"),\n                h = e ? u || f || l % 2 == c % 2 ? r : s : a,\n                d = e ? r : a;\n\n            return {\n              left: h(l % 2 == 1 && c % 2 == 1 && !f && e ? i.left - 1 : i.left),\n              top: d(i.top),\n              bottom: d(i.bottom),\n              right: h(i.right)\n            };\n          }(t, window.devicePixelRatio < 2 || !ue),\n              f = \"bottom\" === n ? \"top\" : \"bottom\",\n              h = \"right\" === i ? \"left\" : \"right\",\n              d = ne(\"transform\"),\n              p = void 0,\n              m = void 0;\n\n          if (m = \"bottom\" === f ? \"HTML\" === a.nodeName ? -a.clientHeight + u.bottom : -l.height + u.bottom : u.top, p = \"right\" === h ? \"HTML\" === a.nodeName ? -a.clientWidth + u.right : -l.width + u.right : u.left, s && d) c[d] = \"translate3d(\" + p + \"px, \" + m + \"px, 0)\", c[f] = 0, c[h] = 0, c.willChange = \"transform\";else {\n            var g = \"bottom\" === f ? -1 : 1,\n                v = \"right\" === h ? -1 : 1;\n            c[f] = m * g, c[h] = p * v, c.willChange = f + \", \" + h;\n          }\n          var _ = {\n            \"x-placement\": t.placement\n          };\n          return t.attributes = Bt({}, _, t.attributes), t.styles = Bt({}, c, t.styles), t.arrowStyles = Bt({}, t.offsets.arrow, t.arrowStyles), t;\n        },\n        gpuAcceleration: !0,\n        x: \"bottom\",\n        y: \"right\"\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(t) {\n          return ce(t.instance.popper, t.styles), function (t, e) {\n            Object.keys(e).forEach(function (n) {\n              !1 !== e[n] ? t.setAttribute(n, e[n]) : t.removeAttribute(n);\n            });\n          }(t.instance.popper, t.attributes), t.arrowElement && Object.keys(t.arrowStyles).length && ce(t.arrowElement, t.arrowStyles), t;\n        },\n        onLoad: function onLoad(t, e, n, i, o) {\n          var r = Kt(o, e, t, n.positionFixed),\n              s = zt(n.placement, r, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);\n          return e.setAttribute(\"x-placement\", s), ce(e, {\n            position: n.positionFixed ? \"fixed\" : \"absolute\"\n          }), n;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  },\n      ye = function () {\n    function t(e, n) {\n      var i = this,\n          o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n      Pt(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(i.update);\n      }, this.update = _t(this.update.bind(this)), this.options = Bt({}, t.Defaults, o), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = e && e.jquery ? e[0] : e, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(Bt({}, t.Defaults.modifiers, o.modifiers)).forEach(function (e) {\n        i.options.modifiers[e] = Bt({}, t.Defaults.modifiers[e] || {}, o.modifiers ? o.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {\n        return Bt({\n          name: t\n        }, i.options.modifiers[t]);\n      }).sort(function (t, e) {\n        return t.order - e.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && bt(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n      }), this.update();\n      var r = this.options.eventsEnabled;\n      r && this.enableEventListeners(), this.state.eventsEnabled = r;\n    }\n\n    return Mt(t, [{\n      key: \"update\",\n      value: function value() {\n        return te.call(this);\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        return ie.call(this);\n      }\n    }, {\n      key: \"enableEventListeners\",\n      value: function value() {\n        return se.call(this);\n      }\n    }, {\n      key: \"disableEventListeners\",\n      value: function value() {\n        return ae.call(this);\n      }\n    }]), t;\n  }();\n\n  ye.Utils = (\"undefined\" != typeof window ? window : __webpack_require__.g).PopperUtils, ye.placements = he, ye.Defaults = be;\n\n  var we = \"dropdown\",\n      Ee = new RegExp(\"ArrowUp|ArrowDown|Escape\"),\n      Te = {\n    offset: 0,\n    flip: !0,\n    boundary: \"scrollParent\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null\n  },\n      Le = {\n    offset: \"(number|string|function)\",\n    flip: \"boolean\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element)\",\n    display: \"string\",\n    popperConfig: \"(null|object)\"\n  },\n      ke = function () {\n    function t(t, e) {\n      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners(), T(t, \"bs.dropdown\", this);\n    }\n\n    var n = t.prototype;\n    return n.toggle = function () {\n      if (!this._element.disabled && !this._element.classList.contains(\"disabled\")) {\n        var e = this._element.classList.contains(\"show\");\n\n        t.clearMenus(), e || this.show();\n      }\n    }, n.show = function () {\n      if (!(this._element.disabled || this._element.classList.contains(\"disabled\") || this._menu.classList.contains(\"show\"))) {\n        var e = t.getParentFromElement(this._element),\n            n = {\n          relatedTarget: this._element\n        };\n\n        if (!V.trigger(this._element, \"show.bs.dropdown\", n).defaultPrevented) {\n          if (!this._inNavbar) {\n            if (void 0 === ye) throw new TypeError(\"Bootstrap's dropdowns require Popper.js (https://popper.js.org)\");\n            var i = this._element;\n            \"parent\" === this._config.reference ? i = e : m(this._config.reference) && (i = this._config.reference, void 0 !== this._config.reference.jquery && (i = this._config.reference[0])), \"scrollParent\" !== this._config.boundary && e.classList.add(\"position-static\"), this._popper = new ye(i, this._menu, this._getPopperConfig());\n          }\n\n          var o;\n          if (\"ontouchstart\" in document.documentElement && !e.closest(\".navbar-nav\")) (o = []).concat.apply(o, document.body.children).forEach(function (t) {\n            return V.on(t, \"mouseover\", null, function () {});\n          });\n          this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), tt.toggleClass(this._menu, \"show\"), tt.toggleClass(this._element, \"show\"), V.trigger(e, \"shown.bs.dropdown\", n);\n        }\n      }\n    }, n.hide = function () {\n      if (!this._element.disabled && !this._element.classList.contains(\"disabled\") && this._menu.classList.contains(\"show\")) {\n        var e = t.getParentFromElement(this._element),\n            n = {\n          relatedTarget: this._element\n        };\n        V.trigger(e, \"hide.bs.dropdown\", n).defaultPrevented || (this._popper && this._popper.destroy(), tt.toggleClass(this._menu, \"show\"), tt.toggleClass(this._element, \"show\"), V.trigger(e, \"hidden.bs.dropdown\", n));\n      }\n    }, n.dispose = function () {\n      k(this._element, \"bs.dropdown\"), V.off(this._element, \".bs.dropdown\"), this._element = null, this._menu = null, this._popper && (this._popper.destroy(), this._popper = null);\n    }, n.update = function () {\n      this._inNavbar = this._detectNavbar(), this._popper && this._popper.scheduleUpdate();\n    }, n._addEventListeners = function () {\n      var t = this;\n      V.on(this._element, \"click.bs.dropdown\", function (e) {\n        e.preventDefault(), e.stopPropagation(), t.toggle();\n      });\n    }, n._getConfig = function (t) {\n      return t = o(o(o({}, this.constructor.Default), tt.getDataAttributes(this._element)), t), v(we, t, this.constructor.DefaultType), t;\n    }, n._getMenuElement = function () {\n      return et.next(this._element, \".dropdown-menu\")[0];\n    }, n._getPlacement = function () {\n      var t = this._element.parentNode,\n          e = \"bottom-start\";\n      return t.classList.contains(\"dropup\") ? (e = \"top-start\", this._menu.classList.contains(\"dropdown-menu-right\") && (e = \"top-end\")) : t.classList.contains(\"dropright\") ? e = \"right-start\" : t.classList.contains(\"dropleft\") ? e = \"left-start\" : this._menu.classList.contains(\"dropdown-menu-right\") && (e = \"bottom-end\"), e;\n    }, n._detectNavbar = function () {\n      return Boolean(this._element.closest(\".navbar\"));\n    }, n._getOffset = function () {\n      var t = this,\n          e = {};\n      return \"function\" == typeof this._config.offset ? e.fn = function (e) {\n        return e.offsets = o(o({}, e.offsets), t._config.offset(e.offsets, t._element) || {}), e;\n      } : e.offset = this._config.offset, e;\n    }, n._getPopperConfig = function () {\n      var t = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      };\n      return \"static\" === this._config.display && (t.modifiers.applyStyle = {\n        enabled: !1\n      }), o(o({}, t), this._config.popperConfig);\n    }, t.dropdownInterface = function (e, n) {\n      var i = L(e, \"bs.dropdown\");\n\n      if (i || (i = new t(e, \"object\" == _typeof(n) ? n : null)), \"string\" == typeof n) {\n        if (void 0 === i[n]) throw new TypeError('No method named \"' + n + '\"');\n        i[n]();\n      }\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        t.dropdownInterface(this, e);\n      });\n    }, t.clearMenus = function (e) {\n      if (!e || 2 !== e.button && (\"keyup\" !== e.type || \"Tab\" === e.key)) for (var n = et.find('[data-toggle=\"dropdown\"]'), i = 0, o = n.length; i < o; i++) {\n        var r = t.getParentFromElement(n[i]),\n            s = L(n[i], \"bs.dropdown\"),\n            a = {\n          relatedTarget: n[i]\n        };\n\n        if (e && \"click\" === e.type && (a.clickEvent = e), s) {\n          var l = s._menu;\n          if (n[i].classList.contains(\"show\")) if (!(e && (\"click\" === e.type && /input|textarea/i.test(e.target.tagName) || \"keyup\" === e.type && \"Tab\" === e.key) && l.contains(e.target))) if (!V.trigger(r, \"hide.bs.dropdown\", a).defaultPrevented) {\n            var c;\n            if (\"ontouchstart\" in document.documentElement) (c = []).concat.apply(c, document.body.children).forEach(function (t) {\n              return V.off(t, \"mouseover\", null, function () {});\n            });\n            n[i].setAttribute(\"aria-expanded\", \"false\"), s._popper && s._popper.destroy(), l.classList.remove(\"show\"), n[i].classList.remove(\"show\"), V.trigger(r, \"hidden.bs.dropdown\", a);\n          }\n        }\n      }\n    }, t.getParentFromElement = function (t) {\n      return h(t) || t.parentNode;\n    }, t.dataApiKeydownHandler = function (e) {\n      if (!(/input|textarea/i.test(e.target.tagName) ? \"Space\" === e.key || \"Escape\" !== e.key && (\"ArrowDown\" !== e.key && \"ArrowUp\" !== e.key || e.target.closest(\".dropdown-menu\")) : !Ee.test(e.key)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !this.classList.contains(\"disabled\"))) {\n        var n = t.getParentFromElement(this),\n            i = this.classList.contains(\"show\");\n        if (\"Escape\" === e.key) return (this.matches('[data-toggle=\"dropdown\"]') ? this : et.prev(this, '[data-toggle=\"dropdown\"]')[0]).focus(), void t.clearMenus();\n\n        if (i && \"Space\" !== e.key) {\n          var o = et.find(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", n).filter(_);\n\n          if (o.length) {\n            var r = o.indexOf(e.target);\n            \"ArrowUp\" === e.key && r > 0 && r--, \"ArrowDown\" === e.key && r < o.length - 1 && r++, o[r = -1 === r ? 0 : r].focus();\n          }\n        } else t.clearMenus();\n      }\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.dropdown\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Te;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Le;\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"keydown.bs.dropdown.data-api\", '[data-toggle=\"dropdown\"]', ke.dataApiKeydownHandler), V.on(document, \"keydown.bs.dropdown.data-api\", \".dropdown-menu\", ke.dataApiKeydownHandler), V.on(document, \"click.bs.dropdown.data-api\", ke.clearMenus), V.on(document, \"keyup.bs.dropdown.data-api\", ke.clearMenus), V.on(document, \"click.bs.dropdown.data-api\", '[data-toggle=\"dropdown\"]', function (t) {\n    t.preventDefault(), t.stopPropagation(), ke.dropdownInterface(this, \"toggle\");\n  }), V.on(document, \"click.bs.dropdown.data-api\", \".dropdown form\", function (t) {\n    return t.stopPropagation();\n  });\n  var Oe = w();\n\n  if (Oe) {\n    var Ce = Oe.fn[we];\n    Oe.fn[we] = ke.jQueryInterface, Oe.fn[we].Constructor = ke, Oe.fn[we].noConflict = function () {\n      return Oe.fn[we] = Ce, ke.jQueryInterface;\n    };\n  }\n\n  var Ae = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0,\n    show: !0\n  },\n      De = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\",\n    show: \"boolean\"\n  },\n      Se = function () {\n    function t(t, e) {\n      this._config = this._getConfig(e), this._element = t, this._dialog = et.findOne(\".modal-dialog\", t), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0, T(t, \"bs.modal\", this);\n    }\n\n    var n = t.prototype;\n    return n.toggle = function (t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }, n.show = function (t) {\n      var e = this;\n\n      if (!this._isShown && !this._isTransitioning) {\n        this._element.classList.contains(\"fade\") && (this._isTransitioning = !0);\n        var n = V.trigger(this._element, \"show.bs.modal\", {\n          relatedTarget: t\n        });\n        this._isShown || n.defaultPrevented || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), V.on(this._element, \"click.dismiss.bs.modal\", '[data-dismiss=\"modal\"]', function (t) {\n          return e.hide(t);\n        }), V.on(this._dialog, \"mousedown.dismiss.bs.modal\", function () {\n          V.one(e._element, \"mouseup.dismiss.bs.modal\", function (t) {\n            t.target === e._element && (e._ignoreBackdropClick = !0);\n          });\n        }), this._showBackdrop(function () {\n          return e._showElement(t);\n        }));\n      }\n    }, n.hide = function (t) {\n      var e = this;\n\n      if ((t && t.preventDefault(), this._isShown && !this._isTransitioning) && !V.trigger(this._element, \"hide.bs.modal\").defaultPrevented) {\n        this._isShown = !1;\n\n        var n = this._element.classList.contains(\"fade\");\n\n        if (n && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), V.off(document, \"focusin.bs.modal\"), this._element.classList.remove(\"show\"), V.off(this._element, \"click.dismiss.bs.modal\"), V.off(this._dialog, \"mousedown.dismiss.bs.modal\"), n) {\n          var i = d(this._element);\n          V.one(this._element, \"transitionend\", function (t) {\n            return e._hideModal(t);\n          }), g(this._element, i);\n        } else this._hideModal();\n      }\n    }, n.dispose = function () {\n      [window, this._element, this._dialog].forEach(function (t) {\n        return V.off(t, \".bs.modal\");\n      }), V.off(document, \"focusin.bs.modal\"), k(this._element, \"bs.modal\"), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;\n    }, n.handleUpdate = function () {\n      this._adjustDialog();\n    }, n._getConfig = function (t) {\n      return t = o(o({}, Ae), t), v(\"modal\", t, De), t;\n    }, n._showElement = function (t) {\n      var e = this,\n          n = this._element.classList.contains(\"fade\"),\n          i = et.findOne(\".modal-body\", this._dialog);\n\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0, i && (i.scrollTop = 0), n && y(this._element), this._element.classList.add(\"show\"), this._config.focus && this._enforceFocus();\n\n      var o = function o() {\n        e._config.focus && e._element.focus(), e._isTransitioning = !1, V.trigger(e._element, \"shown.bs.modal\", {\n          relatedTarget: t\n        });\n      };\n\n      if (n) {\n        var r = d(this._dialog);\n        V.one(this._dialog, \"transitionend\", o), g(this._dialog, r);\n      } else o();\n    }, n._enforceFocus = function () {\n      var t = this;\n      V.off(document, \"focusin.bs.modal\"), V.on(document, \"focusin.bs.modal\", function (e) {\n        document === e.target || t._element === e.target || t._element.contains(e.target) || t._element.focus();\n      });\n    }, n._setEscapeEvent = function () {\n      var t = this;\n      this._isShown ? V.on(this._element, \"keydown.dismiss.bs.modal\", function (e) {\n        t._config.keyboard && \"Escape\" === e.key ? (e.preventDefault(), t.hide()) : t._config.keyboard || \"Escape\" !== e.key || t._triggerBackdropTransition();\n      }) : V.off(this._element, \"keydown.dismiss.bs.modal\");\n    }, n._setResizeEvent = function () {\n      var t = this;\n      this._isShown ? V.on(window, \"resize.bs.modal\", function () {\n        return t._adjustDialog();\n      }) : V.off(window, \"resize.bs.modal\");\n    }, n._hideModal = function () {\n      var t = this;\n      this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._showBackdrop(function () {\n        document.body.classList.remove(\"modal-open\"), t._resetAdjustments(), t._resetScrollbar(), V.trigger(t._element, \"hidden.bs.modal\");\n      });\n    }, n._removeBackdrop = function () {\n      this._backdrop.parentNode.removeChild(this._backdrop), this._backdrop = null;\n    }, n._showBackdrop = function (t) {\n      var e = this,\n          n = this._element.classList.contains(\"fade\") ? \"fade\" : \"\";\n\n      if (this._isShown && this._config.backdrop) {\n        if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = \"modal-backdrop\", n && this._backdrop.classList.add(n), document.body.appendChild(this._backdrop), V.on(this._element, \"click.dismiss.bs.modal\", function (t) {\n          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && e._triggerBackdropTransition();\n        }), n && y(this._backdrop), this._backdrop.classList.add(\"show\"), !n) return void t();\n        var i = d(this._backdrop);\n        V.one(this._backdrop, \"transitionend\", t), g(this._backdrop, i);\n      } else if (!this._isShown && this._backdrop) {\n        this._backdrop.classList.remove(\"show\");\n\n        var o = function o() {\n          e._removeBackdrop(), t();\n        };\n\n        if (this._element.classList.contains(\"fade\")) {\n          var r = d(this._backdrop);\n          V.one(this._backdrop, \"transitionend\", o), g(this._backdrop, r);\n        } else o();\n      } else t();\n    }, n._triggerBackdropTransition = function () {\n      var t = this;\n\n      if (\"static\" === this._config.backdrop) {\n        if (V.trigger(this._element, \"hidePrevented.bs.modal\").defaultPrevented) return;\n\n        this._element.classList.add(\"modal-static\");\n\n        var e = d(this._element);\n        V.one(this._element, \"transitionend\", function () {\n          t._element.classList.remove(\"modal-static\");\n        }), g(this._element, e), this._element.focus();\n      } else this.hide();\n    }, n._adjustDialog = function () {\n      var t = this._element.scrollHeight > document.documentElement.clientHeight;\n      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n    }, n._resetAdjustments = function () {\n      this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }, n._checkScrollbar = function () {\n      var t = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(t.left + t.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n    }, n._setScrollbar = function () {\n      var t = this;\n\n      if (this._isBodyOverflowing) {\n        et.find(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\").forEach(function (e) {\n          var n = e.style.paddingRight,\n              i = window.getComputedStyle(e)[\"padding-right\"];\n          tt.setDataAttribute(e, \"padding-right\", n), e.style.paddingRight = parseFloat(i) + t._scrollbarWidth + \"px\";\n        }), et.find(\".sticky-top\").forEach(function (e) {\n          var n = e.style.marginRight,\n              i = window.getComputedStyle(e)[\"margin-right\"];\n          tt.setDataAttribute(e, \"margin-right\", n), e.style.marginRight = parseFloat(i) - t._scrollbarWidth + \"px\";\n        });\n        var e = document.body.style.paddingRight,\n            n = window.getComputedStyle(document.body)[\"padding-right\"];\n        tt.setDataAttribute(document.body, \"padding-right\", e), document.body.style.paddingRight = parseFloat(n) + this._scrollbarWidth + \"px\";\n      }\n\n      document.body.classList.add(\"modal-open\");\n    }, n._resetScrollbar = function () {\n      et.find(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\").forEach(function (t) {\n        var e = tt.getDataAttribute(t, \"padding-right\");\n        void 0 !== e && (tt.removeDataAttribute(t, \"padding-right\"), t.style.paddingRight = e);\n      }), et.find(\".sticky-top\").forEach(function (t) {\n        var e = tt.getDataAttribute(t, \"margin-right\");\n        void 0 !== e && (tt.removeDataAttribute(t, \"margin-right\"), t.style.marginRight = e);\n      });\n      var t = tt.getDataAttribute(document.body, \"padding-right\");\n      void 0 === t ? document.body.style.paddingRight = \"\" : (tt.removeDataAttribute(document.body, \"padding-right\"), document.body.style.paddingRight = t);\n    }, n._getScrollbarWidth = function () {\n      var t = document.createElement(\"div\");\n      t.className = \"modal-scrollbar-measure\", document.body.appendChild(t);\n      var e = t.getBoundingClientRect().width - t.clientWidth;\n      return document.body.removeChild(t), e;\n    }, t.jQueryInterface = function (e, n) {\n      return this.each(function () {\n        var i = L(this, \"bs.modal\"),\n            r = o(o(o({}, Ae), tt.getDataAttributes(this)), \"object\" == _typeof(e) && e ? e : {});\n\n        if (i || (i = new t(this, r)), \"string\" == typeof e) {\n          if (void 0 === i[e]) throw new TypeError('No method named \"' + e + '\"');\n          i[e](n);\n        } else r.show && i.show(n);\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.modal\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Ae;\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.modal.data-api\", '[data-toggle=\"modal\"]', function (t) {\n    var e = this,\n        n = h(this);\n    \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault(), V.one(n, \"show.bs.modal\", function (t) {\n      t.defaultPrevented || V.one(n, \"hidden.bs.modal\", function () {\n        _(e) && e.focus();\n      });\n    });\n    var i = L(n, \"bs.modal\");\n\n    if (!i) {\n      var r = o(o({}, tt.getDataAttributes(n)), tt.getDataAttributes(this));\n      i = new Se(n, r);\n    }\n\n    i.show(this);\n  });\n  var xe = w();\n\n  if (xe) {\n    var Ne = xe.fn.modal;\n    xe.fn.modal = Se.jQueryInterface, xe.fn.modal.Constructor = Se, xe.fn.modal.noConflict = function () {\n      return xe.fn.modal = Ne, Se.jQueryInterface;\n    };\n  }\n\n  var Ie = [\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"],\n      je = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,\n      Pe = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i,\n      Me = {\n    \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i],\n    a: [\"target\", \"href\", \"title\", \"rel\"],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\"src\", \"srcset\", \"alt\", \"title\", \"width\", \"height\"],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n\n  function He(t, e, n) {\n    var i;\n    if (!t.length) return t;\n    if (n && \"function\" == typeof n) return n(t);\n\n    for (var o = new window.DOMParser().parseFromString(t, \"text/html\"), r = Object.keys(e), s = (i = []).concat.apply(i, o.body.querySelectorAll(\"*\")), a = function a(t, n) {\n      var i,\n          o = s[t],\n          a = o.nodeName.toLowerCase();\n      if (-1 === r.indexOf(a)) return o.parentNode.removeChild(o), \"continue\";\n      var l = (i = []).concat.apply(i, o.attributes),\n          c = [].concat(e[\"*\"] || [], e[a] || []);\n      l.forEach(function (t) {\n        (function (t, e) {\n          var n = t.nodeName.toLowerCase();\n          if (-1 !== e.indexOf(n)) return -1 === Ie.indexOf(n) || Boolean(t.nodeValue.match(je) || t.nodeValue.match(Pe));\n\n          for (var i = e.filter(function (t) {\n            return t instanceof RegExp;\n          }), o = 0, r = i.length; o < r; o++) {\n            if (n.match(i[o])) return !0;\n          }\n\n          return !1;\n        })(t, c) || o.removeAttribute(t.nodeName);\n      });\n    }, l = 0, c = s.length; l < c; l++) {\n      a(l);\n    }\n\n    return o.body.innerHTML;\n  }\n\n  var Be = \"tooltip\",\n      Re = new RegExp(\"(^|\\\\s)bs-tooltip\\\\S+\", \"g\"),\n      Fe = [\"sanitize\", \"whiteList\", \"sanitizeFn\"],\n      We = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(number|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacement: \"(string|array)\",\n    boundary: \"(string|element)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    whiteList: \"object\",\n    popperConfig: \"(null|object)\"\n  },\n      Ue = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: \"left\"\n  },\n      Qe = {\n    animation: !0,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: 0,\n    container: !1,\n    fallbackPlacement: \"flip\",\n    boundary: \"scrollParent\",\n    sanitize: !0,\n    sanitizeFn: null,\n    whiteList: Me,\n    popperConfig: null\n  },\n      Ve = {\n    HIDE: \"hide.bs.tooltip\",\n    HIDDEN: \"hidden.bs.tooltip\",\n    SHOW: \"show.bs.tooltip\",\n    SHOWN: \"shown.bs.tooltip\",\n    INSERTED: \"inserted.bs.tooltip\",\n    CLICK: \"click.bs.tooltip\",\n    FOCUSIN: \"focusin.bs.tooltip\",\n    FOCUSOUT: \"focusout.bs.tooltip\",\n    MOUSEENTER: \"mouseenter.bs.tooltip\",\n    MOUSELEAVE: \"mouseleave.bs.tooltip\"\n  },\n      qe = function () {\n    function t(t, e) {\n      if (void 0 === ye) throw new TypeError(\"Bootstrap's tooltips require Popper.js (https://popper.js.org)\");\n      this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners(), T(t, this.constructor.DATA_KEY, this);\n    }\n\n    var n = t.prototype;\n    return n.enable = function () {\n      this._isEnabled = !0;\n    }, n.disable = function () {\n      this._isEnabled = !1;\n    }, n.toggleEnabled = function () {\n      this._isEnabled = !this._isEnabled;\n    }, n.toggle = function (t) {\n      if (this._isEnabled) if (t) {\n        var e = this.constructor.DATA_KEY,\n            n = L(t.target, e);\n        n || (n = new this.constructor(t.target, this._getDelegateConfig()), T(t.target, e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);\n      } else {\n        if (this.getTipElement().classList.contains(\"show\")) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }, n.dispose = function () {\n      clearTimeout(this._timeout), k(this.element, this.constructor.DATA_KEY), V.off(this.element, this.constructor.EVENT_KEY), V.off(this.element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.tip && this.tip.parentNode.removeChild(this.tip), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;\n    }, n.show = function () {\n      var t = this;\n      if (\"none\" === this.element.style.display) throw new Error(\"Please use show on visible elements\");\n\n      if (this.isWithContent() && this._isEnabled) {\n        var e = V.trigger(this.element, this.constructor.Event.SHOW),\n            n = function t(e) {\n          if (!document.documentElement.attachShadow) return null;\n\n          if (\"function\" == typeof e.getRootNode) {\n            var n = e.getRootNode();\n            return n instanceof ShadowRoot ? n : null;\n          }\n\n          return e instanceof ShadowRoot ? e : e.parentNode ? t(e.parentNode) : null;\n        }(this.element),\n            i = null === n ? this.element.ownerDocument.documentElement.contains(this.element) : n.contains(this.element);\n\n        if (e.defaultPrevented || !i) return;\n        var o = this.getTipElement(),\n            r = c(this.constructor.NAME);\n        o.setAttribute(\"id\", r), this.element.setAttribute(\"aria-describedby\", r), this.setContent(), this.config.animation && o.classList.add(\"fade\");\n\n        var s = \"function\" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,\n            a = this._getAttachment(s);\n\n        this._addAttachmentClass(a);\n\n        var l,\n            u = this._getContainer();\n\n        if (T(o, this.constructor.DATA_KEY, this), this.element.ownerDocument.documentElement.contains(this.tip) || u.appendChild(o), V.trigger(this.element, this.constructor.Event.INSERTED), this._popper = new ye(this.element, o, this._getPopperConfig(a)), o.classList.add(\"show\"), \"ontouchstart\" in document.documentElement) (l = []).concat.apply(l, document.body.children).forEach(function (t) {\n          V.on(t, \"mouseover\", function () {});\n        });\n\n        var f = function f() {\n          t.config.animation && t._fixTransition();\n          var e = t._hoverState;\n          t._hoverState = null, V.trigger(t.element, t.constructor.Event.SHOWN), \"out\" === e && t._leave(null, t);\n        };\n\n        if (this.tip.classList.contains(\"fade\")) {\n          var h = d(this.tip);\n          V.one(this.tip, \"transitionend\", f), g(this.tip, h);\n        } else f();\n      }\n    }, n.hide = function () {\n      var t = this,\n          e = this.getTipElement(),\n          n = function n() {\n        \"show\" !== t._hoverState && e.parentNode && e.parentNode.removeChild(e), t._cleanTipClass(), t.element.removeAttribute(\"aria-describedby\"), V.trigger(t.element, t.constructor.Event.HIDDEN), t._popper.destroy();\n      };\n\n      if (!V.trigger(this.element, this.constructor.Event.HIDE).defaultPrevented) {\n        var i;\n        if (e.classList.remove(\"show\"), \"ontouchstart\" in document.documentElement) (i = []).concat.apply(i, document.body.children).forEach(function (t) {\n          return V.off(t, \"mouseover\", b);\n        });\n\n        if (this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, this.tip.classList.contains(\"fade\")) {\n          var o = d(e);\n          V.one(e, \"transitionend\", n), g(e, o);\n        } else n();\n\n        this._hoverState = \"\";\n      }\n    }, n.update = function () {\n      null !== this._popper && this._popper.scheduleUpdate();\n    }, n.isWithContent = function () {\n      return Boolean(this.getTitle());\n    }, n.getTipElement = function () {\n      if (this.tip) return this.tip;\n      var t = document.createElement(\"div\");\n      return t.innerHTML = this.config.template, this.tip = t.children[0], this.tip;\n    }, n.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(et.findOne(\".tooltip-inner\", t), this.getTitle()), t.classList.remove(\"fade\", \"show\");\n    }, n.setElementContent = function (t, e) {\n      if (null !== t) return \"object\" == _typeof(e) && m(e) ? (e.jquery && (e = e[0]), void (this.config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.appendChild(e)) : t.textContent = e.textContent)) : void (this.config.html ? (this.config.sanitize && (e = He(e, this.config.whiteList, this.config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);\n    }, n.getTitle = function () {\n      var t = this.element.getAttribute(\"data-original-title\");\n      return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;\n    }, n._getPopperConfig = function (t) {\n      var e = this;\n      return o(o({}, {\n        placement: t,\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            behavior: this.config.fallbackPlacement\n          },\n          arrow: {\n            element: \".\" + this.constructor.NAME + \"-arrow\"\n          },\n          preventOverflow: {\n            boundariesElement: this.config.boundary\n          }\n        },\n        onCreate: function onCreate(t) {\n          t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);\n        },\n        onUpdate: function onUpdate(t) {\n          return e._handlePopperPlacementChange(t);\n        }\n      }), this.config.popperConfig);\n    }, n._addAttachmentClass = function (t) {\n      this.getTipElement().classList.add(\"bs-tooltip-\" + t);\n    }, n._getOffset = function () {\n      var t = this,\n          e = {};\n      return \"function\" == typeof this.config.offset ? e.fn = function (e) {\n        return e.offsets = o(o({}, e.offsets), t.config.offset(e.offsets, t.element) || {}), e;\n      } : e.offset = this.config.offset, e;\n    }, n._getContainer = function () {\n      return !1 === this.config.container ? document.body : m(this.config.container) ? this.config.container : et.findOne(this.config.container);\n    }, n._getAttachment = function (t) {\n      return Ue[t.toUpperCase()];\n    }, n._setListeners = function () {\n      var t = this;\n      this.config.trigger.split(\" \").forEach(function (e) {\n        if (\"click\" === e) V.on(t.element, t.constructor.Event.CLICK, t.config.selector, function (e) {\n          return t.toggle(e);\n        });else if (\"manual\" !== e) {\n          var n = \"hover\" === e ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,\n              i = \"hover\" === e ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;\n          V.on(t.element, n, t.config.selector, function (e) {\n            return t._enter(e);\n          }), V.on(t.element, i, t.config.selector, function (e) {\n            return t._leave(e);\n          });\n        }\n      }), this._hideModalHandler = function () {\n        t.element && t.hide();\n      }, V.on(this.element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.config.selector ? this.config = o(o({}, this.config), {}, {\n        trigger: \"manual\",\n        selector: \"\"\n      }) : this._fixTitle();\n    }, n._fixTitle = function () {\n      var t = _typeof(this.element.getAttribute(\"data-original-title\"));\n\n      (this.element.getAttribute(\"title\") || \"string\" !== t) && (this.element.setAttribute(\"data-original-title\", this.element.getAttribute(\"title\") || \"\"), this.element.setAttribute(\"title\", \"\"));\n    }, n._enter = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || L(t.target, n)) || (e = new this.constructor(t.target, this._getDelegateConfig()), T(t.target, n, e)), t && (e._activeTrigger[\"focusin\" === t.type ? \"focus\" : \"hover\"] = !0), e.getTipElement().classList.contains(\"show\") || \"show\" === e._hoverState ? e._hoverState = \"show\" : (clearTimeout(e._timeout), e._hoverState = \"show\", e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n        \"show\" === e._hoverState && e.show();\n      }, e.config.delay.show) : e.show());\n    }, n._leave = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || L(t.target, n)) || (e = new this.constructor(t.target, this._getDelegateConfig()), T(t.target, n, e)), t && (e._activeTrigger[\"focusout\" === t.type ? \"focus\" : \"hover\"] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = \"out\", e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n        \"out\" === e._hoverState && e.hide();\n      }, e.config.delay.hide) : e.hide());\n    }, n._isWithActiveTrigger = function () {\n      for (var t in this._activeTrigger) {\n        if (this._activeTrigger[t]) return !0;\n      }\n\n      return !1;\n    }, n._getConfig = function (t) {\n      var e = tt.getDataAttributes(this.element);\n      return Object.keys(e).forEach(function (t) {\n        -1 !== Fe.indexOf(t) && delete e[t];\n      }), t && \"object\" == _typeof(t.container) && t.container.jquery && (t.container = t.container[0]), \"number\" == typeof (t = o(o(o({}, this.constructor.Default), e), \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), v(Be, t, this.constructor.DefaultType), t.sanitize && (t.template = He(t.template, t.whiteList, t.sanitizeFn)), t;\n    }, n._getDelegateConfig = function () {\n      var t = {};\n      if (this.config) for (var e in this.config) {\n        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n      }\n      return t;\n    }, n._cleanTipClass = function () {\n      var t = this.getTipElement(),\n          e = t.getAttribute(\"class\").match(Re);\n      null !== e && e.length > 0 && e.map(function (t) {\n        return t.trim();\n      }).forEach(function (e) {\n        return t.classList.remove(e);\n      });\n    }, n._handlePopperPlacementChange = function (t) {\n      var e = t.instance;\n      this.tip = e.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(t.placement));\n    }, n._fixTransition = function () {\n      var t = this.getTipElement(),\n          e = this.config.animation;\n      null === t.getAttribute(\"x-placement\") && (t.classList.remove(\"fade\"), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.tooltip\"),\n            i = \"object\" == _typeof(e) && e;\n\n        if ((n || !/dispose|hide/.test(e)) && (n || (n = new t(this, i)), \"string\" == typeof e)) {\n          if (void 0 === n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e]();\n        }\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.tooltip\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Qe;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return Be;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.tooltip\";\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Ve;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.tooltip\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return We;\n      }\n    }]), t;\n  }(),\n      Ye = w();\n\n  if (Ye) {\n    var ze = Ye.fn[Be];\n    Ye.fn[Be] = qe.jQueryInterface, Ye.fn[Be].Constructor = qe, Ye.fn[Be].noConflict = function () {\n      return Ye.fn[Be] = ze, qe.jQueryInterface;\n    };\n  }\n\n  var Ke = \"popover\",\n      Xe = new RegExp(\"(^|\\\\s)bs-popover\\\\S+\", \"g\"),\n      Ge = o(o({}, qe.Default), {}, {\n    placement: \"right\",\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n  }),\n      $e = o(o({}, qe.DefaultType), {}, {\n    content: \"(string|element|function)\"\n  }),\n      Ze = {\n    HIDE: \"hide.bs.popover\",\n    HIDDEN: \"hidden.bs.popover\",\n    SHOW: \"show.bs.popover\",\n    SHOWN: \"shown.bs.popover\",\n    INSERTED: \"inserted.bs.popover\",\n    CLICK: \"click.bs.popover\",\n    FOCUSIN: \"focusin.bs.popover\",\n    FOCUSOUT: \"focusout.bs.popover\",\n    MOUSEENTER: \"mouseenter.bs.popover\",\n    MOUSELEAVE: \"mouseleave.bs.popover\"\n  },\n      Je = function (t) {\n    var n, i;\n\n    function o() {\n      return t.apply(this, arguments) || this;\n    }\n\n    i = t, (n = o).prototype = Object.create(i.prototype), n.prototype.constructor = n, n.__proto__ = i;\n    var r = o.prototype;\n    return r.isWithContent = function () {\n      return this.getTitle() || this._getContent();\n    }, r.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(et.findOne(\".popover-header\", t), this.getTitle());\n\n      var e = this._getContent();\n\n      \"function\" == typeof e && (e = e.call(this.element)), this.setElementContent(et.findOne(\".popover-body\", t), e), t.classList.remove(\"fade\", \"show\");\n    }, r._addAttachmentClass = function (t) {\n      this.getTipElement().classList.add(\"bs-popover-\" + t);\n    }, r._getContent = function () {\n      return this.element.getAttribute(\"data-content\") || this.config.content;\n    }, r._cleanTipClass = function () {\n      var t = this.getTipElement(),\n          e = t.getAttribute(\"class\").match(Xe);\n      null !== e && e.length > 0 && e.map(function (t) {\n        return t.trim();\n      }).forEach(function (e) {\n        return t.classList.remove(e);\n      });\n    }, o.jQueryInterface = function (t) {\n      return this.each(function () {\n        var e = L(this, \"bs.popover\"),\n            n = \"object\" == _typeof(t) ? t : null;\n\n        if ((e || !/dispose|hide/.test(t)) && (e || (e = new o(this, n), T(this, \"bs.popover\", e)), \"string\" == typeof t)) {\n          if (void 0 === e[t]) throw new TypeError('No method named \"' + t + '\"');\n          e[t]();\n        }\n      });\n    }, o.getInstance = function (t) {\n      return L(t, \"bs.popover\");\n    }, e(o, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Ge;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return Ke;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.popover\";\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Ze;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.popover\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return $e;\n      }\n    }]), o;\n  }(qe),\n      tn = w();\n\n  if (tn) {\n    var en = tn.fn[Ke];\n    tn.fn[Ke] = Je.jQueryInterface, tn.fn[Ke].Constructor = Je, tn.fn[Ke].noConflict = function () {\n      return tn.fn[Ke] = en, Je.jQueryInterface;\n    };\n  }\n\n  var nn = \"scrollspy\",\n      on = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n  },\n      rn = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n  },\n      sn = function () {\n    function t(t, e) {\n      var n = this;\n      this._element = t, this._scrollElement = \"BODY\" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + \" .nav-link,\" + this._config.target + \" .list-group-item,\" + this._config.target + \" .dropdown-item\", this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, V.on(this._scrollElement, \"scroll.bs.scrollspy\", function (t) {\n        return n._process(t);\n      }), this.refresh(), this._process(), T(t, \"bs.scrollspy\", this);\n    }\n\n    var n = t.prototype;\n    return n.refresh = function () {\n      var t = this,\n          e = this._scrollElement === this._scrollElement.window ? \"offset\" : \"position\",\n          n = \"auto\" === this._config.method ? e : this._config.method,\n          i = \"position\" === n ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), et.find(this._selector).map(function (t) {\n        var e,\n            o = f(t);\n\n        if (o && (e = et.findOne(o)), e) {\n          var r = e.getBoundingClientRect();\n          if (r.width || r.height) return [tt[n](e).top + i, o];\n        }\n\n        return null;\n      }).filter(function (t) {\n        return t;\n      }).sort(function (t, e) {\n        return t[0] - e[0];\n      }).forEach(function (e) {\n        t._offsets.push(e[0]), t._targets.push(e[1]);\n      });\n    }, n.dispose = function () {\n      k(this._element, \"bs.scrollspy\"), V.off(this._scrollElement, \".bs.scrollspy\"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n    }, n._getConfig = function (t) {\n      if (\"string\" != typeof (t = o(o({}, on), \"object\" == _typeof(t) && t ? t : {})).target && m(t.target)) {\n        var e = t.target.id;\n        e || (e = c(nn), t.target.id = e), t.target = \"#\" + e;\n      }\n\n      return v(nn, t, rn), t;\n    }, n._getScrollTop = function () {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }, n._getScrollHeight = function () {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }, n._getOffsetHeight = function () {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }, n._process = function () {\n      var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), t >= n) {\n        var i = this._targets[this._targets.length - 1];\n        this._activeTarget !== i && this._activate(i);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n\n        for (var o = this._offsets.length; o--;) {\n          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (void 0 === this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);\n        }\n      }\n    }, n._activate = function (t) {\n      this._activeTarget = t, this._clear();\n\n      var e = this._selector.split(\",\").map(function (e) {\n        return e + '[data-target=\"' + t + '\"],' + e + '[href=\"' + t + '\"]';\n      }),\n          n = et.findOne(e.join(\",\"));\n\n      n.classList.contains(\"dropdown-item\") ? (et.findOne(\".dropdown-toggle\", n.closest(\".dropdown\")).classList.add(\"active\"), n.classList.add(\"active\")) : (n.classList.add(\"active\"), et.parents(n, \".nav, .list-group\").forEach(function (t) {\n        et.prev(t, \".nav-link, .list-group-item\").forEach(function (t) {\n          return t.classList.add(\"active\");\n        }), et.prev(t, \".nav-item\").forEach(function (t) {\n          et.children(t, \".nav-link\").forEach(function (t) {\n            return t.classList.add(\"active\");\n          });\n        });\n      })), V.trigger(this._scrollElement, \"activate.bs.scrollspy\", {\n        relatedTarget: t\n      });\n    }, n._clear = function () {\n      et.find(this._selector).filter(function (t) {\n        return t.classList.contains(\"active\");\n      }).forEach(function (t) {\n        return t.classList.remove(\"active\");\n      });\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.scrollspy\");\n\n        if (n || (n = new t(this, \"object\" == _typeof(e) && e)), \"string\" == typeof e) {\n          if (void 0 === n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e]();\n        }\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.scrollspy\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return on;\n      }\n    }]), t;\n  }();\n\n  V.on(window, \"load.bs.scrollspy.data-api\", function () {\n    et.find('[data-spy=\"scroll\"]').forEach(function (t) {\n      return new sn(t, tt.getDataAttributes(t));\n    });\n  });\n  var an = w();\n\n  if (an) {\n    var ln = an.fn[nn];\n    an.fn[nn] = sn.jQueryInterface, an.fn[nn].Constructor = sn, an.fn[nn].noConflict = function () {\n      return an.fn[nn] = ln, sn.jQueryInterface;\n    };\n  }\n\n  var cn = function () {\n    function t(t) {\n      this._element = t, T(this._element, \"bs.tab\", this);\n    }\n\n    var n = t.prototype;\n    return n.show = function () {\n      var t = this;\n\n      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(\"active\") || this._element.classList.contains(\"disabled\"))) {\n        var e,\n            n = h(this._element),\n            i = this._element.closest(\".nav, .list-group\");\n\n        if (i) {\n          var o = \"UL\" === i.nodeName || \"OL\" === i.nodeName ? \":scope > li > .active\" : \".active\";\n          e = (e = et.find(o, i))[e.length - 1];\n        }\n\n        var r = null;\n\n        if (e && (r = V.trigger(e, \"hide.bs.tab\", {\n          relatedTarget: this._element\n        })), !(V.trigger(this._element, \"show.bs.tab\", {\n          relatedTarget: e\n        }).defaultPrevented || null !== r && r.defaultPrevented)) {\n          this._activate(this._element, i);\n\n          var s = function s() {\n            V.trigger(e, \"hidden.bs.tab\", {\n              relatedTarget: t._element\n            }), V.trigger(t._element, \"shown.bs.tab\", {\n              relatedTarget: e\n            });\n          };\n\n          n ? this._activate(n, n.parentNode, s) : s();\n        }\n      }\n    }, n.dispose = function () {\n      k(this._element, \"bs.tab\"), this._element = null;\n    }, n._activate = function (t, e, n) {\n      var i = this,\n          o = (!e || \"UL\" !== e.nodeName && \"OL\" !== e.nodeName ? et.children(e, \".active\") : et.find(\":scope > li > .active\", e))[0],\n          r = n && o && o.classList.contains(\"fade\"),\n          s = function s() {\n        return i._transitionComplete(t, o, n);\n      };\n\n      if (o && r) {\n        var a = d(o);\n        o.classList.remove(\"show\"), V.one(o, \"transitionend\", s), g(o, a);\n      } else s();\n    }, n._transitionComplete = function (t, e, n) {\n      if (e) {\n        e.classList.remove(\"active\");\n        var i = et.findOne(\":scope > .dropdown-menu .active\", e.parentNode);\n        i && i.classList.remove(\"active\"), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n      }\n\n      (t.classList.add(\"active\"), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), y(t), t.classList.contains(\"fade\") && t.classList.add(\"show\"), t.parentNode && t.parentNode.classList.contains(\"dropdown-menu\")) && (t.closest(\".dropdown\") && et.find(\".dropdown-toggle\").forEach(function (t) {\n        return t.classList.add(\"active\");\n      }), t.setAttribute(\"aria-expanded\", !0));\n      n && n();\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.tab\") || new t(this);\n\n        if (\"string\" == typeof e) {\n          if (void 0 === n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e]();\n        }\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.tab\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }]), t;\n  }();\n\n  V.on(document, \"click.bs.tab.data-api\", '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]', function (t) {\n    t.preventDefault(), (L(this, \"bs.tab\") || new cn(this)).show();\n  });\n  var un = w();\n\n  if (un) {\n    var fn = un.fn.tab;\n    un.fn.tab = cn.jQueryInterface, un.fn.tab.Constructor = cn, un.fn.tab.noConflict = function () {\n      return un.fn.tab = fn, cn.jQueryInterface;\n    };\n  }\n\n  var hn = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n  },\n      dn = {\n    animation: !0,\n    autohide: !0,\n    delay: 500\n  },\n      pn = function () {\n    function t(t, e) {\n      this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners(), T(t, \"bs.toast\", this);\n    }\n\n    var n = t.prototype;\n    return n.show = function () {\n      var t = this;\n\n      if (!V.trigger(this._element, \"show.bs.toast\").defaultPrevented) {\n        this._config.animation && this._element.classList.add(\"fade\");\n\n        var e = function e() {\n          t._element.classList.remove(\"showing\"), t._element.classList.add(\"show\"), V.trigger(t._element, \"shown.bs.toast\"), t._config.autohide && (t._timeout = setTimeout(function () {\n            t.hide();\n          }, t._config.delay));\n        };\n\n        if (this._element.classList.remove(\"hide\"), y(this._element), this._element.classList.add(\"showing\"), this._config.animation) {\n          var n = d(this._element);\n          V.one(this._element, \"transitionend\", e), g(this._element, n);\n        } else e();\n      }\n    }, n.hide = function () {\n      var t = this;\n\n      if (this._element.classList.contains(\"show\") && !V.trigger(this._element, \"hide.bs.toast\").defaultPrevented) {\n        var e = function e() {\n          t._element.classList.add(\"hide\"), V.trigger(t._element, \"hidden.bs.toast\");\n        };\n\n        if (this._element.classList.remove(\"show\"), this._config.animation) {\n          var n = d(this._element);\n          V.one(this._element, \"transitionend\", e), g(this._element, n);\n        } else e();\n      }\n    }, n.dispose = function () {\n      clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(\"show\") && this._element.classList.remove(\"show\"), V.off(this._element, \"click.dismiss.bs.toast\"), k(this._element, \"bs.toast\"), this._element = null, this._config = null;\n    }, n._getConfig = function (t) {\n      return t = o(o(o({}, dn), tt.getDataAttributes(this._element)), \"object\" == _typeof(t) && t ? t : {}), v(\"toast\", t, this.constructor.DefaultType), t;\n    }, n._setListeners = function () {\n      var t = this;\n      V.on(this._element, \"click.dismiss.bs.toast\", '[data-dismiss=\"toast\"]', function () {\n        return t.hide();\n      });\n    }, t.jQueryInterface = function (e) {\n      return this.each(function () {\n        var n = L(this, \"bs.toast\");\n\n        if (n || (n = new t(this, \"object\" == _typeof(e) && e)), \"string\" == typeof e) {\n          if (void 0 === n[e]) throw new TypeError('No method named \"' + e + '\"');\n          n[e](this);\n        }\n      });\n    }, t.getInstance = function (t) {\n      return L(t, \"bs.toast\");\n    }, e(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-alpha1\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return hn;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return dn;\n      }\n    }]), t;\n  }(),\n      mn = w();\n\n  if (mn) {\n    var gn = mn.fn.toast;\n    mn.fn.toast = pn.jQueryInterface, mn.fn.toast.Constructor = pn, mn.fn.toast.noConflict = function () {\n      return mn.fn.toast = gn, pn.jQueryInterface;\n    };\n  }\n\n  return {\n    Alert: Y,\n    Button: X,\n    Carousel: at,\n    Collapse: dt,\n    Dropdown: ke,\n    Modal: Se,\n    Popover: Je,\n    ScrollSpy: sn,\n    Tab: cn,\n    Toast: pn,\n    Tooltip: qe\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/bootstrap.bundle.min.js\n");

/***/ }),

/***/ "./resources/js/collapse.js":
/*!**********************************!*\
  !*** ./resources/js/collapse.js ***!
  \**********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nvar Collapse = function ($) {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  var NAME = 'collapse';\n  var VERSION = '4.0.0';\n  var DATA_KEY = 'bs.collapse';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 600;\n  var Default = {\n    toggle: true,\n    parent: ''\n  };\n  var DefaultType = {\n    toggle: 'boolean',\n    parent: '(string|element)'\n  };\n  var Event = {\n    SHOW: \"show\" + EVENT_KEY,\n    SHOWN: \"shown\" + EVENT_KEY,\n    HIDE: \"hide\" + EVENT_KEY,\n    HIDDEN: \"hidden\" + EVENT_KEY,\n    CLICK_DATA_API: \"click\" + EVENT_KEY + DATA_API_KEY\n  };\n  var ClassName = {\n    SHOW: 'show',\n    COLLAPSE: 'collapse',\n    COLLAPSING: 'collapsing',\n    COLLAPSED: 'collapsed'\n  };\n  var Dimension = {\n    WIDTH: 'width',\n    HEIGHT: 'height'\n  };\n  var Selector = {\n    ACTIVES: '.show, .collapsing',\n    DATA_TOGGLE: '[data-toggle=\"collapse\"]'\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n  };\n\n  var Collapse = /*#__PURE__*/function () {\n    function Collapse(element, config) {\n      this._isTransitioning = false;\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._triggerArray = $.makeArray($(\"[data-toggle=\\\"collapse\\\"][href=\\\"#\" + element.id + \"\\\"],\" + (\"[data-toggle=\\\"collapse\\\"][data-target=\\\"#\" + element.id + \"\\\"]\")));\n      var tabToggles = $(Selector.DATA_TOGGLE);\n\n      for (var i = 0; i < tabToggles.length; i++) {\n        var elem = tabToggles[i];\n        var selector = Util.getSelectorFromElement(elem);\n\n        if (selector !== null && $(selector).filter(element).length > 0) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null;\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    } // Getters\n\n\n    var _proto = Collapse.prototype; // Public\n\n    _proto.toggle = function toggle() {\n      if ($(this._element).hasClass(ClassName.SHOW)) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._isTransitioning || $(this._element).hasClass(ClassName.SHOW)) {\n        return;\n      }\n\n      var actives;\n      var activesData;\n\n      if (this._parent) {\n        actives = $.makeArray($(this._parent).find(Selector.ACTIVES).filter(\"[data-parent=\\\"\" + this._config.parent + \"\\\"]\"));\n\n        if (actives.length === 0) {\n          actives = null;\n        }\n      }\n\n      if (actives) {\n        activesData = $(actives).not(this._selector).data(DATA_KEY);\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      var startEvent = $.Event(Event.SHOW);\n      $(this._element).trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      if (actives) {\n        Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide');\n\n        if (!activesData) {\n          $(actives).data(DATA_KEY, null);\n        }\n      }\n\n      var dimension = this._getDimension();\n\n      $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\n      this._element.style[dimension] = 0;\n\n      if (this._triggerArray.length > 0) {\n        $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        $(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);\n        _this._element.style[dimension] = '';\n\n        _this.setTransitioning(false);\n\n        $(_this._element).trigger(Event.SHOWN);\n      };\n\n      if (!Util.supportsTransitionEnd()) {\n        complete();\n        return;\n      }\n\n      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      var scrollSize = \"scroll\" + capitalizedDimension;\n      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n      this._element.style[dimension] = this._element[scrollSize] + \"px\";\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (this._isTransitioning || !$(this._element).hasClass(ClassName.SHOW)) {\n        return;\n      }\n\n      var startEvent = $.Event(Event.HIDE);\n      $(this._element).trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + \"px\";\n      Util.reflow(this._element);\n      $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\n\n      if (this._triggerArray.length > 0) {\n        for (var i = 0; i < this._triggerArray.length; i++) {\n          var trigger = this._triggerArray[i];\n          var selector = Util.getSelectorFromElement(trigger);\n\n          if (selector !== null) {\n            var $elem = $(selector);\n\n            if (!$elem.hasClass(ClassName.SHOW)) {\n              $(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\n            }\n          }\n        }\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this2.setTransitioning(false);\n\n        $(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\n      };\n\n      this._element.style[dimension] = '';\n\n      if (!Util.supportsTransitionEnd()) {\n        complete();\n        return;\n      }\n\n      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n    };\n\n    _proto.setTransitioning = function setTransitioning(isTransitioning) {\n      this._isTransitioning = isTransitioning;\n    };\n\n    _proto.dispose = function dispose() {\n      $.removeData(this._element, DATA_KEY);\n      this._config = null;\n      this._parent = null;\n      this._element = null;\n      this._triggerArray = null;\n      this._isTransitioning = null;\n    }; // Private\n\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default, config);\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      Util.typeCheckConfig(NAME, config, DefaultType);\n      return config;\n    };\n\n    _proto._getDimension = function _getDimension() {\n      var hasWidth = $(this._element).hasClass(Dimension.WIDTH);\n      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\n    };\n\n    _proto._getParent = function _getParent() {\n      var _this3 = this;\n\n      var parent = null;\n\n      if (Util.isElement(this._config.parent)) {\n        parent = this._config.parent; // It's a jQuery object\n\n        if (typeof this._config.parent.jquery !== 'undefined') {\n          parent = this._config.parent[0];\n        }\n      } else {\n        parent = $(this._config.parent)[0];\n      }\n\n      var selector = \"[data-toggle=\\\"collapse\\\"][data-parent=\\\"\" + this._config.parent + \"\\\"]\";\n      $(parent).find(selector).each(function (i, element) {\n        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\n      });\n      return parent;\n    };\n\n    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\n      if (element) {\n        var isOpen = $(element).hasClass(ClassName.SHOW);\n\n        if (triggerArray.length > 0) {\n          $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\n        }\n      }\n    }; // Static\n\n\n    Collapse._getTargetFromElement = function _getTargetFromElement(element) {\n      var selector = Util.getSelectorFromElement(element);\n      return selector ? $(selector)[0] : null;\n    };\n\n    Collapse._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_KEY);\n\n        var _config = _extends({}, Default, $this.data(), _typeof(config) === 'object' && config);\n\n        if (!data && _config.toggle && /show|hide/.test(config)) {\n          _config.toggle = false;\n        }\n\n        if (!data) {\n          data = new Collapse(this, _config);\n          $this.data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Collapse, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Collapse;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.currentTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var $trigger = $(this);\n    var selector = Util.getSelectorFromElement(this);\n    $(selector).each(function () {\n      var $target = $(this);\n      var data = $target.data(DATA_KEY);\n      var config = data ? 'toggle' : $trigger.data();\n\n      Collapse._jQueryInterface.call($target, config);\n    });\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Collapse._jQueryInterface;\n  $.fn[NAME].Constructor = Collapse;\n\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Collapse._jQueryInterface;\n  };\n\n  return Collapse;\n}($);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/collapse.js\n");

/***/ }),

/***/ "./resources/js/jquery-slim.min.js":
/*!*****************************************!*\
  !*** ./resources/js/jquery-slim.min.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*! jQuery v3.2.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector | (c) JS Foundation and other contributors | jquery.org/license */\n!function (a, b) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}(\"undefined\" != typeof window ? window : this, function (a, b) {\n  \"use strict\";\n\n  var c = [],\n      d = a.document,\n      e = Object.getPrototypeOf,\n      f = c.slice,\n      g = c.concat,\n      h = c.push,\n      i = c.indexOf,\n      j = {},\n      k = j.toString,\n      l = j.hasOwnProperty,\n      m = l.toString,\n      n = m.call(Object),\n      o = {};\n\n  function p(a, b) {\n    b = b || d;\n    var c = b.createElement(\"script\");\n    c.text = a, b.head.appendChild(c).parentNode.removeChild(c);\n  }\n\n  var q = \"3.2.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector\",\n      r = function r(a, b) {\n    return new r.fn.init(a, b);\n  },\n      s = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      t = /^-ms-/,\n      u = /-([a-z])/g,\n      v = function v(a, b) {\n    return b.toUpperCase();\n  };\n\n  r.fn = r.prototype = {\n    jquery: q,\n    constructor: r,\n    length: 0,\n    toArray: function toArray() {\n      return f.call(this);\n    },\n    get: function get(a) {\n      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];\n    },\n    pushStack: function pushStack(a) {\n      var b = r.merge(this.constructor(), a);\n      return b.prevObject = this, b;\n    },\n    each: function each(a) {\n      return r.each(this, a);\n    },\n    map: function map(a) {\n      return this.pushStack(r.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(f.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(a) {\n      var b = this.length,\n          c = +a + (a < 0 ? b : 0);\n      return this.pushStack(c >= 0 && c < b ? [this[c]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: h,\n    sort: c.sort,\n    splice: c.splice\n  }, r.extend = r.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == _typeof(g) || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {\n      if (null != (a = arguments[h])) for (b in a) {\n        c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));\n      }\n    }\n\n    return g;\n  }, r.extend({\n    expando: \"jQuery\" + (q + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(a) {\n      throw new Error(a);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(a) {\n      return \"function\" === r.type(a);\n    },\n    isWindow: function isWindow(a) {\n      return null != a && a === a.window;\n    },\n    isNumeric: function isNumeric(a) {\n      var b = r.type(a);\n      return (\"number\" === b || \"string\" === b) && !isNaN(a - parseFloat(a));\n    },\n    isPlainObject: function isPlainObject(a) {\n      var b, c;\n      return !(!a || \"[object Object]\" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, \"constructor\") && b.constructor, \"function\" == typeof c && m.call(c) === n));\n    },\n    isEmptyObject: function isEmptyObject(a) {\n      var b;\n\n      for (b in a) {\n        return !1;\n      }\n\n      return !0;\n    },\n    type: function type(a) {\n      return null == a ? a + \"\" : \"object\" == _typeof(a) || \"function\" == typeof a ? j[k.call(a)] || \"object\" : _typeof(a);\n    },\n    globalEval: function globalEval(a) {\n      p(a);\n    },\n    camelCase: function camelCase(a) {\n      return a.replace(t, \"ms-\").replace(u, v);\n    },\n    each: function each(a, b) {\n      var c,\n          d = 0;\n\n      if (w(a)) {\n        for (c = a.length; d < c; d++) {\n          if (b.call(a[d], d, a[d]) === !1) break;\n        }\n      } else for (d in a) {\n        if (b.call(a[d], d, a[d]) === !1) break;\n      }\n\n      return a;\n    },\n    trim: function trim(a) {\n      return null == a ? \"\" : (a + \"\").replace(s, \"\");\n    },\n    makeArray: function makeArray(a, b) {\n      var c = b || [];\n      return null != a && (w(Object(a)) ? r.merge(c, \"string\" == typeof a ? [a] : a) : h.call(c, a)), c;\n    },\n    inArray: function inArray(a, b, c) {\n      return null == b ? -1 : i.call(b, a, c);\n    },\n    merge: function merge(a, b) {\n      for (var c = +b.length, d = 0, e = a.length; d < c; d++) {\n        a[e++] = b[d];\n      }\n\n      return a.length = e, a;\n    },\n    grep: function grep(a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {\n        d = !b(a[f], f), d !== h && e.push(a[f]);\n      }\n\n      return e;\n    },\n    map: function map(a, b, c) {\n      var d,\n          e,\n          f = 0,\n          h = [];\n      if (w(a)) for (d = a.length; f < d; f++) {\n        e = b(a[f], f, c), null != e && h.push(e);\n      } else for (f in a) {\n        e = b(a[f], f, c), null != e && h.push(e);\n      }\n      return g.apply([], h);\n    },\n    guid: 1,\n    proxy: function proxy(a, b) {\n      var c, d, e;\n      if (\"string\" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function e() {\n        return a.apply(b || this, d.concat(f.call(arguments)));\n      }, e.guid = a.guid = a.guid || r.guid++, e;\n    },\n    now: Date.now,\n    support: o\n  }), \"function\" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (a, b) {\n    j[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function w(a) {\n    var b = !!a && \"length\" in a && a.length,\n        c = r.type(a);\n    return \"function\" !== c && !r.isWindow(a) && (\"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a);\n  }\n\n  var x = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + 1 * new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = ha(),\n        z = ha(),\n        A = ha(),\n        B = function B(a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = {}.hasOwnProperty,\n        D = [],\n        E = D.pop,\n        F = D.push,\n        G = D.push,\n        H = D.slice,\n        I = function I(a, b) {\n      for (var c = 0, d = a.length; c < d; c++) {\n        if (a[c] === b) return c;\n      }\n\n      return -1;\n    },\n        J = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        K = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        L = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n        M = \"\\\\[\" + K + \"*(\" + L + \")(?:\" + K + \"*([*^$|!~]?=)\" + K + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + L + \"))|)\" + K + \"*\\\\]\",\n        N = \":(\" + L + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + M + \")*)|.*)\\\\)|)\",\n        O = new RegExp(K + \"+\", \"g\"),\n        P = new RegExp(\"^\" + K + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + K + \"+$\", \"g\"),\n        Q = new RegExp(\"^\" + K + \"*,\" + K + \"*\"),\n        R = new RegExp(\"^\" + K + \"*([>+~]|\" + K + \")\" + K + \"*\"),\n        S = new RegExp(\"=\" + K + \"*([^\\\\]'\\\"]*?)\" + K + \"*\\\\]\", \"g\"),\n        T = new RegExp(N),\n        U = new RegExp(\"^\" + L + \"$\"),\n        V = {\n      ID: new RegExp(\"^#(\" + L + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + L + \")\"),\n      TAG: new RegExp(\"^(\" + L + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + M),\n      PSEUDO: new RegExp(\"^\" + N),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + K + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + K + \"*(?:([+-]|)\" + K + \"*(\\\\d+)|))\" + K + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + J + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + K + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + K + \"*((?:-\\\\d)?\\\\d*)\" + K + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        W = /^(?:input|select|textarea|button)$/i,\n        X = /^h\\d$/i,\n        Y = /^[^{]+\\{\\s*\\[native \\w/,\n        Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        $ = /[+~]/,\n        _ = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + K + \"?|(\" + K + \")|.)\", \"ig\"),\n        aa = function aa(a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    },\n        ba = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        ca = function ca(a, b) {\n      return b ? \"\\0\" === a ? \"\\uFFFD\" : a.slice(0, -1) + \"\\\\\" + a.charCodeAt(a.length - 1).toString(16) + \" \" : \"\\\\\" + a;\n    },\n        da = function da() {\n      m();\n    },\n        ea = ta(function (a) {\n      return a.disabled === !0 && (\"form\" in a || \"label\" in a);\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;\n    } catch (fa) {\n      G = {\n        apply: D.length ? function (a, b) {\n          F.apply(a, H.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]) {\n            ;\n          }\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function ga(a, b, d, e) {\n      var f,\n          h,\n          j,\n          k,\n          l,\n          o,\n          r,\n          s = b && b.ownerDocument,\n          w = b ? b.nodeType : 9;\n      if (d = d || [], \"string\" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;\n\n      if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {\n        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {\n          if (9 === w) {\n            if (!(j = b.getElementById(f))) return d;\n            if (j.id === f) return d.push(j), d;\n          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;\n        } else {\n          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;\n          if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;\n        }\n\n        if (c.qsa && !A[a + \" \"] && (!q || !q.test(a))) {\n          if (1 !== w) s = b, r = a;else if (\"object\" !== b.nodeName.toLowerCase()) {\n            (k = b.getAttribute(\"id\")) ? k = k.replace(ba, ca) : b.setAttribute(\"id\", k = u), o = g(a), h = o.length;\n\n            while (h--) {\n              o[h] = \"#\" + k + \" \" + sa(o[h]);\n            }\n\n            r = o.join(\",\"), s = $.test(a) && qa(b.parentNode) || b;\n          }\n          if (r) try {\n            return G.apply(d, s.querySelectorAll(r)), d;\n          } catch (x) {} finally {\n            k === u && b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(P, \"$1\"), b, d, e);\n    }\n\n    function ha() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function ia(a) {\n      return a[u] = !0, a;\n    }\n\n    function ja(a) {\n      var b = n.createElement(\"fieldset\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function ka(a, b) {\n      var c = a.split(\"|\"),\n          e = c.length;\n\n      while (e--) {\n        d.attrHandle[c[e]] = b;\n      }\n    }\n\n    function la(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;\n      if (d) return d;\n      if (c) while (c = c.nextSibling) {\n        if (c === b) return -1;\n      }\n      return a ? 1 : -1;\n    }\n\n    function ma(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function na(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function oa(a) {\n      return function (b) {\n        return \"form\" in b ? b.parentNode && b.disabled === !1 ? \"label\" in b ? \"label\" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : \"label\" in b && b.disabled === a;\n      };\n    }\n\n    function pa(a) {\n      return ia(function (b) {\n        return b = +b, ia(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) {\n            c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n          }\n        });\n      });\n    }\n\n    function qa(a) {\n      return a && \"undefined\" != typeof a.getElementsByTagName && a;\n    }\n\n    c = ga.support = {}, f = ga.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return !!b && \"HTML\" !== b.nodeName;\n    }, m = ga.setDocument = function (a) {\n      var b,\n          e,\n          g = a ? a.ownerDocument || a : v;\n      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener(\"unload\", da, !1) : e.attachEvent && e.attachEvent(\"onunload\", da)), c.attributes = ja(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ja(function (a) {\n        return a.appendChild(n.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {\n        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;\n      }), c.getById ? (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c = b.getElementById(a);\n          return c ? [c] : [];\n        }\n      }) : (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          var c = \"undefined\" != typeof a.getAttributeNode && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c,\n              d,\n              e,\n              f = b.getElementById(a);\n\n          if (f) {\n            if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n            e = b.getElementsByName(a), d = 0;\n\n            while (f = e[d++]) {\n              if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n            }\n          }\n\n          return [];\n        }\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return \"undefined\" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) {\n            1 === c.nodeType && d.push(c);\n          }\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        if (\"undefined\" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);\n      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {\n        o.appendChild(a).innerHTML = \"<a id='\" + u + \"'></a><select id='\" + u + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowcapture^='']\").length && q.push(\"[*^$]=\" + K + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + K + \"*(?:value|\" + J + \")\"), a.querySelectorAll(\"[id~=\" + u + \"-]\").length || q.push(\"~=\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\"), a.querySelectorAll(\"a#\" + u + \"+*\").length || q.push(\".#.+[+~]\");\n      }), ja(function (a) {\n        a.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var b = n.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + K + \"*[*^$|!~]?=\"), 2 !== a.querySelectorAll(\":enabled\").length && q.push(\":enabled\", \":disabled\"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(\":disabled\").length && q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {\n        c.disconnectedMatch = s.call(a, \"*\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", N);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) {\n          if (b === a) return !0;\n        }\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            e = a.parentNode,\n            f = b.parentNode,\n            g = [a],\n            h = [b];\n        if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;\n        if (e === f) return la(a, b);\n        c = a;\n\n        while (c = c.parentNode) {\n          g.unshift(c);\n        }\n\n        c = b;\n\n        while (c = c.parentNode) {\n          h.unshift(c);\n        }\n\n        while (g[d] === h[d]) {\n          d++;\n        }\n\n        return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;\n      }, n) : n;\n    }, ga.matches = function (a, b) {\n      return ga(a, null, null, b);\n    }, ga.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, \"='$1']\"), c.matchesSelector && p && !A[b + \" \"] && (!r || !r.test(b)) && (!q || !q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return ga(b, n, null, [a]).length > 0;\n    }, ga.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, ga.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, ga.escape = function (a) {\n      return (a + \"\").replace(ba, ca);\n    }, ga.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, ga.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) {\n          b === a[f] && (e = d.push(f));\n        }\n\n        while (e--) {\n          a.splice(d[e], 1);\n        }\n      }\n\n      return k = null, a;\n    }, e = ga.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            c += e(a);\n          }\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) {\n        c += e(b);\n      }\n\n      return c;\n    }, d = ga.selectors = {\n      cacheLength: 50,\n      createPseudo: ia,\n      match: V,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(a) {\n          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || \"\").replace(_, aa), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function CHILD(a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && ga.error(a[0]), a;\n        },\n        PSEUDO: function PSEUDO(a) {\n          var b,\n              c = !a[6] && a[2];\n          return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(a) {\n          var b = a.replace(_, aa).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function CLASS(a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + K + \")\" + a + \"(\" + K + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || \"undefined\" != typeof a.getAttribute && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(a, b, c) {\n          return function (d) {\n            var e = ga.attr(d, a);\n            return null == e ? \"!=\" === b : !b || (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e.replace(O, \" \") + \" \").indexOf(c) > -1 : \"|=\" === b && (e === c || e.slice(0, c.length + 1) === c + \"-\"));\n          };\n        },\n        CHILD: function CHILD(a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h,\n                t = !1;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  m = b;\n\n                  while (m = m[p]) {\n                    if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;\n                  }\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];\n\n                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {\n                  if (1 === m.nodeType && ++t && m === b) {\n                    k[a] = [w, n, t];\n                    break;\n                  }\n                }\n              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {\n                if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;\n              }\n\n              return t -= e, t === d || t % d === 0 && t / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) {\n              d = I(a, f[g]), a[d] = !(c[d] = f[g]);\n            }\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: ia(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(P, \"$1\"));\n          return d[u] ? ia(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) {\n              (f = g[h]) && (a[h] = !(b[h] = f));\n            }\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();\n          };\n        }),\n        has: ia(function (a) {\n          return function (b) {\n            return ga(a, b).length > 0;\n          };\n        }),\n        contains: ia(function (a) {\n          return a = a.replace(_, aa), function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: ia(function (a) {\n          return U.test(a || \"\") || ga.error(\"unsupported lang: \" + a), a = a.replace(_, aa).toLowerCase(), function (b) {\n            var c;\n\n            do {\n              if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\");\n            } while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function root(a) {\n          return a === o;\n        },\n        focus: function focus(a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: oa(!1),\n        disabled: oa(!0),\n        checked: function checked(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function selected(a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function empty(a) {\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            if (a.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function header(a) {\n          return X.test(a.nodeName);\n        },\n        input: function input(a) {\n          return W.test(a.nodeName);\n        },\n        button: function button(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function text(a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: pa(function () {\n          return [0];\n        }),\n        last: pa(function (a, b) {\n          return [b - 1];\n        }),\n        eq: pa(function (a, b, c) {\n          return [c < 0 ? c + b : c];\n        }),\n        even: pa(function (a, b) {\n          for (var c = 0; c < b; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        odd: pa(function (a, b) {\n          for (var c = 1; c < b; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        lt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; --d >= 0;) {\n            a.push(d);\n          }\n\n          return a;\n        }),\n        gt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; ++d < b;) {\n            a.push(d);\n          }\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      d.pseudos[b] = ma(b);\n    }\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) {\n      d.pseudos[b] = na(b);\n    }\n\n    function ra() {}\n\n    ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(P, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) {\n          !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n            value: c,\n            type: g,\n            matches: e\n          }), h = h.slice(c.length));\n        }\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);\n    };\n\n    function sa(a) {\n      for (var b = 0, c = a.length, d = \"\"; b < c; b++) {\n        d += a[b].value;\n      }\n\n      return d;\n    }\n\n    function ta(a, b, c) {\n      var d = b.dir,\n          e = b.next,\n          f = e || d,\n          g = c && \"parentNode\" === f,\n          h = x++;\n      return b.first ? function (b, c, e) {\n        while (b = b[d]) {\n          if (1 === b.nodeType || g) return a(b, c, e);\n        }\n\n        return !1;\n      } : function (b, c, i) {\n        var j,\n            k,\n            l,\n            m = [w, h];\n\n        if (i) {\n          while (b = b[d]) {\n            if ((1 === b.nodeType || g) && a(b, c, i)) return !0;\n          }\n        } else while (b = b[d]) {\n          if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {\n            if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];\n            if (k[f] = m, m[2] = a(b, c, i)) return !0;\n          }\n        }\n\n        return !1;\n      };\n    }\n\n    function ua(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) {\n          if (!a[e](b, c, d)) return !1;\n        }\n\n        return !0;\n      } : a[0];\n    }\n\n    function va(a, b, c) {\n      for (var d = 0, e = b.length; d < e; d++) {\n        ga(a, b[d], c);\n      }\n\n      return c;\n    }\n\n    function wa(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {\n        (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));\n      }\n\n      return g;\n    }\n\n    function xa(a, b, c, d, e, f) {\n      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || va(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : wa(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = wa(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) {\n            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n          }\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) {\n                (l = r[k]) && j.push(q[k] = l);\n              }\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) {\n              (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n            }\n          }\n        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);\n      });\n    }\n\n    function ya(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = ta(function (a) {\n        return a === b;\n      }, h, !0), l = ta(function (a) {\n        return I(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n        return b = null, e;\n      }]; i < f; i++) {\n        if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {\n          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n            for (e = ++i; e < f; e++) {\n              if (d.relative[a[e].type]) break;\n            }\n\n            return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({\n              value: \" \" === a[i - 2].type ? \"*\" : \"\"\n            })).replace(P, \"$1\"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));\n          }\n\n          m.push(c);\n        }\n      }\n\n      return ua(m);\n    }\n\n    function za(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function f(_f, g, h, i, k) {\n        var l,\n            o,\n            q,\n            r = 0,\n            s = \"0\",\n            t = _f && [],\n            u = [],\n            v = j,\n            x = _f || e && d.find.TAG(\"*\", k),\n            y = w += null == v ? 1 : Math.random() || .1,\n            z = x.length;\n\n        for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {\n          if (e && l) {\n            o = 0, g || l.ownerDocument === n || (m(l), h = !p);\n\n            while (q = a[o++]) {\n              if (q(l, g || n, h)) {\n                i.push(l);\n                break;\n              }\n            }\n\n            k && (w = y);\n          }\n\n          c && ((l = !q && l) && r--, _f && t.push(l));\n        }\n\n        if (r += s, c && s !== r) {\n          o = 0;\n\n          while (q = b[o++]) {\n            q(t, u, g, h);\n          }\n\n          if (_f) {\n            if (r > 0) while (s--) {\n              t[s] || u[s] || (u[s] = E.call(i));\n            }\n            u = wa(u);\n          }\n\n          G.apply(i, u), k && !_f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);\n        }\n\n        return k && (w = y, j = v), t;\n      };\n\n      return c ? ia(f) : f;\n    }\n\n    return h = ga.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) {\n          f = ya(b[c]), f[u] ? d.push(f) : e.push(f);\n        }\n\n        f = A(a, za(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = ga.select = function (a, b, c, e) {\n      var f,\n          i,\n          j,\n          k,\n          l,\n          m = \"function\" == typeof a && a,\n          n = !e && g(a = m.selector || a);\n\n      if (c = c || [], 1 === n.length) {\n        if (i = n[0] = n[0].slice(0), i.length > 2 && \"ID\" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {\n          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;\n          m && (b = b.parentNode), a = a.slice(i.shift().value.length);\n        }\n\n        f = V.needsContext.test(a) ? 0 : i.length;\n\n        while (f--) {\n          if (j = i[f], d.relative[k = j.type]) break;\n\n          if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {\n            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;\n            break;\n          }\n        }\n      }\n\n      return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"fieldset\"));\n    }), ja(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || ka(\"type|href|height|width\", function (a, b, c) {\n      if (!c) return a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ja(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || ka(\"value\", function (a, b, c) {\n      if (!c && \"input\" === a.nodeName.toLowerCase()) return a.defaultValue;\n    }), ja(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || ka(J, function (a, b, c) {\n      var d;\n      if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), ga;\n  }(a);\n\n  r.find = x, r.expr = x.selectors, r.expr[\":\"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;\n\n  var y = function y(a, b, c) {\n    var d = [],\n        e = void 0 !== c;\n\n    while ((a = a[b]) && 9 !== a.nodeType) {\n      if (1 === a.nodeType) {\n        if (e && r(a).is(c)) break;\n        d.push(a);\n      }\n    }\n\n    return d;\n  },\n      z = function z(a, b) {\n    for (var c = []; a; a = a.nextSibling) {\n      1 === a.nodeType && a !== b && c.push(a);\n    }\n\n    return c;\n  },\n      A = r.expr.match.needsContext;\n\n  function B(a, b) {\n    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n  }\n\n  var C = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i,\n      D = /^.[^:#\\[\\.,]*$/;\n\n  function E(a, b, c) {\n    return r.isFunction(b) ? r.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    }) : b.nodeType ? r.grep(a, function (a) {\n      return a === b !== c;\n    }) : \"string\" != typeof b ? r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c;\n    }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c && 1 === a.nodeType;\n    }));\n  }\n\n  r.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, r.fn.extend({\n    find: function find(a) {\n      var b,\n          c,\n          d = this.length,\n          e = this;\n      if (\"string\" != typeof a) return this.pushStack(r(a).filter(function () {\n        for (b = 0; b < d; b++) {\n          if (r.contains(e[b], this)) return !0;\n        }\n      }));\n\n      for (c = this.pushStack([]), b = 0; b < d; b++) {\n        r.find(a, e[b], c);\n      }\n\n      return d > 1 ? r.uniqueSort(c) : c;\n    },\n    filter: function filter(a) {\n      return this.pushStack(E(this, a || [], !1));\n    },\n    not: function not(a) {\n      return this.pushStack(E(this, a || [], !0));\n    },\n    is: function is(a) {\n      return !!E(this, \"string\" == typeof a && A.test(a) ? r(a) : a || [], !1).length;\n    }\n  });\n\n  var F,\n      G = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      H = r.fn.init = function (a, b, c) {\n    var e, f;\n    if (!a) return this;\n\n    if (c = c || F, \"string\" == typeof a) {\n      if (e = \"<\" === a[0] && \">\" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);\n\n      if (e[1]) {\n        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) {\n          r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);\n        }\n        return this;\n      }\n\n      return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;\n    }\n\n    return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);\n  };\n\n  H.prototype = r.fn, F = r(d);\n  var I = /^(?:parents|prev(?:Until|All))/,\n      J = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  r.fn.extend({\n    has: function has(a) {\n      var b = r(a, this),\n          c = b.length;\n      return this.filter(function () {\n        for (var a = 0; a < c; a++) {\n          if (r.contains(this, b[a])) return !0;\n        }\n      });\n    },\n    closest: function closest(a, b) {\n      var c,\n          d = 0,\n          e = this.length,\n          f = [],\n          g = \"string\" != typeof a && r(a);\n      if (!A.test(a)) for (; d < e; d++) {\n        for (c = this[d]; c && c !== b; c = c.parentNode) {\n          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {\n            f.push(c);\n            break;\n          }\n        }\n      }\n      return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);\n    },\n    index: function index(a) {\n      return a ? \"string\" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(a, b) {\n      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));\n    },\n    addBack: function addBack(a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function K(a, b) {\n    while ((a = a[b]) && 1 !== a.nodeType) {\n      ;\n    }\n\n    return a;\n  }\n\n  r.each({\n    parent: function parent(a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function parents(a) {\n      return y(a, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(a, b, c) {\n      return y(a, \"parentNode\", c);\n    },\n    next: function next(a) {\n      return K(a, \"nextSibling\");\n    },\n    prev: function prev(a) {\n      return K(a, \"previousSibling\");\n    },\n    nextAll: function nextAll(a) {\n      return y(a, \"nextSibling\");\n    },\n    prevAll: function prevAll(a) {\n      return y(a, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(a, b, c) {\n      return y(a, \"nextSibling\", c);\n    },\n    prevUntil: function prevUntil(a, b, c) {\n      return y(a, \"previousSibling\", c);\n    },\n    siblings: function siblings(a) {\n      return z((a.parentNode || {}).firstChild, a);\n    },\n    children: function children(a) {\n      return z(a.firstChild);\n    },\n    contents: function contents(a) {\n      return B(a, \"iframe\") ? a.contentDocument : (B(a, \"template\") && (a = a.content || a), r.merge([], a.childNodes));\n    }\n  }, function (a, b) {\n    r.fn[a] = function (c, d) {\n      var e = r.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);\n    };\n  });\n  var L = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function M(a) {\n    var b = {};\n    return r.each(a.match(L) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  r.Callbacks = function (a) {\n    a = \"string\" == typeof a ? M(a) : r.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f = [],\n        g = [],\n        h = -1,\n        i = function i() {\n      for (e = e || a.once, d = b = !0; g.length; h = -1) {\n        c = g.shift();\n\n        while (++h < f.length) {\n          f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);\n        }\n      }\n\n      a.memory || (c = !1), b = !1, e && (f = c ? [] : \"\");\n    },\n        j = {\n      add: function add() {\n        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {\n          r.each(b, function (b, c) {\n            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && \"string\" !== r.type(c) && d(c);\n          });\n        }(arguments), c && !b && i()), this;\n      },\n      remove: function remove() {\n        return r.each(arguments, function (a, b) {\n          var c;\n\n          while ((c = r.inArray(b, f, c)) > -1) {\n            f.splice(c, 1), c <= h && h--;\n          }\n        }), this;\n      },\n      has: function has(a) {\n        return a ? r.inArray(a, f) > -1 : f.length > 0;\n      },\n      empty: function empty() {\n        return f && (f = []), this;\n      },\n      disable: function disable() {\n        return e = g = [], f = c = \"\", this;\n      },\n      disabled: function disabled() {\n        return !f;\n      },\n      lock: function lock() {\n        return e = g = [], c || b || (f = c = \"\"), this;\n      },\n      locked: function locked() {\n        return !!e;\n      },\n      fireWith: function fireWith(a, c) {\n        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;\n      },\n      fire: function fire() {\n        return j.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!d;\n      }\n    };\n\n    return j;\n  };\n\n  function N(a) {\n    return a;\n  }\n\n  function O(a) {\n    throw a;\n  }\n\n  function P(a, b, c, d) {\n    var e;\n\n    try {\n      a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));\n    } catch (a) {\n      c.apply(void 0, [a]);\n    }\n  }\n\n  r.extend({\n    Deferred: function Deferred(b) {\n      var c = [[\"notify\", \"progress\", r.Callbacks(\"memory\"), r.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          d = \"pending\",\n          e = {\n        state: function state() {\n          return d;\n        },\n        always: function always() {\n          return f.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function _catch(a) {\n          return e.then(null, a);\n        },\n        pipe: function pipe() {\n          var a = arguments;\n          return r.Deferred(function (b) {\n            r.each(c, function (c, d) {\n              var e = r.isFunction(a[d[4]]) && a[d[4]];\n              f[d[1]](function () {\n                var a = e && e.apply(this, arguments);\n                a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + \"With\"](this, e ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        then: function then(b, d, e) {\n          var f = 0;\n\n          function g(b, c, d, e) {\n            return function () {\n              var h = this,\n                  i = arguments,\n                  j = function j() {\n                var a, j;\n\n                if (!(b < f)) {\n                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  j = a && (\"object\" == _typeof(a) || \"function\" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));\n                }\n              },\n                  k = e ? j : function () {\n                try {\n                  j();\n                } catch (a) {\n                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));\n                }\n              };\n\n              b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));\n            };\n          }\n\n          return r.Deferred(function (a) {\n            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));\n          }).promise();\n        },\n        promise: function promise(a) {\n          return null != a ? r.extend(a, e) : e;\n        }\n      },\n          f = {};\n      return r.each(c, function (a, b) {\n        var g = b[2],\n            h = b[5];\n        e[b[1]] = g.add, h && g.add(function () {\n          d = h;\n        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {\n          return f[b[0] + \"With\"](this === f ? void 0 : this, arguments), this;\n        }, f[b[0] + \"With\"] = g.fireWith;\n      }), e.promise(f), b && b.call(f, f), f;\n    },\n    when: function when(a) {\n      var b = arguments.length,\n          c = b,\n          d = Array(c),\n          e = f.call(arguments),\n          g = r.Deferred(),\n          h = function h(a) {\n        return function (c) {\n          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);\n        };\n      };\n\n      if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), \"pending\" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();\n\n      while (c--) {\n        P(e[c], h(c), g.reject);\n      }\n\n      return g.promise();\n    }\n  });\n  var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  r.Deferred.exceptionHook = function (b, c) {\n    a.console && a.console.warn && b && Q.test(b.name) && a.console.warn(\"jQuery.Deferred exception: \" + b.message, b.stack, c);\n  }, r.readyException = function (b) {\n    a.setTimeout(function () {\n      throw b;\n    });\n  };\n  var R = r.Deferred();\n  r.fn.ready = function (a) {\n    return R.then(a)[\"catch\"](function (a) {\n      r.readyException(a);\n    }), this;\n  }, r.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(a) {\n      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));\n    }\n  }), r.ready.then = R.then;\n\n  function S() {\n    d.removeEventListener(\"DOMContentLoaded\", S), a.removeEventListener(\"load\", S), r.ready();\n  }\n\n  \"complete\" === d.readyState || \"loading\" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener(\"DOMContentLoaded\", S), a.addEventListener(\"load\", S));\n\n  var T = function T(a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === r.type(c)) {\n      e = !0;\n\n      for (h in c) {\n        T(a, b, h, c[h], !0, f, g);\n      }\n    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {\n      return j.call(r(a), c);\n    })), b)) for (; h < i; h++) {\n      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n    }\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  },\n      U = function U(a) {\n    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;\n  };\n\n  function V() {\n    this.expando = r.expando + V.uid++;\n  }\n\n  V.uid = 1, V.prototype = {\n    cache: function cache(a) {\n      var b = a[this.expando];\n      return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {\n        value: b,\n        configurable: !0\n      }))), b;\n    },\n    set: function set(a, b, c) {\n      var d,\n          e = this.cache(a);\n      if (\"string\" == typeof b) e[r.camelCase(b)] = c;else for (d in b) {\n        e[r.camelCase(d)] = b[d];\n      }\n      return e;\n    },\n    get: function get(a, b) {\n      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];\n    },\n    access: function access(a, b, c) {\n      return void 0 === b || b && \"string\" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);\n    },\n    remove: function remove(a, b) {\n      var c,\n          d = a[this.expando];\n\n      if (void 0 !== d) {\n        if (void 0 !== b) {\n          Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;\n\n          while (c--) {\n            delete d[b[c]];\n          }\n        }\n\n        (void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);\n      }\n    },\n    hasData: function hasData(a) {\n      var b = a[this.expando];\n      return void 0 !== b && !r.isEmptyObject(b);\n    }\n  };\n  var W = new V(),\n      X = new V(),\n      Y = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      Z = /[A-Z]/g;\n\n  function $(a) {\n    return \"true\" === a || \"false\" !== a && (\"null\" === a ? null : a === +a + \"\" ? +a : Y.test(a) ? JSON.parse(a) : a);\n  }\n\n  function _(a, b, c) {\n    var d;\n    if (void 0 === c && 1 === a.nodeType) if (d = \"data-\" + b.replace(Z, \"-$&\").toLowerCase(), c = a.getAttribute(d), \"string\" == typeof c) {\n      try {\n        c = $(c);\n      } catch (e) {}\n\n      X.set(a, b, c);\n    } else c = void 0;\n    return c;\n  }\n\n  r.extend({\n    hasData: function hasData(a) {\n      return X.hasData(a) || W.hasData(a);\n    },\n    data: function data(a, b, c) {\n      return X.access(a, b, c);\n    },\n    removeData: function removeData(a, b) {\n      X.remove(a, b);\n    },\n    _data: function _data(a, b, c) {\n      return W.access(a, b, c);\n    },\n    _removeData: function _removeData(a, b) {\n      W.remove(a, b);\n    }\n  }), r.fn.extend({\n    data: function data(a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, \"hasDataAttrs\"))) {\n          c = g.length;\n\n          while (c--) {\n            g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));\n          }\n\n          W.set(f, \"hasDataAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == _typeof(a) ? this.each(function () {\n        X.set(this, a);\n      }) : T(this, function (b) {\n        var c;\n\n        if (f && void 0 === b) {\n          if (c = X.get(f, a), void 0 !== c) return c;\n          if (c = _(f, a), void 0 !== c) return c;\n        } else this.each(function () {\n          X.set(this, a, b);\n        });\n      }, null, b, arguments.length > 1, null, !0);\n    },\n    removeData: function removeData(a) {\n      return this.each(function () {\n        X.remove(this, a);\n      });\n    }\n  }), r.extend({\n    queue: function queue(a, b, c) {\n      var d;\n      if (a) return b = (b || \"fx\") + \"queue\", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];\n    },\n    dequeue: function dequeue(a, b) {\n      b = b || \"fx\";\n\n      var c = r.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = r._queueHooks(a, b),\n          g = function g() {\n        r.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function _queueHooks(a, b) {\n      var c = b + \"queueHooks\";\n      return W.get(a, c) || W.access(a, c, {\n        empty: r.Callbacks(\"once memory\").add(function () {\n          W.remove(a, [b + \"queue\", c]);\n        })\n      });\n    }\n  }), r.fn.extend({\n    queue: function queue(a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = r.queue(this, a, b);\n        r._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && r.dequeue(this, a);\n      });\n    },\n    dequeue: function dequeue(a) {\n      return this.each(function () {\n        r.dequeue(this, a);\n      });\n    },\n    clearQueue: function clearQueue(a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function promise(a, b) {\n      var c,\n          d = 1,\n          e = r.Deferred(),\n          f = this,\n          g = this.length,\n          h = function h() {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) {\n        c = W.get(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n      }\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var aa = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      ba = new RegExp(\"^(?:([+-])=|)(\" + aa + \")([a-z%]*)$\", \"i\"),\n      ca = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      da = function da(a, b) {\n    return a = b || a, \"none\" === a.style.display || \"\" === a.style.display && r.contains(a.ownerDocument, a) && \"none\" === r.css(a, \"display\");\n  },\n      ea = function ea(a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) {\n      g[f] = a.style[f], a.style[f] = b[f];\n    }\n\n    e = c.apply(a, d || []);\n\n    for (f in b) {\n      a.style[f] = g[f];\n    }\n\n    return e;\n  };\n\n  function fa(a, b, c, d) {\n    var e,\n        f = 1,\n        g = 20,\n        h = d ? function () {\n      return d.cur();\n    } : function () {\n      return r.css(a, b, \"\");\n    },\n        i = h(),\n        j = c && c[3] || (r.cssNumber[b] ? \"\" : \"px\"),\n        k = (r.cssNumber[b] || \"px\" !== j && +i) && ba.exec(r.css(a, b));\n\n    if (k && k[3] !== j) {\n      j = j || k[3], c = c || [], k = +i || 1;\n\n      do {\n        f = f || \".5\", k /= f, r.style(a, b, k + j);\n      } while (f !== (f = h() / i) && 1 !== f && --g);\n    }\n\n    return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;\n  }\n\n  var ga = {};\n\n  function ha(a) {\n    var b,\n        c = a.ownerDocument,\n        d = a.nodeName,\n        e = ga[d];\n    return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, \"display\"), b.parentNode.removeChild(b), \"none\" === e && (e = \"block\"), ga[d] = e, e);\n  }\n\n  function ia(a, b) {\n    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {\n      d = a[f], d.style && (c = d.style.display, b ? (\"none\" === c && (e[f] = W.get(d, \"display\") || null, e[f] || (d.style.display = \"\")), \"\" === d.style.display && da(d) && (e[f] = ha(d))) : \"none\" !== c && (e[f] = \"none\", W.set(d, \"display\", c)));\n    }\n\n    for (f = 0; f < g; f++) {\n      null != e[f] && (a[f].style.display = e[f]);\n    }\n\n    return a;\n  }\n\n  r.fn.extend({\n    show: function show() {\n      return ia(this, !0);\n    },\n    hide: function hide() {\n      return ia(this);\n    },\n    toggle: function toggle(a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        da(this) ? r(this).show() : r(this).hide();\n      });\n    }\n  });\n  var ja = /^(?:checkbox|radio)$/i,\n      ka = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i,\n      la = /^$|\\/(?:java|ecma)script/i,\n      ma = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;\n\n  function na(a, b) {\n    var c;\n    return c = \"undefined\" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || \"*\") : \"undefined\" != typeof a.querySelectorAll ? a.querySelectorAll(b || \"*\") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;\n  }\n\n  function oa(a, b) {\n    for (var c = 0, d = a.length; c < d; c++) {\n      W.set(a[c], \"globalEval\", !b || W.get(b[c], \"globalEval\"));\n    }\n  }\n\n  var pa = /<|&#?\\w+;/;\n\n  function qa(a, b, c, d, e) {\n    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {\n      if (f = a[n], f || 0 === f) if (\"object\" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {\n        g = g || l.appendChild(b.createElement(\"div\")), h = (ka.exec(f) || [\"\", \"\"])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];\n\n        while (k--) {\n          g = g.lastChild;\n        }\n\n        r.merge(m, g.childNodes), g = l.firstChild, g.textContent = \"\";\n      } else m.push(b.createTextNode(f));\n    }\n\n    l.textContent = \"\", n = 0;\n\n    while (f = m[n++]) {\n      if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), \"script\"), j && oa(g), c) {\n        k = 0;\n\n        while (f = g[k++]) {\n          la.test(f.type || \"\") && c.push(f);\n        }\n      }\n    }\n\n    return l;\n  }\n\n  !function () {\n    var a = d.createDocumentFragment(),\n        b = a.appendChild(d.createElement(\"div\")),\n        c = d.createElement(\"input\");\n    c.setAttribute(\"type\", \"radio\"), c.setAttribute(\"checked\", \"checked\"), c.setAttribute(\"name\", \"t\"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = \"<textarea>x</textarea>\", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;\n  }();\n  var ra = d.documentElement,\n      sa = /^key/,\n      ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      ua = /^([^.]*)(?:\\.(.+)|)/;\n\n  function va() {\n    return !0;\n  }\n\n  function wa() {\n    return !1;\n  }\n\n  function xa() {\n    try {\n      return d.activeElement;\n    } catch (a) {}\n  }\n\n  function ya(a, b, c, d, e, f) {\n    var g, h;\n\n    if (\"object\" == _typeof(b)) {\n      \"string\" != typeof c && (d = d || c, c = void 0);\n\n      for (h in b) {\n        ya(a, h, c, d, b[h], f);\n      }\n\n      return a;\n    }\n\n    if (null == d && null == e ? (e = c, d = c = void 0) : null == e && (\"string\" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;\n    return 1 === f && (g = e, e = function e(a) {\n      return r().off(a), g.apply(this, arguments);\n    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {\n      r.event.add(this, b, e, d, c);\n    });\n  }\n\n  r.event = {\n    global: {},\n    add: function add(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.get(a);\n\n      if (q) {\n        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {\n          return \"undefined\" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;\n        }), b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) {\n          h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({\n            type: n,\n            origType: p,\n            data: d,\n            handler: c,\n            guid: c.guid,\n            selector: e,\n            needsContext: e && r.expr.match.needsContext.test(e),\n            namespace: o.join(\".\")\n          }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);\n        }\n      }\n    },\n    remove: function remove(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.hasData(a) && W.get(a);\n\n      if (q && (i = q.events)) {\n        b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) {\n          if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n) {\n            l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + o.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), g = f = m.length;\n\n            while (f--) {\n              k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && (\"**\" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));\n            }\n\n            g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);\n          } else for (n in i) {\n            r.event.remove(a, n + b[j], c, d, !0);\n          }\n        }\n\n        r.isEmptyObject(i) && W.remove(a, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(a) {\n      var b = r.event.fix(a),\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = new Array(arguments.length),\n          j = (W.get(this, \"events\") || {})[b.type] || [],\n          k = r.event.special[b.type] || {};\n\n      for (i[0] = b, c = 1; c < arguments.length; c++) {\n        i[c] = arguments[c];\n      }\n\n      if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {\n        h = r.event.handlers.call(this, b, j), c = 0;\n\n        while ((f = h[c++]) && !b.isPropagationStopped()) {\n          b.currentTarget = f.elem, d = 0;\n\n          while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {\n            b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));\n          }\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, b), b.result;\n      }\n    },\n    handlers: function handlers(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = [],\n          i = b.delegateCount,\n          j = a.target;\n      if (i && j.nodeType && !(\"click\" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) {\n        if (1 === j.nodeType && (\"click\" !== a.type || j.disabled !== !0)) {\n          for (f = [], g = {}, c = 0; c < i; c++) {\n            d = b[c], e = d.selector + \" \", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);\n          }\n\n          f.length && h.push({\n            elem: j,\n            handlers: f\n          });\n        }\n      }\n      return j = this, i < b.length && h.push({\n        elem: j,\n        handlers: b.slice(i)\n      }), h;\n    },\n    addProp: function addProp(a, b) {\n      Object.defineProperty(r.Event.prototype, a, {\n        enumerable: !0,\n        configurable: !0,\n        get: r.isFunction(b) ? function () {\n          if (this.originalEvent) return b(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[a];\n        },\n        set: function set(b) {\n          Object.defineProperty(this, a, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: b\n          });\n        }\n      });\n    },\n    fix: function fix(a) {\n      return a[r.expando] ? a : new r.Event(a);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function trigger() {\n          if (this !== xa() && this.focus) return this.focus(), !1;\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          if (this === xa() && this.blur) return this.blur(), !1;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function trigger() {\n          if (\"checkbox\" === this.type && this.click && B(this, \"input\")) return this.click(), !1;\n        },\n        _default: function _default(a) {\n          return B(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    }\n  }, r.removeEvent = function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c);\n  }, r.Event = function (a, b) {\n    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);\n  }, r.Event.prototype = {\n    constructor: r.Event,\n    isDefaultPrevented: wa,\n    isPropagationStopped: wa,\n    isImmediatePropagationStopped: wa,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.originalEvent;\n      this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, r.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(a) {\n      var b = a.button;\n      return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;\n    }\n  }, r.event.addProp), r.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    r.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function handle(a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), r.fn.extend({\n    on: function on(a, b, c, d) {\n      return ya(this, a, b, c, d);\n    },\n    one: function one(a, b, c, d) {\n      return ya(this, a, b, c, d, 1);\n    },\n    off: function off(a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == _typeof(a)) {\n        for (e in a) {\n          this.off(e, b, a[e]);\n        }\n\n        return this;\n      }\n\n      return b !== !1 && \"function\" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {\n        r.event.remove(this, a, c, b);\n      });\n    }\n  });\n  var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      Aa = /<script|<style|<link/i,\n      Ba = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      Ca = /^true\\/(.*)/,\n      Da = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Ea(a, b) {\n    return B(a, \"table\") && B(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? r(\">tbody\", a)[0] || a : a;\n  }\n\n  function Fa(a) {\n    return a.type = (null !== a.getAttribute(\"type\")) + \"/\" + a.type, a;\n  }\n\n  function Ga(a) {\n    var b = Ca.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function Ha(a, b) {\n    var c, d, e, f, g, h, i, j;\n\n    if (1 === b.nodeType) {\n      if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {\n        delete g.handle, g.events = {};\n\n        for (e in j) {\n          for (c = 0, d = j[e].length; c < d; c++) {\n            r.event.add(b, e, j[e][c]);\n          }\n        }\n      }\n\n      X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));\n    }\n  }\n\n  function Ia(a, b) {\n    var c = b.nodeName.toLowerCase();\n    \"input\" === c && ja.test(a.type) ? b.checked = a.checked : \"input\" !== c && \"textarea\" !== c || (b.defaultValue = a.defaultValue);\n  }\n\n  function Ja(a, b, c, d) {\n    b = g.apply([], b);\n    var e,\n        f,\n        h,\n        i,\n        j,\n        k,\n        l = 0,\n        m = a.length,\n        n = m - 1,\n        q = b[0],\n        s = r.isFunction(q);\n    if (s || m > 1 && \"string\" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {\n      var f = a.eq(e);\n      s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);\n    });\n\n    if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {\n      for (h = r.map(na(e, \"script\"), Fa), i = h.length; l < m; l++) {\n        j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, \"script\"))), c.call(a[l], j, l);\n      }\n\n      if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) {\n        j = h[l], la.test(j.type || \"\") && !W.access(j, \"globalEval\") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, \"\"), k));\n      }\n    }\n\n    return a;\n  }\n\n  function Ka(a, b, c) {\n    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {\n      c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, \"script\")), d.parentNode.removeChild(d));\n    }\n\n    return a;\n  }\n\n  r.extend({\n    htmlPrefilter: function htmlPrefilter(a) {\n      return a.replace(za, \"<$1></$2>\");\n    },\n    clone: function clone(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h = a.cloneNode(!0),\n          i = r.contains(a.ownerDocument, a);\n      if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) {\n        Ia(f[d], g[d]);\n      }\n      if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) {\n        Ha(f[d], g[d]);\n      } else Ha(a, h);\n      return g = na(h, \"script\"), g.length > 0 && oa(g, !i && na(a, \"script\")), h;\n    },\n    cleanData: function cleanData(a) {\n      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {\n        if (U(c)) {\n          if (b = c[W.expando]) {\n            if (b.events) for (d in b.events) {\n              e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);\n            }\n            c[W.expando] = void 0;\n          }\n\n          c[X.expando] && (c[X.expando] = void 0);\n        }\n      }\n    }\n  }), r.fn.extend({\n    detach: function detach(a) {\n      return Ka(this, a, !0);\n    },\n    remove: function remove(a) {\n      return Ka(this, a);\n    },\n    text: function text(a) {\n      return T(this, function (a) {\n        return void 0 === a ? r.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);\n        });\n      }, null, a, arguments.length);\n    },\n    append: function append() {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function after() {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var a, b = 0; null != (a = this[b]); b++) {\n        1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(a, b) {\n      return a = null != a && a, b = null == b ? a : b, this.map(function () {\n        return r.clone(this, a, b);\n      });\n    },\n    html: function html(a) {\n      return T(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;\n\n        if (\"string\" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || [\"\", \"\"])[1].toLowerCase()]) {\n          a = r.htmlPrefilter(a);\n\n          try {\n            for (; c < d; c++) {\n              b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);\n            }\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var a = [];\n      return Ja(this, arguments, function (b) {\n        var c = this.parentNode;\n        r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));\n      }, a);\n    }\n  }), r.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    r.fn[a] = function (a) {\n      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {\n        c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());\n      }\n\n      return this.pushStack(d);\n    };\n  });\n\n  var La = /^margin/,\n      Ma = new RegExp(\"^(\" + aa + \")(?!px)[a-z%]+$\", \"i\"),\n      Na = function Na(b) {\n    var c = b.ownerDocument.defaultView;\n    return c && c.opener || (c = a), c.getComputedStyle(b);\n  };\n\n  !function () {\n    function b() {\n      if (i) {\n        i.style.cssText = \"box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\", i.innerHTML = \"\", ra.appendChild(h);\n        var b = a.getComputedStyle(i);\n        c = \"1%\" !== b.top, g = \"2px\" === b.marginLeft, e = \"4px\" === b.width, i.style.marginRight = \"50%\", f = \"4px\" === b.marginRight, ra.removeChild(h), i = null;\n      }\n    }\n\n    var c,\n        e,\n        f,\n        g,\n        h = d.createElement(\"div\"),\n        i = d.createElement(\"div\");\n    i.style && (i.style.backgroundClip = \"content-box\", i.cloneNode(!0).style.backgroundClip = \"\", o.clearCloneStyle = \"content-box\" === i.style.backgroundClip, h.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\", h.appendChild(i), r.extend(o, {\n      pixelPosition: function pixelPosition() {\n        return b(), c;\n      },\n      boxSizingReliable: function boxSizingReliable() {\n        return b(), e;\n      },\n      pixelMarginRight: function pixelMarginRight() {\n        return b(), f;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        return b(), g;\n      }\n    }));\n  }();\n\n  function Oa(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], \"\" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + \"\" : g;\n  }\n\n  function Pa(a, b) {\n    return {\n      get: function get() {\n        return a() ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  var Qa = /^(none|table(?!-c[ea]).+)/,\n      Ra = /^--/,\n      Sa = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Ta = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Ua = [\"Webkit\", \"Moz\", \"ms\"],\n      Va = d.createElement(\"div\").style;\n\n  function Wa(a) {\n    if (a in Va) return a;\n    var b = a[0].toUpperCase() + a.slice(1),\n        c = Ua.length;\n\n    while (c--) {\n      if (a = Ua[c] + b, a in Va) return a;\n    }\n  }\n\n  function Xa(a) {\n    var b = r.cssProps[a];\n    return b || (b = r.cssProps[a] = Wa(a) || a), b;\n  }\n\n  function Ya(a, b, c) {\n    var d = ba.exec(b);\n    return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || \"px\") : b;\n  }\n\n  function Za(a, b, c, d, e) {\n    var f,\n        g = 0;\n\n    for (f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0; f < 4; f += 2) {\n      \"margin\" === c && (g += r.css(a, c + ca[f], !0, e)), d ? (\"content\" === c && (g -= r.css(a, \"padding\" + ca[f], !0, e)), \"margin\" !== c && (g -= r.css(a, \"border\" + ca[f] + \"Width\", !0, e))) : (g += r.css(a, \"padding\" + ca[f], !0, e), \"padding\" !== c && (g += r.css(a, \"border\" + ca[f] + \"Width\", !0, e)));\n    }\n\n    return g;\n  }\n\n  function $a(a, b, c) {\n    var d,\n        e = Na(a),\n        f = Oa(a, b, e),\n        g = \"border-box\" === r.css(a, \"boxSizing\", !1, e);\n    return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), \"auto\" === f && (f = a[\"offset\" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? \"border\" : \"content\"), d, e) + \"px\");\n  }\n\n  r.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(a, b) {\n          if (b) {\n            var c = Oa(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": \"cssFloat\"\n    },\n    style: function style(a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = r.camelCase(b),\n            i = Ra.test(b),\n            j = a.style;\n        return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = _typeof(c), \"string\" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = \"number\"), null != c && c === c && (\"number\" === f && (c += e && e[3] || (r.cssNumber[h] ? \"\" : \"px\")), o.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (j[b] = \"inherit\"), g && \"set\" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);\n      }\n    },\n    css: function css(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = r.camelCase(b),\n          i = Ra.test(b);\n      return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && \"get\" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), \"normal\" === e && b in Ta && (e = Ta[b]), \"\" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;\n    }\n  }), r.each([\"height\", \"width\"], function (a, b) {\n    r.cssHooks[b] = {\n      get: function get(a, c, d) {\n        if (c) return !Qa.test(r.css(a, \"display\")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {\n          return $a(a, b, d);\n        });\n      },\n      set: function set(a, c, d) {\n        var e,\n            f = d && Na(a),\n            g = d && Za(a, b, d, \"border-box\" === r.css(a, \"boxSizing\", !1, f), f);\n        return g && (e = ba.exec(c)) && \"px\" !== (e[3] || \"px\") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);\n      }\n    };\n  }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {\n    if (b) return (parseFloat(Oa(a, \"marginLeft\")) || a.getBoundingClientRect().left - ea(a, {\n      marginLeft: 0\n    }, function () {\n      return a.getBoundingClientRect().left;\n    })) + \"px\";\n  }), r.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    r.cssHooks[a + b] = {\n      expand: function expand(c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; d < 4; d++) {\n          e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];\n        }\n\n        return e;\n      }\n    }, La.test(a) || (r.cssHooks[a + b].set = Ya);\n  }), r.fn.extend({\n    css: function css(a, b) {\n      return T(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (Array.isArray(b)) {\n          for (d = Na(a), e = b.length; g < e; g++) {\n            f[b[g]] = r.css(a, b[g], !1, d);\n          }\n\n          return f;\n        }\n\n        return void 0 !== c ? r.style(a, b, c) : r.css(a, b);\n      }, a, b, arguments.length > 1);\n    }\n  }), r.fn.delay = function (b, c) {\n    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || \"fx\", this.queue(c, function (c, d) {\n      var e = a.setTimeout(c, b);\n\n      d.stop = function () {\n        a.clearTimeout(e);\n      };\n    });\n  }, function () {\n    var a = d.createElement(\"input\"),\n        b = d.createElement(\"select\"),\n        c = b.appendChild(d.createElement(\"option\"));\n    a.type = \"checkbox\", o.checkOn = \"\" !== a.value, o.optSelected = c.selected, a = d.createElement(\"input\"), a.value = \"t\", a.type = \"radio\", o.radioValue = \"t\" === a.value;\n  }();\n\n  var _a,\n      ab = r.expr.attrHandle;\n\n  r.fn.extend({\n    attr: function attr(a, b) {\n      return T(this, r.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(a) {\n      return this.each(function () {\n        r.removeAttr(this, a);\n      });\n    }\n  }), r.extend({\n    attr: function attr(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return \"undefined\" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? _a : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + \"\"), c) : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));\n    },\n    attrHooks: {\n      type: {\n        set: function set(a, b) {\n          if (!o.radioValue && \"radio\" === b && B(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(a, b) {\n      var c,\n          d = 0,\n          e = b && b.match(L);\n      if (e && 1 === a.nodeType) while (c = e[d++]) {\n        a.removeAttribute(c);\n      }\n    }\n  }), _a = {\n    set: function set(a, b, c) {\n      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;\n    }\n  }, r.each(r.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = ab[b] || r.find.attr;\n\n    ab[b] = function (a, b, d) {\n      var e,\n          f,\n          g = b.toLowerCase();\n      return d || (f = ab[g], ab[g] = e, e = null != c(a, b, d) ? g : null, ab[g] = f), e;\n    };\n  });\n  var bb = /^(?:input|select|textarea|button)$/i,\n      cb = /^(?:a|area)$/i;\n  r.fn.extend({\n    prop: function prop(a, b) {\n      return T(this, r.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function removeProp(a) {\n      return this.each(function () {\n        delete this[r.propFix[a] || a];\n      });\n    }\n  }), r.extend({\n    prop: function prop(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(a) {\n          var b = r.find.attr(a, \"tabindex\");\n          return b ? parseInt(b, 10) : bb.test(a.nodeName) || cb.test(a.nodeName) && a.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), o.optSelected || (r.propHooks.selected = {\n    get: function get(a) {\n      var b = a.parentNode;\n      return b && b.parentNode && b.parentNode.selectedIndex, null;\n    },\n    set: function set(a) {\n      var b = a.parentNode;\n      b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);\n    }\n  }), r.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    r.propFix[this.toLowerCase()] = this;\n  });\n\n  function db(a) {\n    var b = a.match(L) || [];\n    return b.join(\" \");\n  }\n\n  function eb(a) {\n    return a.getAttribute && a.getAttribute(\"class\") || \"\";\n  }\n\n  r.fn.extend({\n    addClass: function addClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).addClass(a.call(this, b, eb(this)));\n      });\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) {\n          if (e = eb(c), d = 1 === c.nodeType && \" \" + db(e) + \" \") {\n            g = 0;\n\n            while (f = b[g++]) {\n              d.indexOf(\" \" + f + \" \") < 0 && (d += f + \" \");\n            }\n\n            h = db(d), e !== h && c.setAttribute(\"class\", h);\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).removeClass(a.call(this, b, eb(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) {\n          if (e = eb(c), d = 1 === c.nodeType && \" \" + db(e) + \" \") {\n            g = 0;\n\n            while (f = b[g++]) {\n              while (d.indexOf(\" \" + f + \" \") > -1) {\n                d = d.replace(\" \" + f + \" \", \" \");\n              }\n            }\n\n            h = db(d), e !== h && c.setAttribute(\"class\", h);\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(a, b) {\n      var c = _typeof(a);\n\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {\n        r(this).toggleClass(a.call(this, c, eb(this), b), b);\n      }) : this.each(function () {\n        var b, d, e, f;\n\n        if (\"string\" === c) {\n          d = 0, e = r(this), f = a.match(L) || [];\n\n          while (b = f[d++]) {\n            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n          }\n        } else void 0 !== a && \"boolean\" !== c || (b = eb(this), b && W.set(this, \"__className__\", b), this.setAttribute && this.setAttribute(\"class\", b || a === !1 ? \"\" : W.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(a) {\n      var b,\n          c,\n          d = 0;\n      b = \" \" + a + \" \";\n\n      while (c = this[d++]) {\n        if (1 === c.nodeType && (\" \" + db(eb(c)) + \" \").indexOf(b) > -1) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var fb = /\\r/g;\n  r.fn.extend({\n    val: function val(a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : Array.isArray(e) && (e = r.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(fb, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), r.extend({\n    valHooks: {\n      option: {\n        get: function get(a) {\n          var b = r.find.attr(a, \"value\");\n          return null != b ? b : db(r.text(a));\n        }\n      },\n      select: {\n        get: function get(a) {\n          var b,\n              c,\n              d,\n              e = a.options,\n              f = a.selectedIndex,\n              g = \"select-one\" === a.type,\n              h = g ? null : [],\n              i = g ? f + 1 : e.length;\n\n          for (d = f < 0 ? i : g ? f : 0; d < i; d++) {\n            if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, \"optgroup\"))) {\n              if (b = r(c).val(), g) return b;\n              h.push(b);\n            }\n          }\n\n          return h;\n        },\n        set: function set(a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = r.makeArray(b),\n              g = e.length;\n\n          while (g--) {\n            d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);\n          }\n\n          return c || (a.selectedIndex = -1), f;\n        }\n      }\n    }\n  }), r.each([\"radio\", \"checkbox\"], function () {\n    r.valHooks[this] = {\n      set: function set(a, b) {\n        if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;\n      }\n    }, o.checkOn || (r.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  });\n  var gb = /^(?:focusinfocus|focusoutblur)$/;\n  r.extend(r.event, {\n    trigger: function trigger(b, c, e, f) {\n      var g,\n          h,\n          i,\n          j,\n          k,\n          m,\n          n,\n          o = [e || d],\n          p = l.call(b, \"type\") ? b.type : b,\n          q = l.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !gb.test(p + r.event.triggered) && (p.indexOf(\".\") > -1 && (q = p.split(\".\"), p = q.shift(), q.sort()), k = p.indexOf(\":\") < 0 && \"on\" + p, b = b[r.expando] ? b : new r.Event(p, \"object\" == _typeof(b) && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join(\".\"), b.rnamespace = b.namespace ? new RegExp(\"(^|\\\\.)\" + q.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {\n        if (!f && !n.noBubble && !r.isWindow(e)) {\n          for (j = n.delegateType || p, gb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {\n            o.push(h), i = h;\n          }\n\n          i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);\n        }\n\n        g = 0;\n\n        while ((h = o[g++]) && !b.isPropagationStopped()) {\n          b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, \"events\") || {})[b.type] && W.get(h, \"handle\"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());\n        }\n\n        return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;\n      }\n    },\n    simulate: function simulate(a, b, c) {\n      var d = r.extend(new r.Event(), c, {\n        type: a,\n        isSimulated: !0\n      });\n      r.event.trigger(d, null, b);\n    }\n  }), r.fn.extend({\n    trigger: function trigger(a, b) {\n      return this.each(function () {\n        r.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function triggerHandler(a, b) {\n      var c = this[0];\n      if (c) return r.event.trigger(a, b, c, !0);\n    }\n  }), r.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (a, b) {\n    r.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), r.fn.extend({\n    hover: function hover(a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    }\n  }), o.focusin = \"onfocusin\" in a, o.focusin || r.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function c(a) {\n      r.event.simulate(b, a.target, r.event.fix(a));\n    };\n\n    r.event.special[b] = {\n      setup: function setup() {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b);\n        e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);\n      },\n      teardown: function teardown() {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b) - 1;\n        e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));\n      }\n    };\n  });\n  var hb = /\\[\\]$/,\n      ib = /\\r?\\n/g,\n      jb = /^(?:submit|button|image|reset|file)$/i,\n      kb = /^(?:input|select|textarea|keygen)/i;\n\n  function lb(a, b, c, d) {\n    var e;\n    if (Array.isArray(b)) r.each(b, function (b, e) {\n      c || hb.test(a) ? d(a, e) : lb(a + \"[\" + (\"object\" == _typeof(e) && null != e ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== r.type(b)) d(a, b);else for (e in b) {\n      lb(a + \"[\" + e + \"]\", b[e], c, d);\n    }\n  }\n\n  r.param = function (a, b) {\n    var c,\n        d = [],\n        e = function e(a, b) {\n      var c = r.isFunction(b) ? b() : b;\n      d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(null == c ? \"\" : c);\n    };\n\n    if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) {\n      lb(c, a[c], b, e);\n    }\n    return d.join(\"&\");\n  }, r.fn.extend({\n    serialize: function serialize() {\n      return r.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var a = r.prop(this, \"elements\");\n        return a ? r.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !r(this).is(\":disabled\") && kb.test(this.nodeName) && !jb.test(a) && (this.checked || !ja.test(a));\n      }).map(function (a, b) {\n        var c = r(this).val();\n        return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(ib, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(ib, \"\\r\\n\")\n        };\n      }).get();\n    }\n  }), r.fn.extend({\n    wrapAll: function wrapAll(a) {\n      var b;\n      return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n        var a = this;\n\n        while (a.firstElementChild) {\n          a = a.firstElementChild;\n        }\n\n        return a;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(a) {\n      return r.isFunction(a) ? this.each(function (b) {\n        r(this).wrapInner(a.call(this, b));\n      }) : this.each(function () {\n        var b = r(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function wrap(a) {\n      var b = r.isFunction(a);\n      return this.each(function (c) {\n        r(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function unwrap(a) {\n      return this.parent(a).not(\"body\").each(function () {\n        r(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), r.expr.pseudos.hidden = function (a) {\n    return !r.expr.pseudos.visible(a);\n  }, r.expr.pseudos.visible = function (a) {\n    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);\n  }, o.createHTMLDocument = function () {\n    var a = d.implementation.createHTMLDocument(\"\").body;\n    return a.innerHTML = \"<form></form><form></form>\", 2 === a.childNodes.length;\n  }(), r.parseHTML = function (a, b, c) {\n    if (\"string\" != typeof a) return [];\n    \"boolean\" == typeof b && (c = b, b = !1);\n    var e, f, g;\n    return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(\"\"), e = b.createElement(\"base\"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));\n  }, r.offset = {\n    setOffset: function setOffset(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = r.css(a, \"position\"),\n          l = r(a),\n          m = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = r.css(a, \"top\"), i = r.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && (f + i).indexOf(\"auto\") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, m) : l.css(m);\n    }\n  }, r.fn.extend({\n    offset: function offset(a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        r.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d,\n          e,\n          f = this[0];\n      if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, {\n        top: d.top + e.pageYOffset - c.clientTop,\n        left: d.left + e.pageXOffset - c.clientLeft\n      }) : {\n        top: 0,\n        left: 0\n      };\n    },\n    position: function position() {\n      if (this[0]) {\n        var a,\n            b,\n            c = this[0],\n            d = {\n          top: 0,\n          left: 0\n        };\n        return \"fixed\" === r.css(c, \"position\") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], \"html\") || (d = a.offset()), d = {\n          top: d.top + r.css(a[0], \"borderTopWidth\", !0),\n          left: d.left + r.css(a[0], \"borderLeftWidth\", !0)\n        }), {\n          top: b.top - d.top - r.css(c, \"marginTop\", !0),\n          left: b.left - d.left - r.css(c, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var a = this.offsetParent;\n\n        while (a && \"static\" === r.css(a, \"position\")) {\n          a = a.offsetParent;\n        }\n\n        return a || ra;\n      });\n    }\n  }), r.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (a, b) {\n    var c = \"pageYOffset\" === b;\n\n    r.fn[a] = function (d) {\n      return T(this, function (a, d, e) {\n        var f;\n        return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);\n      }, a, d, arguments.length);\n    };\n  }), r.each([\"top\", \"left\"], function (a, b) {\n    r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {\n      if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + \"px\" : c;\n    });\n  }), r.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    r.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      r.fn[d] = function (e, f) {\n        var g = arguments.length && (c || \"boolean\" != typeof e),\n            h = c || (e === !0 || f === !0 ? \"margin\" : \"border\");\n        return T(this, function (b, c, e) {\n          var f;\n          return r.isWindow(b) ? 0 === d.indexOf(\"outer\") ? b[\"inner\" + a] : b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body[\"scroll\" + a], f[\"scroll\" + a], b.body[\"offset\" + a], f[\"offset\" + a], f[\"client\" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);\n        }, b, g ? e : void 0, g);\n      };\n    });\n  }), r.fn.extend({\n    bind: function bind(a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function unbind(a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function delegate(a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function undelegate(a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  }), r.holdReady = function (a) {\n    a ? r.readyWait++ : r.ready(!0);\n  }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return r;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var mb = a.jQuery,\n      nb = a.$;\n  return r.noConflict = function (b) {\n    return a.$ === r && (a.$ = nb), b && a.jQuery === r && (a.jQuery = mb), r;\n  }, b || (a.jQuery = a.$ = r), r;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery-slim.min.js\n");

/***/ }),

/***/ "./resources/js/modal.js":
/*!*******************************!*\
  !*** ./resources/js/modal.js ***!
  \*******************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nvar Modal = function ($) {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  var NAME = 'modal';\n  var VERSION = '4.0.0';\n  var DATA_KEY = 'bs.modal';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 300;\n  var BACKDROP_TRANSITION_DURATION = 150;\n  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n\n  var Default = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: true\n  };\n  var DefaultType = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean',\n    show: 'boolean'\n  };\n  var Event = {\n    HIDE: \"hide\" + EVENT_KEY,\n    HIDDEN: \"hidden\" + EVENT_KEY,\n    SHOW: \"show\" + EVENT_KEY,\n    SHOWN: \"shown\" + EVENT_KEY,\n    FOCUSIN: \"focusin\" + EVENT_KEY,\n    RESIZE: \"resize\" + EVENT_KEY,\n    CLICK_DISMISS: \"click.dismiss\" + EVENT_KEY,\n    KEYDOWN_DISMISS: \"keydown.dismiss\" + EVENT_KEY,\n    MOUSEUP_DISMISS: \"mouseup.dismiss\" + EVENT_KEY,\n    MOUSEDOWN_DISMISS: \"mousedown.dismiss\" + EVENT_KEY,\n    CLICK_DATA_API: \"click\" + EVENT_KEY + DATA_API_KEY\n  };\n  var ClassName = {\n    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\n    BACKDROP: 'modal-backdrop',\n    OPEN: 'modal-open',\n    FADE: 'fade',\n    SHOW: 'show'\n  };\n  var Selector = {\n    DIALOG: '.modal-dialog',\n    DATA_TOGGLE: '[data-toggle=\"modal\"]',\n    DATA_DISMISS: '[data-dismiss=\"modal\"]',\n    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n    STICKY_CONTENT: '.sticky-top',\n    NAVBAR_TOGGLER: '.navbar-toggler'\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n  };\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(element, config) {\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._dialog = $(element).find(Selector.DIALOG)[0];\n      this._backdrop = null;\n      this._isShown = false;\n      this._isBodyOverflowing = false;\n      this._ignoreBackdropClick = false;\n      this._originalBodyPadding = 0;\n      this._scrollbarWidth = 0;\n    } // Getters\n\n\n    var _proto = Modal.prototype; // Public\n\n    _proto.toggle = function toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    };\n\n    _proto.show = function show(relatedTarget) {\n      var _this = this;\n\n      if (this._isTransitioning || this._isShown) {\n        return;\n      }\n\n      if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\n        this._isTransitioning = true;\n      }\n\n      var showEvent = $.Event(Event.SHOW, {\n        relatedTarget: relatedTarget\n      });\n      $(this._element).trigger(showEvent);\n\n      if (this._isShown || showEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._isShown = true;\n\n      this._checkScrollbar();\n\n      this._setScrollbar();\n\n      this._adjustDialog();\n\n      $(document.body).addClass(ClassName.OPEN);\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {\n        return _this.hide(event);\n      });\n      $(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {\n        $(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {\n          if ($(event.target).is(_this._element)) {\n            _this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(function () {\n        return _this._showElement(relatedTarget);\n      });\n    };\n\n    _proto.hide = function hide(event) {\n      var _this2 = this;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (this._isTransitioning || !this._isShown) {\n        return;\n      }\n\n      var hideEvent = $.Event(Event.HIDE);\n      $(this._element).trigger(hideEvent);\n\n      if (!this._isShown || hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._isShown = false;\n      var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);\n\n      if (transition) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      $(document).off(Event.FOCUSIN);\n      $(this._element).removeClass(ClassName.SHOW);\n      $(this._element).off(Event.CLICK_DISMISS);\n      $(this._dialog).off(Event.MOUSEDOWN_DISMISS);\n\n      if (transition) {\n        $(this._element).one(Util.TRANSITION_END, function (event) {\n          return _this2._hideModal(event);\n        }).emulateTransitionEnd(TRANSITION_DURATION);\n      } else {\n        this._hideModal();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element, this._backdrop).off(EVENT_KEY);\n      this._config = null;\n      this._element = null;\n      this._dialog = null;\n      this._backdrop = null;\n      this._isShown = null;\n      this._isBodyOverflowing = null;\n      this._ignoreBackdropClick = null;\n      this._scrollbarWidth = null;\n    };\n\n    _proto.handleUpdate = function handleUpdate() {\n      this._adjustDialog();\n    }; // Private\n\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default, config);\n      Util.typeCheckConfig(NAME, config, DefaultType);\n      return config;\n    };\n\n    _proto._showElement = function _showElement(relatedTarget) {\n      var _this3 = this;\n\n      var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.appendChild(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.scrollTop = 0;\n\n      if (transition) {\n        Util.reflow(this._element);\n      }\n\n      $(this._element).addClass(ClassName.SHOW);\n\n      if (this._config.focus) {\n        this._enforceFocus();\n      }\n\n      var shownEvent = $.Event(Event.SHOWN, {\n        relatedTarget: relatedTarget\n      });\n\n      var transitionComplete = function transitionComplete() {\n        if (_this3._config.focus) {\n          _this3._element.focus();\n        }\n\n        _this3._isTransitioning = false;\n        $(_this3._element).trigger(shownEvent);\n      };\n\n      if (transition) {\n        $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);\n      } else {\n        transitionComplete();\n      }\n    };\n\n    _proto._enforceFocus = function _enforceFocus() {\n      var _this4 = this;\n\n      $(document).off(Event.FOCUSIN) // Guard against infinite focus loop\n      .on(Event.FOCUSIN, function (event) {\n        if (document !== event.target && _this4._element !== event.target && $(_this4._element).has(event.target).length === 0) {\n          _this4._element.focus();\n        }\n      });\n    };\n\n    _proto._setEscapeEvent = function _setEscapeEvent() {\n      var _this5 = this;\n\n      if (this._isShown && this._config.keyboard) {\n        $(this._element).on(Event.KEYDOWN_DISMISS, function (event) {\n          if (event.which === ESCAPE_KEYCODE) {\n            event.preventDefault();\n\n            _this5.hide();\n          }\n        });\n      } else if (!this._isShown) {\n        $(this._element).off(Event.KEYDOWN_DISMISS);\n      }\n    };\n\n    _proto._setResizeEvent = function _setResizeEvent() {\n      var _this6 = this;\n\n      if (this._isShown) {\n        $(window).on(Event.RESIZE, function (event) {\n          return _this6.handleUpdate(event);\n        });\n      } else {\n        $(window).off(Event.RESIZE);\n      }\n    };\n\n    _proto._hideModal = function _hideModal() {\n      var _this7 = this;\n\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._isTransitioning = false;\n\n      this._showBackdrop(function () {\n        $(document.body).removeClass(ClassName.OPEN);\n\n        _this7._resetAdjustments();\n\n        _this7._resetScrollbar();\n\n        $(_this7._element).trigger(Event.HIDDEN);\n      });\n    };\n\n    _proto._removeBackdrop = function _removeBackdrop() {\n      if (this._backdrop) {\n        $(this._backdrop).remove();\n        this._backdrop = null;\n      }\n    };\n\n    _proto._showBackdrop = function _showBackdrop(callback) {\n      var _this8 = this;\n\n      var animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\n\n      if (this._isShown && this._config.backdrop) {\n        var doAnimate = Util.supportsTransitionEnd() && animate;\n        this._backdrop = document.createElement('div');\n        this._backdrop.className = ClassName.BACKDROP;\n\n        if (animate) {\n          $(this._backdrop).addClass(animate);\n        }\n\n        $(this._backdrop).appendTo(document.body);\n        $(this._element).on(Event.CLICK_DISMISS, function (event) {\n          if (_this8._ignoreBackdropClick) {\n            _this8._ignoreBackdropClick = false;\n            return;\n          }\n\n          if (event.target !== event.currentTarget) {\n            return;\n          }\n\n          if (_this8._config.backdrop === 'static') {\n            _this8._element.focus();\n          } else {\n            _this8.hide();\n          }\n        });\n\n        if (doAnimate) {\n          Util.reflow(this._backdrop);\n        }\n\n        $(this._backdrop).addClass(ClassName.SHOW);\n\n        if (!callback) {\n          return;\n        }\n\n        if (!doAnimate) {\n          callback();\n          return;\n        }\n\n        $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\n      } else if (!this._isShown && this._backdrop) {\n        $(this._backdrop).removeClass(ClassName.SHOW);\n\n        var callbackRemove = function callbackRemove() {\n          _this8._removeBackdrop();\n\n          if (callback) {\n            callback();\n          }\n        };\n\n        if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\n          $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\n        } else {\n          callbackRemove();\n        }\n      } else if (callback) {\n        callback();\n      }\n    }; // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // todo (fat): these should probably be refactored out of modal.js\n    // ----------------------------------------------------------------------\n\n\n    _proto._adjustDialog = function _adjustDialog() {\n      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      if (!this._isBodyOverflowing && isModalOverflowing) {\n        this._element.style.paddingLeft = this._scrollbarWidth + \"px\";\n      }\n\n      if (this._isBodyOverflowing && !isModalOverflowing) {\n        this._element.style.paddingRight = this._scrollbarWidth + \"px\";\n      }\n    };\n\n    _proto._resetAdjustments = function _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    };\n\n    _proto._checkScrollbar = function _checkScrollbar() {\n      var rect = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;\n      this._scrollbarWidth = this._getScrollbarWidth();\n    };\n\n    _proto._setScrollbar = function _setScrollbar() {\n      var _this9 = this;\n\n      if (this._isBodyOverflowing) {\n        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n        // Adjust fixed content padding\n        $(Selector.FIXED_CONTENT).each(function (index, element) {\n          var actualPadding = $(element)[0].style.paddingRight;\n          var calculatedPadding = $(element).css('padding-right');\n          $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + \"px\");\n        }); // Adjust sticky content margin\n\n        $(Selector.STICKY_CONTENT).each(function (index, element) {\n          var actualMargin = $(element)[0].style.marginRight;\n          var calculatedMargin = $(element).css('margin-right');\n          $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + \"px\");\n        }); // Adjust navbar-toggler margin\n\n        $(Selector.NAVBAR_TOGGLER).each(function (index, element) {\n          var actualMargin = $(element)[0].style.marginRight;\n          var calculatedMargin = $(element).css('margin-right');\n          $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + \"px\");\n        }); // Adjust body padding\n\n        var actualPadding = document.body.style.paddingRight;\n        var calculatedPadding = $('body').css('padding-right');\n        $('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + \"px\");\n      }\n    };\n\n    _proto._resetScrollbar = function _resetScrollbar() {\n      // Restore fixed content padding\n      $(Selector.FIXED_CONTENT).each(function (index, element) {\n        var padding = $(element).data('padding-right');\n\n        if (typeof padding !== 'undefined') {\n          $(element).css('padding-right', padding).removeData('padding-right');\n        }\n      }); // Restore sticky content and navbar-toggler margin\n\n      $(Selector.STICKY_CONTENT + \", \" + Selector.NAVBAR_TOGGLER).each(function (index, element) {\n        var margin = $(element).data('margin-right');\n\n        if (typeof margin !== 'undefined') {\n          $(element).css('margin-right', margin).removeData('margin-right');\n        }\n      }); // Restore body padding\n\n      var padding = $('body').data('padding-right');\n\n      if (typeof padding !== 'undefined') {\n        $('body').css('padding-right', padding).removeData('padding-right');\n      }\n    };\n\n    _proto._getScrollbarWidth = function _getScrollbarWidth() {\n      // thx d.walsh\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\n      document.body.appendChild(scrollDiv);\n      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return scrollbarWidth;\n    }; // Static\n\n\n    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _extends({}, Modal.Default, $(this).data(), _typeof(config) === 'object' && config);\n\n        if (!data) {\n          data = new Modal(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](relatedTarget);\n        } else if (_config.show) {\n          data.show(relatedTarget);\n        }\n      });\n    };\n\n    _createClass(Modal, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n    var _this10 = this;\n\n    var target;\n    var selector = Util.getSelectorFromElement(this);\n\n    if (selector) {\n      target = $(selector)[0];\n    }\n\n    var config = $(target).data(DATA_KEY) ? 'toggle' : _extends({}, $(target).data(), $(this).data());\n\n    if (this.tagName === 'A' || this.tagName === 'AREA') {\n      event.preventDefault();\n    }\n\n    var $target = $(target).one(Event.SHOW, function (showEvent) {\n      if (showEvent.isDefaultPrevented()) {\n        // Only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      $target.one(Event.HIDDEN, function () {\n        if ($(_this10).is(':visible')) {\n          _this10.focus();\n        }\n      });\n    });\n\n    Modal._jQueryInterface.call($(target), config, this);\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Modal._jQueryInterface;\n  $.fn[NAME].Constructor = Modal;\n\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Modal._jQueryInterface;\n  };\n\n  return Modal;\n}($);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/modal.js\n");

/***/ }),

/***/ "./resources/js/popover.js":
/*!*********************************!*\
  !*** ./resources/js/popover.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nvar Popover = function ($) {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  var NAME = 'popover';\n  var VERSION = '4.0.0';\n  var DATA_KEY = 'bs.popover';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var CLASS_PREFIX = 'bs-popover';\n  var BSCLS_PREFIX_REGEX = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX + \"\\\\S+\", 'g');\n\n  var Default = _extends({}, Tooltip.Default, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n  });\n\n  var DefaultType = _extends({}, Tooltip.DefaultType, {\n    content: '(string|element|function)'\n  });\n\n  var ClassName = {\n    FADE: 'fade',\n    SHOW: 'show'\n  };\n  var Selector = {\n    TITLE: '.popover-header',\n    CONTENT: '.popover-body'\n  };\n  var Event = {\n    HIDE: \"hide\" + EVENT_KEY,\n    HIDDEN: \"hidden\" + EVENT_KEY,\n    SHOW: \"show\" + EVENT_KEY,\n    SHOWN: \"shown\" + EVENT_KEY,\n    INSERTED: \"inserted\" + EVENT_KEY,\n    CLICK: \"click\" + EVENT_KEY,\n    FOCUSIN: \"focusin\" + EVENT_KEY,\n    FOCUSOUT: \"focusout\" + EVENT_KEY,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n  };\n\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inheritsLoose(Popover, _Tooltip);\n\n    function Popover() {\n      return _Tooltip.apply(this, arguments) || this;\n    }\n\n    var _proto = Popover.prototype; // Overrides\n\n    _proto.isWithContent = function isWithContent() {\n      return this.getTitle() || this._getContent();\n    };\n\n    _proto.addAttachmentClass = function addAttachmentClass(attachment) {\n      $(this.getTipElement()).addClass(CLASS_PREFIX + \"-\" + attachment);\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      this.tip = this.tip || $(this.config.template)[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var $tip = $(this.getTipElement()); // We use append for html objects to maintain js events\n\n      this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\n\n      var content = this._getContent();\n\n      if (typeof content === 'function') {\n        content = content.call(this.element);\n      }\n\n      this.setElementContent($tip.find(Selector.CONTENT), content);\n      $tip.removeClass(ClassName.FADE + \" \" + ClassName.SHOW);\n    }; // Private\n\n\n    _proto._getContent = function _getContent() {\n      return this.element.getAttribute('data-content') || this.config.content;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var $tip = $(this.getTipElement());\n      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        $tip.removeClass(tabClass.join(''));\n      }\n    }; // Static\n\n\n    Popover._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _typeof(config) === 'object' ? config : null;\n\n        if (!data && /destroy|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Popover(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Popover, null, [{\n      key: \"VERSION\",\n      // Getters\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }]);\n\n    return Popover;\n  }(Tooltip);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[NAME] = Popover._jQueryInterface;\n  $.fn[NAME].Constructor = Popover;\n\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Popover._jQueryInterface;\n  };\n\n  return Popover;\n}($);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJQb3BvdmVyIiwiJCIsIk5BTUUiLCJWRVJTSU9OIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJmbiIsIkNMQVNTX1BSRUZJWCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsIlJlZ0V4cCIsIkRlZmF1bHQiLCJUb29sdGlwIiwicGxhY2VtZW50IiwidHJpZ2dlciIsImNvbnRlbnQiLCJ0ZW1wbGF0ZSIsIkRlZmF1bHRUeXBlIiwiQ2xhc3NOYW1lIiwiRkFERSIsIlNIT1ciLCJTZWxlY3RvciIsIlRJVExFIiwiQ09OVEVOVCIsIkV2ZW50IiwiSElERSIsIkhJRERFTiIsIlNIT1dOIiwiSU5TRVJURUQiLCJDTElDSyIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiX1Rvb2x0aXAiLCJfcHJvdG8iLCJpc1dpdGhDb250ZW50IiwiZ2V0VGl0bGUiLCJfZ2V0Q29udGVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsImF0dGFjaG1lbnQiLCJnZXRUaXBFbGVtZW50IiwiYWRkQ2xhc3MiLCJ0aXAiLCJjb25maWciLCJzZXRDb250ZW50IiwiJHRpcCIsInNldEVsZW1lbnRDb250ZW50IiwiZmluZCIsImVsZW1lbnQiLCJyZW1vdmVDbGFzcyIsImdldEF0dHJpYnV0ZSIsIl9jbGVhblRpcENsYXNzIiwidGFiQ2xhc3MiLCJhdHRyIiwibWF0Y2giLCJqb2luIiwiX2pRdWVyeUludGVyZmFjZSIsImVhY2giLCJkYXRhIiwiX2NvbmZpZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJnZXQiLCJub0NvbmZsaWN0Il0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9wb3BvdmVyLmpzP2IxNTEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBwb3BvdmVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xudmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoJCkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ3BvcG92ZXInO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMCc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5wb3BvdmVyJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgQ0xBU1NfUFJFRklYID0gJ2JzLXBvcG92ZXInO1xuICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYICsgXCJcXFxcUytcIiwgJ2cnKTtcblxuICB2YXIgRGVmYXVsdCA9IF9leHRlbmRzKHt9LCBUb29sdGlwLkRlZmF1bHQsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcbiAgfSk7XG5cbiAgdmFyIERlZmF1bHRUeXBlID0gX2V4dGVuZHMoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcbiAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgfSk7XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBUSVRMRTogJy5wb3BvdmVyLWhlYWRlcicsXG4gICAgQ09OVEVOVDogJy5wb3BvdmVyLWJvZHknXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWVxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBQb3BvdmVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgICBfaW5oZXJpdHNMb29zZShQb3BvdmVyLCBfVG9vbHRpcCk7XG5cbiAgICBmdW5jdGlvbiBQb3BvdmVyKCkge1xuICAgICAgcmV0dXJuIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XG5cbiAgICAvLyBPdmVycmlkZXNcbiAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyBcIi1cIiArIGF0dGFjaG1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpOyAvLyBXZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG5cbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDb250ZW50KCk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLkNPTlRFTlQpLCBjb250ZW50KTtcbiAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIC8vIEdldHRlcnNcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfS0VZO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFdmVudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oVG9vbHRpcCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBQb3BvdmVyO1xuXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFBvcG92ZXI7XG59KCQpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wb3Zlci5qcy5tYXAiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztFQUFFLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztJQUFFLElBQUlFLFVBQVUsR0FBR0gsS0FBSyxDQUFDQyxDQUFELENBQXRCO0lBQTJCRSxVQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtJQUF3REQsVUFBVSxDQUFDRSxZQUFYLEdBQTBCLElBQTFCO0lBQWdDLElBQUksV0FBV0YsVUFBZixFQUEyQkEsVUFBVSxDQUFDRyxRQUFYLEdBQXNCLElBQXRCO0lBQTRCQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JULE1BQXRCLEVBQThCSSxVQUFVLENBQUNNLEdBQXpDLEVBQThDTixVQUE5QztFQUE0RDtBQUFFOztBQUU3VCxTQUFTTyxZQUFULENBQXNCQyxXQUF0QixFQUFtQ0MsVUFBbkMsRUFBK0NDLFdBQS9DLEVBQTREO0VBQUUsSUFBSUQsVUFBSixFQUFnQmQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBakI7RUFBc0QsSUFBSUMsV0FBSixFQUFpQmYsaUJBQWlCLENBQUNhLFdBQUQsRUFBY0UsV0FBZCxDQUFqQjtFQUE2QyxPQUFPRixXQUFQO0FBQXFCOztBQUV2TixTQUFTSSxjQUFULENBQXdCQyxRQUF4QixFQUFrQ0MsVUFBbEMsRUFBOEM7RUFBRUQsUUFBUSxDQUFDRixTQUFULEdBQXFCUCxNQUFNLENBQUNXLE1BQVAsQ0FBY0QsVUFBVSxDQUFDSCxTQUF6QixDQUFyQjtFQUEwREUsUUFBUSxDQUFDRixTQUFULENBQW1CSyxXQUFuQixHQUFpQ0gsUUFBakM7RUFBMkNBLFFBQVEsQ0FBQ0ksU0FBVCxHQUFxQkgsVUFBckI7QUFBa0M7O0FBRXZMLFNBQVNJLFFBQVQsR0FBb0I7RUFBRUEsUUFBUSxHQUFHZCxNQUFNLENBQUNlLE1BQVAsSUFBaUIsVUFBVXZCLE1BQVYsRUFBa0I7SUFBRSxLQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdzQixTQUFTLENBQUNyQixNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUEyQztNQUFFLElBQUl1QixNQUFNLEdBQUdELFNBQVMsQ0FBQ3RCLENBQUQsQ0FBdEI7O01BQTJCLEtBQUssSUFBSVEsR0FBVCxJQUFnQmUsTUFBaEIsRUFBd0I7UUFBRSxJQUFJakIsTUFBTSxDQUFDTyxTQUFQLENBQWlCVyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNGLE1BQXJDLEVBQTZDZixHQUE3QyxDQUFKLEVBQXVEO1VBQUVWLE1BQU0sQ0FBQ1UsR0FBRCxDQUFOLEdBQWNlLE1BQU0sQ0FBQ2YsR0FBRCxDQUFwQjtRQUE0QjtNQUFFO0lBQUU7O0lBQUMsT0FBT1YsTUFBUDtFQUFnQixDQUE1UDs7RUFBOFAsT0FBT3NCLFFBQVEsQ0FBQ00sS0FBVCxDQUFlLElBQWYsRUFBcUJKLFNBQXJCLENBQVA7QUFBeUM7QUFFN1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsVUFBVUMsQ0FBVixFQUFhO0VBQ3pCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRSxJQUFJQyxJQUFJLEdBQUcsU0FBWDtFQUNBLElBQUlDLE9BQU8sR0FBRyxPQUFkO0VBQ0EsSUFBSUMsUUFBUSxHQUFHLFlBQWY7RUFDQSxJQUFJQyxTQUFTLEdBQUcsTUFBTUQsUUFBdEI7RUFDQSxJQUFJRSxrQkFBa0IsR0FBR0wsQ0FBQyxDQUFDTSxFQUFGLENBQUtMLElBQUwsQ0FBekI7RUFDQSxJQUFJTSxZQUFZLEdBQUcsWUFBbkI7RUFDQSxJQUFJQyxrQkFBa0IsR0FBRyxJQUFJQyxNQUFKLENBQVcsWUFBWUYsWUFBWixHQUEyQixNQUF0QyxFQUE4QyxHQUE5QyxDQUF6Qjs7RUFFQSxJQUFJRyxPQUFPLEdBQUdsQixRQUFRLENBQUMsRUFBRCxFQUFLbUIsT0FBTyxDQUFDRCxPQUFiLEVBQXNCO0lBQzFDRSxTQUFTLEVBQUUsT0FEK0I7SUFFMUNDLE9BQU8sRUFBRSxPQUZpQztJQUcxQ0MsT0FBTyxFQUFFLEVBSGlDO0lBSTFDQyxRQUFRLEVBQUUseUNBQXlDLDJCQUF6QyxHQUF1RSxrQ0FBdkUsR0FBNEc7RUFKNUUsQ0FBdEIsQ0FBdEI7O0VBT0EsSUFBSUMsV0FBVyxHQUFHeEIsUUFBUSxDQUFDLEVBQUQsRUFBS21CLE9BQU8sQ0FBQ0ssV0FBYixFQUEwQjtJQUNsREYsT0FBTyxFQUFFO0VBRHlDLENBQTFCLENBQTFCOztFQUlBLElBQUlHLFNBQVMsR0FBRztJQUNkQyxJQUFJLEVBQUUsTUFEUTtJQUVkQyxJQUFJLEVBQUU7RUFGUSxDQUFoQjtFQUlBLElBQUlDLFFBQVEsR0FBRztJQUNiQyxLQUFLLEVBQUUsaUJBRE07SUFFYkMsT0FBTyxFQUFFO0VBRkksQ0FBZjtFQUlBLElBQUlDLEtBQUssR0FBRztJQUNWQyxJQUFJLEVBQUUsU0FBU3BCLFNBREw7SUFFVnFCLE1BQU0sRUFBRSxXQUFXckIsU0FGVDtJQUdWZSxJQUFJLEVBQUUsU0FBU2YsU0FITDtJQUlWc0IsS0FBSyxFQUFFLFVBQVV0QixTQUpQO0lBS1Z1QixRQUFRLEVBQUUsYUFBYXZCLFNBTGI7SUFNVndCLEtBQUssRUFBRSxVQUFVeEIsU0FOUDtJQU9WeUIsT0FBTyxFQUFFLFlBQVl6QixTQVBYO0lBUVYwQixRQUFRLEVBQUUsYUFBYTFCLFNBUmI7SUFTVjJCLFVBQVUsRUFBRSxlQUFlM0IsU0FUakI7SUFVVjRCLFVBQVUsRUFBRSxlQUFlNUI7SUFDM0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7RUFmYyxDQUFaOztFQW1CQSxJQUFJTCxPQUFPLEdBQ1gsYUFDQSxVQUFVa0MsUUFBVixFQUFvQjtJQUNsQi9DLGNBQWMsQ0FBQ2EsT0FBRCxFQUFVa0MsUUFBVixDQUFkOztJQUVBLFNBQVNsQyxPQUFULEdBQW1CO01BQ2pCLE9BQU9rQyxRQUFRLENBQUNuQyxLQUFULENBQWUsSUFBZixFQUFxQkosU0FBckIsS0FBbUMsSUFBMUM7SUFDRDs7SUFFRCxJQUFJd0MsTUFBTSxHQUFHbkMsT0FBTyxDQUFDZCxTQUFyQixDQVBrQixDQVNsQjs7SUFDQWlELE1BQU0sQ0FBQ0MsYUFBUCxHQUF1QixTQUFTQSxhQUFULEdBQXlCO01BQzlDLE9BQU8sS0FBS0MsUUFBTCxNQUFtQixLQUFLQyxXQUFMLEVBQTFCO0lBQ0QsQ0FGRDs7SUFJQUgsTUFBTSxDQUFDSSxrQkFBUCxHQUE0QixTQUFTQSxrQkFBVCxDQUE0QkMsVUFBNUIsRUFBd0M7TUFDbEV2QyxDQUFDLENBQUMsS0FBS3dDLGFBQUwsRUFBRCxDQUFELENBQXdCQyxRQUF4QixDQUFpQ2xDLFlBQVksR0FBRyxHQUFmLEdBQXFCZ0MsVUFBdEQ7SUFDRCxDQUZEOztJQUlBTCxNQUFNLENBQUNNLGFBQVAsR0FBdUIsU0FBU0EsYUFBVCxHQUF5QjtNQUM5QyxLQUFLRSxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZMUMsQ0FBQyxDQUFDLEtBQUsyQyxNQUFMLENBQVk1QixRQUFiLENBQUQsQ0FBd0IsQ0FBeEIsQ0FBdkI7TUFDQSxPQUFPLEtBQUsyQixHQUFaO0lBQ0QsQ0FIRDs7SUFLQVIsTUFBTSxDQUFDVSxVQUFQLEdBQW9CLFNBQVNBLFVBQVQsR0FBc0I7TUFDeEMsSUFBSUMsSUFBSSxHQUFHN0MsQ0FBQyxDQUFDLEtBQUt3QyxhQUFMLEVBQUQsQ0FBWixDQUR3QyxDQUNKOztNQUVwQyxLQUFLTSxpQkFBTCxDQUF1QkQsSUFBSSxDQUFDRSxJQUFMLENBQVUzQixRQUFRLENBQUNDLEtBQW5CLENBQXZCLEVBQWtELEtBQUtlLFFBQUwsRUFBbEQ7O01BRUEsSUFBSXRCLE9BQU8sR0FBRyxLQUFLdUIsV0FBTCxFQUFkOztNQUVBLElBQUksT0FBT3ZCLE9BQVAsS0FBbUIsVUFBdkIsRUFBbUM7UUFDakNBLE9BQU8sR0FBR0EsT0FBTyxDQUFDakIsSUFBUixDQUFhLEtBQUttRCxPQUFsQixDQUFWO01BQ0Q7O01BRUQsS0FBS0YsaUJBQUwsQ0FBdUJELElBQUksQ0FBQ0UsSUFBTCxDQUFVM0IsUUFBUSxDQUFDRSxPQUFuQixDQUF2QixFQUFvRFIsT0FBcEQ7TUFDQStCLElBQUksQ0FBQ0ksV0FBTCxDQUFpQmhDLFNBQVMsQ0FBQ0MsSUFBVixHQUFpQixHQUFqQixHQUF1QkQsU0FBUyxDQUFDRSxJQUFsRDtJQUNELENBYkQsQ0F2QmtCLENBb0NmOzs7SUFHSGUsTUFBTSxDQUFDRyxXQUFQLEdBQXFCLFNBQVNBLFdBQVQsR0FBdUI7TUFDMUMsT0FBTyxLQUFLVyxPQUFMLENBQWFFLFlBQWIsQ0FBMEIsY0FBMUIsS0FBNkMsS0FBS1AsTUFBTCxDQUFZN0IsT0FBaEU7SUFDRCxDQUZEOztJQUlBb0IsTUFBTSxDQUFDaUIsY0FBUCxHQUF3QixTQUFTQSxjQUFULEdBQTBCO01BQ2hELElBQUlOLElBQUksR0FBRzdDLENBQUMsQ0FBQyxLQUFLd0MsYUFBTCxFQUFELENBQVo7TUFDQSxJQUFJWSxRQUFRLEdBQUdQLElBQUksQ0FBQ1EsSUFBTCxDQUFVLE9BQVYsRUFBbUJDLEtBQW5CLENBQXlCOUMsa0JBQXpCLENBQWY7O01BRUEsSUFBSTRDLFFBQVEsS0FBSyxJQUFiLElBQXFCQSxRQUFRLENBQUMvRSxNQUFULEdBQWtCLENBQTNDLEVBQThDO1FBQzVDd0UsSUFBSSxDQUFDSSxXQUFMLENBQWlCRyxRQUFRLENBQUNHLElBQVQsQ0FBYyxFQUFkLENBQWpCO01BQ0Q7SUFDRixDQVBELENBM0NrQixDQWtEZjs7O0lBR0h4RCxPQUFPLENBQUN5RCxnQkFBUixHQUEyQixTQUFTQSxnQkFBVCxDQUEwQmIsTUFBMUIsRUFBa0M7TUFDM0QsT0FBTyxLQUFLYyxJQUFMLENBQVUsWUFBWTtRQUMzQixJQUFJQyxJQUFJLEdBQUcxRCxDQUFDLENBQUMsSUFBRCxDQUFELENBQVEwRCxJQUFSLENBQWF2RCxRQUFiLENBQVg7O1FBRUEsSUFBSXdELE9BQU8sR0FBRyxRQUFPaEIsTUFBUCxNQUFrQixRQUFsQixHQUE2QkEsTUFBN0IsR0FBc0MsSUFBcEQ7O1FBRUEsSUFBSSxDQUFDZSxJQUFELElBQVMsZUFBZUUsSUFBZixDQUFvQmpCLE1BQXBCLENBQWIsRUFBMEM7VUFDeEM7UUFDRDs7UUFFRCxJQUFJLENBQUNlLElBQUwsRUFBVztVQUNUQSxJQUFJLEdBQUcsSUFBSTNELE9BQUosQ0FBWSxJQUFaLEVBQWtCNEQsT0FBbEIsQ0FBUDtVQUNBM0QsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRMEQsSUFBUixDQUFhdkQsUUFBYixFQUF1QnVELElBQXZCO1FBQ0Q7O1FBRUQsSUFBSSxPQUFPZixNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO1VBQzlCLElBQUksT0FBT2UsSUFBSSxDQUFDZixNQUFELENBQVgsS0FBd0IsV0FBNUIsRUFBeUM7WUFDdkMsTUFBTSxJQUFJa0IsU0FBSixDQUFjLHVCQUF1QmxCLE1BQXZCLEdBQWdDLElBQTlDLENBQU47VUFDRDs7VUFFRGUsSUFBSSxDQUFDZixNQUFELENBQUo7UUFDRDtNQUNGLENBckJNLENBQVA7SUFzQkQsQ0F2QkQ7O0lBeUJBOUQsWUFBWSxDQUFDa0IsT0FBRCxFQUFVLElBQVYsRUFBZ0IsQ0FBQztNQUMzQm5CLEdBQUcsRUFBRSxTQURzQjtNQUUzQjtNQUNBa0YsR0FBRyxFQUFFLFNBQVNBLEdBQVQsR0FBZTtRQUNsQixPQUFPNUQsT0FBUDtNQUNEO0lBTDBCLENBQUQsRUFNekI7TUFDRHRCLEdBQUcsRUFBRSxTQURKO01BRURrRixHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO1FBQ2xCLE9BQU9wRCxPQUFQO01BQ0Q7SUFKQSxDQU55QixFQVd6QjtNQUNEOUIsR0FBRyxFQUFFLE1BREo7TUFFRGtGLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7UUFDbEIsT0FBTzdELElBQVA7TUFDRDtJQUpBLENBWHlCLEVBZ0J6QjtNQUNEckIsR0FBRyxFQUFFLFVBREo7TUFFRGtGLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7UUFDbEIsT0FBTzNELFFBQVA7TUFDRDtJQUpBLENBaEJ5QixFQXFCekI7TUFDRHZCLEdBQUcsRUFBRSxPQURKO01BRURrRixHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO1FBQ2xCLE9BQU92QyxLQUFQO01BQ0Q7SUFKQSxDQXJCeUIsRUEwQnpCO01BQ0QzQyxHQUFHLEVBQUUsV0FESjtNQUVEa0YsR0FBRyxFQUFFLFNBQVNBLEdBQVQsR0FBZTtRQUNsQixPQUFPMUQsU0FBUDtNQUNEO0lBSkEsQ0ExQnlCLEVBK0J6QjtNQUNEeEIsR0FBRyxFQUFFLGFBREo7TUFFRGtGLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7UUFDbEIsT0FBTzlDLFdBQVA7TUFDRDtJQUpBLENBL0J5QixDQUFoQixDQUFaOztJQXNDQSxPQUFPakIsT0FBUDtFQUNELENBckhELENBcUhFWSxPQXJIRixDQUZBO0VBd0hBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7OztFQUdFWCxDQUFDLENBQUNNLEVBQUYsQ0FBS0wsSUFBTCxJQUFhRixPQUFPLENBQUN5RCxnQkFBckI7RUFDQXhELENBQUMsQ0FBQ00sRUFBRixDQUFLTCxJQUFMLEVBQVduQixXQUFYLEdBQXlCaUIsT0FBekI7O0VBRUFDLENBQUMsQ0FBQ00sRUFBRixDQUFLTCxJQUFMLEVBQVc4RCxVQUFYLEdBQXdCLFlBQVk7SUFDbEMvRCxDQUFDLENBQUNNLEVBQUYsQ0FBS0wsSUFBTCxJQUFhSSxrQkFBYjtJQUNBLE9BQU9OLE9BQU8sQ0FBQ3lELGdCQUFmO0VBQ0QsQ0FIRDs7RUFLQSxPQUFPekQsT0FBUDtBQUNELENBNUxhLENBNExaQyxDQTVMWSxDQUFkIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3BvcG92ZXIuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/popover.js\n");

/***/ }),

/***/ "./resources/js/popper.min.js":
/*!************************************!*\
  !*** ./resources/js/popper.min.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*\n Copyright (C) Federico Zivolo 2017\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n(function (e, t) {\n  'object' == ( false ? 0 : _typeof(exports)) && 'undefined' != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = getComputedStyle(e, null);\n    return t ? o[t] : o;\n  }\n\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function n(e) {\n    if (!e) return document.body;\n\n    switch (e.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return e.ownerDocument.body;\n\n      case '#document':\n        return e.body;\n    }\n\n    var i = t(e),\n        r = i.overflow,\n        p = i.overflowX,\n        s = i.overflowY;\n    return /(auto|scroll)/.test(r + s + p) ? e : n(o(e));\n  }\n\n  function r(e) {\n    var o = e && e.offsetParent,\n        i = o && o.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(o.nodeName) && 'static' === t(o, 'position') ? r(o) : o : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function p(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || r(e.firstElementChild) === e);\n  }\n\n  function s(e) {\n    return null === e.parentNode ? e : s(e.parentNode);\n  }\n\n  function d(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = o ? e : t,\n        n = o ? t : e,\n        a = document.createRange();\n    a.setStart(i, 0), a.setEnd(n, 0);\n    var l = a.commonAncestorContainer;\n    if (e !== l && t !== l || i.contains(n)) return p(l) ? l : r(l);\n    var f = s(e);\n    return f.host ? d(f.host, t) : d(e, s(t).host);\n  }\n\n  function a(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n        o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n        i = e.nodeName;\n\n    if ('BODY' === i || 'HTML' === i) {\n      var n = e.ownerDocument.documentElement,\n          r = e.ownerDocument.scrollingElement || n;\n      return r[o];\n    }\n\n    return e[o];\n  }\n\n  function l(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        i = a(t, 'top'),\n        n = a(t, 'left'),\n        r = o ? -1 : 1;\n    return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;\n  }\n\n  function f(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n        i = 'Left' == o ? 'Right' : 'Bottom';\n    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + i + 'Width'], 10);\n  }\n\n  function m(e, t, o, i) {\n    return J(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], ie() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);\n  }\n\n  function h() {\n    var e = document.body,\n        t = document.documentElement,\n        o = ie() && getComputedStyle(t);\n    return {\n      height: m('Height', e, t, o),\n      width: m('Width', e, t, o)\n    };\n  }\n\n  function c(e) {\n    return se({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function g(e) {\n    var o = {};\n    if (ie()) try {\n      o = e.getBoundingClientRect();\n      var i = a(e, 'top'),\n          n = a(e, 'left');\n      o.top += i, o.left += n, o.bottom += i, o.right += n;\n    } catch (e) {} else o = e.getBoundingClientRect();\n    var r = {\n      left: o.left,\n      top: o.top,\n      width: o.right - o.left,\n      height: o.bottom - o.top\n    },\n        p = 'HTML' === e.nodeName ? h() : {},\n        s = p.width || e.clientWidth || r.right - r.left,\n        d = p.height || e.clientHeight || r.bottom - r.top,\n        l = e.offsetWidth - s,\n        m = e.offsetHeight - d;\n\n    if (l || m) {\n      var g = t(e);\n      l -= f(g, 'x'), m -= f(g, 'y'), r.width -= l, r.height -= m;\n    }\n\n    return c(r);\n  }\n\n  function u(e, o) {\n    var i = ie(),\n        r = 'HTML' === o.nodeName,\n        p = g(e),\n        s = g(o),\n        d = n(e),\n        a = t(o),\n        f = parseFloat(a.borderTopWidth, 10),\n        m = parseFloat(a.borderLeftWidth, 10),\n        h = c({\n      top: p.top - s.top - f,\n      left: p.left - s.left - m,\n      width: p.width,\n      height: p.height\n    });\n\n    if (h.marginTop = 0, h.marginLeft = 0, !i && r) {\n      var u = parseFloat(a.marginTop, 10),\n          b = parseFloat(a.marginLeft, 10);\n      h.top -= f - u, h.bottom -= f - u, h.left -= m - b, h.right -= m - b, h.marginTop = u, h.marginLeft = b;\n    }\n\n    return (i ? o.contains(d) : o === d && 'BODY' !== d.nodeName) && (h = l(h, o)), h;\n  }\n\n  function b(e) {\n    var t = e.ownerDocument.documentElement,\n        o = u(e, t),\n        i = J(t.clientWidth, window.innerWidth || 0),\n        n = J(t.clientHeight, window.innerHeight || 0),\n        r = a(t),\n        p = a(t, 'left'),\n        s = {\n      top: r - o.top + o.marginTop,\n      left: p - o.left + o.marginLeft,\n      width: i,\n      height: n\n    };\n    return c(s);\n  }\n\n  function w(e) {\n    var i = e.nodeName;\n    return 'BODY' === i || 'HTML' === i ? !1 : 'fixed' === t(e, 'position') || w(o(e));\n  }\n\n  function y(e, t, i, r) {\n    var p = {\n      top: 0,\n      left: 0\n    },\n        s = d(e, t);\n    if ('viewport' === r) p = b(s);else {\n      var a;\n      'scrollParent' === r ? (a = n(o(t)), 'BODY' === a.nodeName && (a = e.ownerDocument.documentElement)) : 'window' === r ? a = e.ownerDocument.documentElement : a = r;\n      var l = u(a, s);\n\n      if ('HTML' === a.nodeName && !w(s)) {\n        var f = h(),\n            m = f.height,\n            c = f.width;\n        p.top += l.top - l.marginTop, p.bottom = m + l.top, p.left += l.left - l.marginLeft, p.right = c + l.left;\n      } else p = l;\n    }\n    return p.left += i, p.top += i, p.right -= i, p.bottom -= i, p;\n  }\n\n  function E(e) {\n    var t = e.width,\n        o = e.height;\n    return t * o;\n  }\n\n  function v(e, t, o, i, n) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = y(o, i, r, n),\n        s = {\n      top: {\n        width: p.width,\n        height: t.top - p.top\n      },\n      right: {\n        width: p.right - t.right,\n        height: p.height\n      },\n      bottom: {\n        width: p.width,\n        height: p.bottom - t.bottom\n      },\n      left: {\n        width: t.left - p.left,\n        height: p.height\n      }\n    },\n        d = Object.keys(s).map(function (e) {\n      return se({\n        key: e\n      }, s[e], {\n        area: E(s[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        a = d.filter(function (e) {\n      var t = e.width,\n          i = e.height;\n      return t >= o.clientWidth && i >= o.clientHeight;\n    }),\n        l = 0 < a.length ? a[0].key : d[0].key,\n        f = e.split('-')[1];\n    return l + (f ? '-' + f : '');\n  }\n\n  function O(e, t, o) {\n    var i = d(t, o);\n    return u(o, i);\n  }\n\n  function L(e) {\n    var t = getComputedStyle(e),\n        o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),\n        i = parseFloat(t.marginLeft) + parseFloat(t.marginRight),\n        n = {\n      width: e.offsetWidth + i,\n      height: e.offsetHeight + o\n    };\n    return n;\n  }\n\n  function x(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function S(e, t, o) {\n    o = o.split('-')[0];\n    var i = L(e),\n        n = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== ['right', 'left'].indexOf(o),\n        p = r ? 'top' : 'left',\n        s = r ? 'left' : 'top',\n        d = r ? 'height' : 'width',\n        a = r ? 'width' : 'height';\n    return n[p] = t[p] + t[d] / 2 - i[d] / 2, n[s] = o === s ? t[s] - i[a] : t[x(s)], n;\n  }\n\n  function T(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function D(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var i = T(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(i);\n  }\n\n  function C(t, o, i) {\n    var n = void 0 === i ? t : t.slice(0, D(t, 'name', i));\n    return n.forEach(function (t) {\n      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var i = t['function'] || t.fn;\n      t.enabled && e(i) && (o.offsets.popper = c(o.offsets.popper), o.offsets.reference = c(o.offsets.reference), o = i(o, t));\n    }), o;\n  }\n\n  function N() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = O(this.state, this.popper, this.reference), e.placement = v(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = S(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = 'absolute', e = C(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n\n  function k(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n          i = e.enabled;\n      return i && o === t;\n    });\n  }\n\n  function W(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length - 1; n++) {\n      var i = t[n],\n          r = i ? '' + i + o : e;\n      if ('undefined' != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function P() {\n    return this.state.isDestroyed = !0, k(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.left = '', this.popper.style.position = '', this.popper.style.top = '', this.popper.style[W('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function B(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n\n  function H(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n        p = r ? e.ownerDocument.defaultView : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || H(n(p.parentNode), t, o, i), i.push(p);\n  }\n\n  function A(e, t, o, i) {\n    o.updateBound = i, B(e).addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return H(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n\n  function I() {\n    this.state.eventsEnabled || (this.state = A(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function M(e, t) {\n    return B(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n\n  function R() {\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = M(this.reference, this.state));\n  }\n\n  function U(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function Y(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && U(t[o]) && (i = 'px'), e.style[o] = t[o] + i;\n    });\n  }\n\n  function j(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = t[o];\n      !1 === i ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n\n  function F(e, t, o) {\n    var i = T(e, function (e) {\n      var o = e.name;\n      return o === t;\n    }),\n        n = !!i && e.some(function (e) {\n      return e.name === o && e.enabled && e.order < i.order;\n    });\n\n    if (!n) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n\n    return n;\n  }\n\n  function K(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n\n  function q(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = ae.indexOf(e),\n        i = ae.slice(o + 1).concat(ae.slice(0, o));\n    return t ? i.reverse() : i;\n  }\n\n  function V(e, t, o, i) {\n    var n = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n        r = +n[1],\n        p = n[2];\n    if (!r) return e;\n\n    if (0 === p.indexOf('%')) {\n      var s;\n\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n\n        case '%':\n        case '%r':\n        default:\n          s = i;\n      }\n\n      var d = c(s);\n      return d[t] / 100 * r;\n    }\n\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? J(document.documentElement.clientHeight, window.innerHeight || 0) : J(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n\n    return r;\n  }\n\n  function z(e, t, o, i) {\n    var n = [0, 0],\n        r = -1 !== ['right', 'left'].indexOf(i),\n        p = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        s = p.indexOf(T(p, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, i) {\n      var n = (1 === i ? !r : r) ? 'height' : 'width',\n          p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return V(e, n, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, i) {\n        U(o) && (n[t] += o * ('-' === e[i - 1] ? -1 : 1));\n      });\n    }), n;\n  }\n\n  function G(e, t) {\n    var o,\n        i = t.offset,\n        n = e.placement,\n        r = e.offsets,\n        p = r.popper,\n        s = r.reference,\n        d = n.split('-')[0];\n    return o = U(+i) ? [+i, 0] : z(i, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n  }\n\n  for (var _ = Math.min, X = Math.floor, J = Math.max, Q = 'undefined' != typeof window && 'undefined' != typeof document, Z = ['Edge', 'Trident', 'Firefox'], $ = 0, ee = 0; ee < Z.length; ee += 1) {\n    if (Q && 0 <= navigator.userAgent.indexOf(Z[ee])) {\n      $ = 1;\n      break;\n    }\n  }\n\n  var i,\n      te = Q && window.Promise,\n      oe = te ? function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, window.Promise.resolve().then(function () {\n        t = !1, e();\n      }));\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, $));\n    };\n  },\n      ie = function ie() {\n    return void 0 == i && (i = -1 !== navigator.appVersion.indexOf('MSIE 10')), i;\n  },\n      ne = function ne(e, t) {\n    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n  },\n      re = function () {\n    function e(e, t) {\n      for (var o, n = 0; n < t.length; n++) {\n        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n    }\n\n    return function (t, o, i) {\n      return o && e(t.prototype, o), i && e(t, i), t;\n    };\n  }(),\n      pe = function pe(e, t, o) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: o,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = o, e;\n  },\n      se = Object.assign || function (e) {\n    for (var t, o = 1; o < arguments.length; o++) {\n      for (var i in t = arguments[o], t) {\n        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      }\n    }\n\n    return e;\n  },\n      de = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n      ae = de.slice(3),\n      le = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  },\n      fe = function () {\n    function t(o, i) {\n      var n = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      ne(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(n.update);\n      }, this.update = oe(this.update.bind(this)), this.options = se({}, t.Defaults, r), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = o && o.jquery ? o[0] : o, this.popper = i && i.jquery ? i[0] : i, this.options.modifiers = {}, Object.keys(se({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n        n.options.modifiers[e] = se({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return se({\n          name: e\n        }, n.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);\n      }), this.update();\n      var p = this.options.eventsEnabled;\n      p && this.enableEventListeners(), this.state.eventsEnabled = p;\n    }\n\n    return re(t, [{\n      key: 'update',\n      value: function value() {\n        return N.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function value() {\n        return P.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function value() {\n        return I.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function value() {\n        return R.call(this);\n      }\n    }]), t;\n  }();\n\n  return fe.Utils = ('undefined' == typeof window ? __webpack_require__.g : window).PopperUtils, fe.placements = de, fe.Defaults = {\n    placement: 'bottom',\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = t.split('-')[1];\n\n          if (i) {\n            var n = e.offsets,\n                r = n.reference,\n                p = n.popper,\n                s = -1 !== ['bottom', 'top'].indexOf(o),\n                d = s ? 'left' : 'top',\n                a = s ? 'width' : 'height',\n                l = {\n              start: pe({}, d, r[d]),\n              end: pe({}, d, r[d] + r[a] - p[a])\n            };\n            e.offsets.popper = se({}, p, l[i]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: G,\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.boundariesElement || r(e.instance.popper);\n          e.instance.reference === o && (o = r(o));\n          var i = y(e.instance.popper, e.instance.reference, t.padding, o);\n          t.boundaries = i;\n          var n = t.priority,\n              p = e.offsets.popper,\n              s = {\n            primary: function primary(e) {\n              var o = p[e];\n              return p[e] < i[e] && !t.escapeWithReference && (o = J(p[e], i[e])), pe({}, e, o);\n            },\n            secondary: function secondary(e) {\n              var o = 'right' === e ? 'left' : 'top',\n                  n = p[o];\n              return p[e] > i[e] && !t.escapeWithReference && (n = _(p[o], i[e] - ('right' === e ? p.width : p.height))), pe({}, o, n);\n            }\n          };\n          return n.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            p = se({}, p, s[t](e));\n          }), e.offsets.popper = p, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n              o = t.popper,\n              i = t.reference,\n              n = e.placement.split('-')[0],\n              r = X,\n              p = -1 !== ['top', 'bottom'].indexOf(n),\n              s = p ? 'right' : 'bottom',\n              d = p ? 'left' : 'top',\n              a = p ? 'width' : 'height';\n          return o[s] < r(i[d]) && (e.offsets.popper[d] = r(i[d]) - o[a]), o[d] > r(i[s]) && (e.offsets.popper[d] = r(i[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, o) {\n          var i;\n          if (!F(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var n = o.element;\n\n          if ('string' == typeof n) {\n            if (n = e.instance.popper.querySelector(n), !n) return e;\n          } else if (!e.instance.popper.contains(n)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n\n          var r = e.placement.split('-')[0],\n              p = e.offsets,\n              s = p.popper,\n              d = p.reference,\n              a = -1 !== ['left', 'right'].indexOf(r),\n              l = a ? 'height' : 'width',\n              f = a ? 'Top' : 'Left',\n              m = f.toLowerCase(),\n              h = a ? 'left' : 'top',\n              g = a ? 'bottom' : 'right',\n              u = L(n)[l];\n          d[g] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[g] - u)), d[m] + u > s[g] && (e.offsets.popper[m] += d[m] + u - s[g]), e.offsets.popper = c(e.offsets.popper);\n          var b = d[m] + d[l] / 2 - u / 2,\n              w = t(e.instance.popper),\n              y = parseFloat(w['margin' + f], 10),\n              E = parseFloat(w['border' + f + 'Width'], 10),\n              v = b - e.offsets.popper[m] - y - E;\n          return v = J(_(s[l] - u, v), 0), e.arrowElement = n, e.offsets.arrow = (i = {}, pe(i, m, Math.round(v)), pe(i, h, ''), i), e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (k(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = y(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement),\n              i = e.placement.split('-')[0],\n              n = x(i),\n              r = e.placement.split('-')[1] || '',\n              p = [];\n\n          switch (t.behavior) {\n            case le.FLIP:\n              p = [i, n];\n              break;\n\n            case le.CLOCKWISE:\n              p = q(i);\n              break;\n\n            case le.COUNTERCLOCKWISE:\n              p = q(i, !0);\n              break;\n\n            default:\n              p = t.behavior;\n          }\n\n          return p.forEach(function (s, d) {\n            if (i !== s || p.length === d + 1) return e;\n            i = e.placement.split('-')[0], n = x(i);\n            var a = e.offsets.popper,\n                l = e.offsets.reference,\n                f = X,\n                m = 'left' === i && f(a.right) > f(l.left) || 'right' === i && f(a.left) < f(l.right) || 'top' === i && f(a.bottom) > f(l.top) || 'bottom' === i && f(a.top) < f(l.bottom),\n                h = f(a.left) < f(o.left),\n                c = f(a.right) > f(o.right),\n                g = f(a.top) < f(o.top),\n                u = f(a.bottom) > f(o.bottom),\n                b = 'left' === i && h || 'right' === i && c || 'top' === i && g || 'bottom' === i && u,\n                w = -1 !== ['top', 'bottom'].indexOf(i),\n                y = !!t.flipVariations && (w && 'start' === r && h || w && 'end' === r && c || !w && 'start' === r && g || !w && 'end' === r && u);\n            (m || b || y) && (e.flipped = !0, (m || b) && (i = p[d + 1]), y && (r = K(r)), e.placement = i + (r ? '-' + r : ''), e.offsets.popper = se({}, e.offsets.popper, S(e.instance.popper, e.offsets.reference, e.placement)), e = C(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport'\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = e.offsets,\n              n = i.popper,\n              r = i.reference,\n              p = -1 !== ['left', 'right'].indexOf(o),\n              s = -1 === ['top', 'left'].indexOf(o);\n          return n[p ? 'left' : 'top'] = r[o] - (s ? n[p ? 'width' : 'height'] : 0), e.placement = x(t), e.offsets.popper = c(n), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!F(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n              o = T(e.instance.modifiers, function (e) {\n            return 'preventOverflow' === e.name;\n          }).boundaries;\n\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.x,\n              i = t.y,\n              n = e.offsets.popper,\n              p = T(e.instance.modifiers, function (e) {\n            return 'applyStyle' === e.name;\n          }).gpuAcceleration;\n          void 0 !== p && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n              d,\n              a = void 0 === p ? t.gpuAcceleration : p,\n              l = r(e.instance.popper),\n              f = g(l),\n              m = {\n            position: n.position\n          },\n              h = {\n            left: X(n.left),\n            top: X(n.top),\n            bottom: X(n.bottom),\n            right: X(n.right)\n          },\n              c = 'bottom' === o ? 'top' : 'bottom',\n              u = 'right' === i ? 'left' : 'right',\n              b = W('transform');\n          if (d = 'bottom' == c ? -f.height + h.bottom : h.top, s = 'right' == u ? -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[u] = 0, m.willChange = 'transform';else {\n            var w = 'bottom' == c ? -1 : 1,\n                y = 'right' == u ? -1 : 1;\n            m[c] = d * w, m[u] = s * y, m.willChange = c + ', ' + u;\n          }\n          var E = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = se({}, E, e.attributes), e.styles = se({}, m, e.styles), e.arrowStyles = se({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return Y(e.instance.popper, e.styles), j(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && Y(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function onLoad(e, t, o, i, n) {\n          var r = O(n, t, e),\n              p = v(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), Y(t, {\n            position: 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, fe;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/popper.min.js\n");

/***/ }),

/***/ "./resources/js/tooltip.js":
/*!*********************************!*\
  !*** ./resources/js/tooltip.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\nvar Tooltip = function ($) {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  var NAME = 'tooltip';\n  var VERSION = '4.0.0';\n  var DATA_KEY = 'bs.tooltip';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var JQUERY_NO_CONFLICT = $.fn[NAME];\n  var TRANSITION_DURATION = 150;\n  var CLASS_PREFIX = 'bs-tooltip';\n  var BSCLS_PREFIX_REGEX = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX + \"\\\\S+\", 'g');\n  var DefaultType = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(number|string)',\n    container: '(string|element|boolean)',\n    fallbackPlacement: '(string|array)',\n    boundary: '(string|element)'\n  };\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left'\n  };\n  var Default = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: 0,\n    container: false,\n    fallbackPlacement: 'flip',\n    boundary: 'scrollParent'\n  };\n  var HoverState = {\n    SHOW: 'show',\n    OUT: 'out'\n  };\n  var Event = {\n    HIDE: \"hide\" + EVENT_KEY,\n    HIDDEN: \"hidden\" + EVENT_KEY,\n    SHOW: \"show\" + EVENT_KEY,\n    SHOWN: \"shown\" + EVENT_KEY,\n    INSERTED: \"inserted\" + EVENT_KEY,\n    CLICK: \"click\" + EVENT_KEY,\n    FOCUSIN: \"focusin\" + EVENT_KEY,\n    FOCUSOUT: \"focusout\" + EVENT_KEY,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY\n  };\n  var ClassName = {\n    FADE: 'fade',\n    SHOW: 'show'\n  };\n  var Selector = {\n    TOOLTIP: '.tooltip',\n    TOOLTIP_INNER: '.tooltip-inner',\n    ARROW: '.arrow'\n  };\n  var Trigger = {\n    HOVER: 'hover',\n    FOCUS: 'focus',\n    CLICK: 'click',\n    MANUAL: 'manual'\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n  };\n\n  var Tooltip = /*#__PURE__*/function () {\n    function Tooltip(element, config) {\n      /**\n       * Check for Popper dependency\n       * Popper - https://popper.js.org\n       */\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');\n      } // private\n\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this.element = element;\n      this.config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n    } // Getters\n\n\n    var _proto = Tooltip.prototype; // Public\n\n    _proto.enable = function enable() {\n      this._isEnabled = true;\n    };\n\n    _proto.disable = function disable() {\n      this._isEnabled = false;\n    };\n\n    _proto.toggleEnabled = function toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    };\n\n    _proto.toggle = function toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        var dataKey = this.constructor.DATA_KEY;\n        var context = $(event.currentTarget).data(dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n          $(event.currentTarget).data(dataKey, context);\n        }\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      clearTimeout(this._timeout);\n      $.removeData(this.element, this.constructor.DATA_KEY);\n      $(this.element).off(this.constructor.EVENT_KEY);\n      $(this.element).closest('.modal').off('hide.bs.modal');\n\n      if (this.tip) {\n        $(this.tip).remove();\n      }\n\n      this._isEnabled = null;\n      this._timeout = null;\n      this._hoverState = null;\n      this._activeTrigger = null;\n\n      if (this._popper !== null) {\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n      this.element = null;\n      this.config = null;\n      this.tip = null;\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if ($(this.element).css('display') === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      var showEvent = $.Event(this.constructor.Event.SHOW);\n\n      if (this.isWithContent() && this._isEnabled) {\n        $(this.element).trigger(showEvent);\n        var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);\n\n        if (showEvent.isDefaultPrevented() || !isInTheDom) {\n          return;\n        }\n\n        var tip = this.getTipElement();\n        var tipId = Util.getUID(this.constructor.NAME);\n        tip.setAttribute('id', tipId);\n        this.element.setAttribute('aria-describedby', tipId);\n        this.setContent();\n\n        if (this.config.animation) {\n          $(tip).addClass(ClassName.FADE);\n        }\n\n        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n\n        var attachment = this._getAttachment(placement);\n\n        this.addAttachmentClass(attachment);\n        var container = this.config.container === false ? document.body : $(this.config.container);\n        $(tip).data(this.constructor.DATA_KEY, this);\n\n        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {\n          $(tip).appendTo(container);\n        }\n\n        $(this.element).trigger(this.constructor.Event.INSERTED);\n        this._popper = new Popper(this.element, tip, {\n          placement: attachment,\n          modifiers: {\n            offset: {\n              offset: this.config.offset\n            },\n            flip: {\n              behavior: this.config.fallbackPlacement\n            },\n            arrow: {\n              element: Selector.ARROW\n            },\n            preventOverflow: {\n              boundariesElement: this.config.boundary\n            }\n          },\n          onCreate: function onCreate(data) {\n            if (data.originalPlacement !== data.placement) {\n              _this._handlePopperPlacementChange(data);\n            }\n          },\n          onUpdate: function onUpdate(data) {\n            _this._handlePopperPlacementChange(data);\n          }\n        });\n        $(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement) {\n          $('body').children().on('mouseover', null, $.noop);\n        }\n\n        var complete = function complete() {\n          if (_this.config.animation) {\n            _this._fixTransition();\n          }\n\n          var prevHoverState = _this._hoverState;\n          _this._hoverState = null;\n          $(_this.element).trigger(_this.constructor.Event.SHOWN);\n\n          if (prevHoverState === HoverState.OUT) {\n            _this._leave(null, _this);\n          }\n        };\n\n        if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\n          $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);\n        } else {\n          complete();\n        }\n      }\n    };\n\n    _proto.hide = function hide(callback) {\n      var _this2 = this;\n\n      var tip = this.getTipElement();\n      var hideEvent = $.Event(this.constructor.Event.HIDE);\n\n      var complete = function complete() {\n        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {\n          tip.parentNode.removeChild(tip);\n        }\n\n        _this2._cleanTipClass();\n\n        _this2.element.removeAttribute('aria-describedby');\n\n        $(_this2.element).trigger(_this2.constructor.Event.HIDDEN);\n\n        if (_this2._popper !== null) {\n          _this2._popper.destroy();\n        }\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      $(this.element).trigger(hideEvent);\n\n      if (hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      $(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        $('body').children().off('mouseover', null, $.noop);\n      }\n\n      this._activeTrigger[Trigger.CLICK] = false;\n      this._activeTrigger[Trigger.FOCUS] = false;\n      this._activeTrigger[Trigger.HOVER] = false;\n\n      if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\n        $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\n      } else {\n        complete();\n      }\n\n      this._hoverState = '';\n    };\n\n    _proto.update = function update() {\n      if (this._popper !== null) {\n        this._popper.scheduleUpdate();\n      }\n    }; // Protected\n\n\n    _proto.isWithContent = function isWithContent() {\n      return Boolean(this.getTitle());\n    };\n\n    _proto.addAttachmentClass = function addAttachmentClass(attachment) {\n      $(this.getTipElement()).addClass(CLASS_PREFIX + \"-\" + attachment);\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      this.tip = this.tip || $(this.config.template)[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var $tip = $(this.getTipElement());\n      this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());\n      $tip.removeClass(ClassName.FADE + \" \" + ClassName.SHOW);\n    };\n\n    _proto.setElementContent = function setElementContent($element, content) {\n      var html = this.config.html;\n\n      if (_typeof(content) === 'object' && (content.nodeType || content.jquery)) {\n        // Content is a DOM node or a jQuery\n        if (html) {\n          if (!$(content).parent().is($element)) {\n            $element.empty().append(content);\n          }\n        } else {\n          $element.text($(content).text());\n        }\n      } else {\n        $element[html ? 'html' : 'text'](content);\n      }\n    };\n\n    _proto.getTitle = function getTitle() {\n      var title = this.element.getAttribute('data-original-title');\n\n      if (!title) {\n        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n      }\n\n      return title;\n    }; // Private\n\n\n    _proto._getAttachment = function _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this3 = this;\n\n      var triggers = this.config.trigger.split(' ');\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          $(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {\n            return _this3.toggle(event);\n          });\n        } else if (trigger !== Trigger.MANUAL) {\n          var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;\n          var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;\n          $(_this3.element).on(eventIn, _this3.config.selector, function (event) {\n            return _this3._enter(event);\n          }).on(eventOut, _this3.config.selector, function (event) {\n            return _this3._leave(event);\n          });\n        }\n\n        $(_this3.element).closest('.modal').on('hide.bs.modal', function () {\n          return _this3.hide();\n        });\n      });\n\n      if (this.config.selector) {\n        this.config = _extends({}, this.config, {\n          trigger: 'manual',\n          selector: ''\n        });\n      } else {\n        this._fixTitle();\n      }\n    };\n\n    _proto._fixTitle = function _fixTitle() {\n      var titleType = _typeof(this.element.getAttribute('data-original-title'));\n\n      if (this.element.getAttribute('title') || titleType !== 'string') {\n        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n        this.element.setAttribute('title', '');\n      }\n    };\n\n    _proto._enter = function _enter(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || $(event.currentTarget).data(dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n        $(event.currentTarget).data(dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;\n      }\n\n      if ($(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {\n        context._hoverState = HoverState.SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HoverState.SHOW;\n\n      if (!context.config.delay || !context.config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HoverState.SHOW) {\n          context.show();\n        }\n      }, context.config.delay.show);\n    };\n\n    _proto._leave = function _leave(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || $(event.currentTarget).data(dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n        $(event.currentTarget).data(dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HoverState.OUT;\n\n      if (!context.config.delay || !context.config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HoverState.OUT) {\n          context.hide();\n        }\n      }, context.config.delay.hide);\n    };\n\n    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {\n      for (var trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, this.constructor.Default, $(this.element).data(), config);\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._getDelegateConfig = function _getDelegateConfig() {\n      var config = {};\n\n      if (this.config) {\n        for (var key in this.config) {\n          if (this.constructor.Default[key] !== this.config[key]) {\n            config[key] = this.config[key];\n          }\n        }\n      }\n\n      return config;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var $tip = $(this.getTipElement());\n      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        $tip.removeClass(tabClass.join(''));\n      }\n    };\n\n    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {\n      this._cleanTipClass();\n\n      this.addAttachmentClass(this._getAttachment(data.placement));\n    };\n\n    _proto._fixTransition = function _fixTransition() {\n      var tip = this.getTipElement();\n      var initConfigAnimation = this.config.animation;\n\n      if (tip.getAttribute('x-placement') !== null) {\n        return;\n      }\n\n      $(tip).removeClass(ClassName.FADE);\n      this.config.animation = false;\n      this.hide();\n      this.show();\n      this.config.animation = initConfigAnimation;\n    }; // Static\n\n\n    Tooltip._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _typeof(config) === 'object' && config;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Tooltip(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Tooltip, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }]);\n\n    return Tooltip;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n\n  $.fn[NAME] = Tooltip._jQueryInterface;\n  $.fn[NAME].Constructor = Tooltip;\n\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT;\n    return Tooltip._jQueryInterface;\n  };\n\n  return Tooltip;\n}($, Popper);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/tooltip.js\n");

/***/ }),

/***/ "./resources/js/util.js":
/*!******************************!*\
  !*** ./resources/js/util.js ***!
  \******************************/
/***/ (() => {

eval("/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.0.0): util.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nvar Util = function ($) {\n  /**\n   * ------------------------------------------------------------------------\n   * Private TransitionEnd Helpers\n   * ------------------------------------------------------------------------\n   */\n  var transition = false;\n  var MAX_UID = 1000000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  function toType(obj) {\n    return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n  }\n\n  function getSpecialTransitionEndEvent() {\n    return {\n      bindType: transition.end,\n      delegateType: transition.end,\n      handle: function handle(event) {\n        if ($(event.target).is(this)) {\n          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params\n        }\n\n        return undefined; // eslint-disable-line no-undefined\n      }\n    };\n  }\n\n  function transitionEndTest() {\n    if (typeof window !== 'undefined' && window.QUnit) {\n      return false;\n    }\n\n    return {\n      end: 'transitionend'\n    };\n  }\n\n  function transitionEndEmulator(duration) {\n    var _this = this;\n\n    var called = false;\n    $(this).one(Util.TRANSITION_END, function () {\n      called = true;\n    });\n    setTimeout(function () {\n      if (!called) {\n        Util.triggerTransitionEnd(_this);\n      }\n    }, duration);\n    return this;\n  }\n\n  function setTransitionEndSupport() {\n    transition = transitionEndTest();\n    $.fn.emulateTransitionEnd = transitionEndEmulator;\n\n    if (Util.supportsTransitionEnd()) {\n      $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\n    }\n  }\n\n  function escapeId(selector) {\n    // We escape IDs in case of special selectors (selector = '#myId:something')\n    // $.escapeSelector does not exist in jQuery < 3\n    selector = typeof $.escapeSelector === 'function' ? $.escapeSelector(selector).substr(1) : selector.replace(/(:|\\.|\\[|\\]|,|=|@)/g, '\\\\$1');\n    return selector;\n  }\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  var Util = {\n    TRANSITION_END: 'bsTransitionEnd',\n    getUID: function getUID(prefix) {\n      do {\n        // eslint-disable-next-line no-bitwise\n        prefix += ~~(Math.random() * MAX_UID); // \"~~\" acts like a faster Math.floor() here\n      } while (document.getElementById(prefix));\n\n      return prefix;\n    },\n    getSelectorFromElement: function getSelectorFromElement(element) {\n      var selector = element.getAttribute('data-target');\n\n      if (!selector || selector === '#') {\n        selector = element.getAttribute('href') || '';\n      } // If it's an ID\n\n\n      if (selector.charAt(0) === '#') {\n        selector = escapeId(selector);\n      }\n\n      try {\n        var $selector = $(document).find(selector);\n        return $selector.length > 0 ? selector : null;\n      } catch (err) {\n        return null;\n      }\n    },\n    reflow: function reflow(element) {\n      return element.offsetHeight;\n    },\n    triggerTransitionEnd: function triggerTransitionEnd(element) {\n      $(element).trigger(transition.end);\n    },\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(transition);\n    },\n    isElement: function isElement(obj) {\n      return (obj[0] || obj).nodeType;\n    },\n    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {\n      for (var property in configTypes) {\n        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n          var expectedTypes = configTypes[property];\n          var value = config[property];\n          var valueType = value && Util.isElement(value) ? 'element' : toType(value);\n\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new Error(componentName.toUpperCase() + \": \" + (\"Option \\\"\" + property + \"\\\" provided type \\\"\" + valueType + \"\\\" \") + (\"but expected type \\\"\" + expectedTypes + \"\\\".\"));\n          }\n        }\n      }\n    }\n  };\n  setTransitionEndSupport();\n  return Util;\n}($);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/util.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/scripts": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/jquery-slim.min.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/bootstrap.bundle.min.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/modal.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/popper.min.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/popover.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/tooltip.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/collapse.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/util.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;